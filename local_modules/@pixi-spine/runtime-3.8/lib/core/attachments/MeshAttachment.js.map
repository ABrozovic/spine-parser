{"version":3,"file":"MeshAttachment.js","sources":["../../../src/core/attachments/MeshAttachment.ts"],"sourcesContent":["import { Attachment, VertexAttachment } from './Attachment';\r\nimport { AttachmentType, Color, IMeshAttachment, TextureRegion, Utils } from '@pixi-spine/base';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class MeshAttachment extends VertexAttachment implements IMeshAttachment {\r\n    type = AttachmentType.Mesh;\r\n\r\n    region: TextureRegion;\r\n    path: string;\r\n    regionUVs: Float32Array;\r\n    triangles: Array<number>;\r\n    color = new Color(1, 1, 1, 1);\r\n    width: number;\r\n    height: number;\r\n    hullLength: number;\r\n    edges: Array<number>;\r\n    private parentMesh: MeshAttachment;\r\n    tempColor = new Color(0, 0, 0, 0);\r\n\r\n    constructor(name: string) {\r\n        super(name);\r\n    }\r\n\r\n    getParentMesh() {\r\n        return this.parentMesh;\r\n    }\r\n\r\n    /** @param parentMesh May be null. */\r\n    setParentMesh(parentMesh: MeshAttachment) {\r\n        this.parentMesh = parentMesh;\r\n        if (parentMesh != null) {\r\n            this.bones = parentMesh.bones;\r\n            this.vertices = parentMesh.vertices;\r\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\r\n            this.regionUVs = parentMesh.regionUVs;\r\n            this.triangles = parentMesh.triangles;\r\n            this.hullLength = parentMesh.hullLength;\r\n            this.worldVerticesLength = parentMesh.worldVerticesLength;\r\n        }\r\n    }\r\n\r\n    copy(): Attachment {\r\n        if (this.parentMesh != null) return this.newLinkedMesh();\r\n\r\n        const copy = new MeshAttachment(this.name);\r\n\r\n        copy.region = this.region;\r\n        copy.path = this.path;\r\n        copy.color.setFromColor(this.color);\r\n\r\n        this.copyTo(copy);\r\n        copy.regionUVs = new Float32Array(this.regionUVs.length);\r\n        Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\r\n        copy.triangles = new Array<number>(this.triangles.length);\r\n        Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\r\n        copy.hullLength = this.hullLength;\r\n\r\n        // Nonessential.\r\n        if (this.edges != null) {\r\n            copy.edges = new Array<number>(this.edges.length);\r\n            Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\r\n        }\r\n        copy.width = this.width;\r\n        copy.height = this.height;\r\n\r\n        return copy;\r\n    }\r\n\r\n    newLinkedMesh(): MeshAttachment {\r\n        const copy = new MeshAttachment(this.name);\r\n\r\n        copy.region = this.region;\r\n        copy.path = this.path;\r\n        copy.color.setFromColor(this.color);\r\n        copy.deformAttachment = this.deformAttachment;\r\n        copy.setParentMesh(this.parentMesh != null ? this.parentMesh : this);\r\n        // copy.updateUVs();\r\n\r\n        return copy;\r\n    }\r\n}\r\n"],"names":["VertexAttachment","AttachmentType","Color","Utils"],"mappings":"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"}