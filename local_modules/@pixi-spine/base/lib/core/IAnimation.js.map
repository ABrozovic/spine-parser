{"version":3,"file":"IAnimation.js","sources":["../../src/core/IAnimation.ts"],"sourcesContent":["import type { ISkeleton, ISkeletonData } from './ISkeleton';\r\nimport type { Map } from './Utils';\r\n\r\n// Those enums were moved from Animation.ts of spine 3.8 and 4.0\r\n\r\n/** Controls how a timeline value is mixed with the setup pose value or current pose value when a timeline's `alpha`\r\n * < 1.\r\n *\r\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n * @public\r\n * */\r\nexport enum MixBlend {\r\n    /** Transitions from the setup value to the timeline value (the current value is not used). Before the first key, the setup\r\n     * value is set. */\r\n    setup,\r\n    /** Transitions from the current value to the timeline value. Before the first key, transitions from the current value to\r\n     * the setup value. Timelines which perform instant transitions, such as DrawOrderTimeline or\r\n     * AttachmentTimeline, use the setup value before the first key.\r\n     *\r\n     * `first` is intended for the first animations applied, not for animations layered on top of those. */\r\n    first,\r\n    /** Transitions from the current value to the timeline value. No change is made before the first key (the current value is\r\n     * kept until the first key).\r\n     *\r\n     * `replace` is intended for animations layered on top of others, not for the first animations applied. */\r\n    replace,\r\n    /** Transitions from the current value to the current value plus the timeline value. No change is made before the first key\r\n     * (the current value is kept until the first key).\r\n     *\r\n     * `add` is intended for animations layered on top of others, not for the first animations applied. Properties\r\n     * keyed by additive animations must be set manually or by another animation before applying the additive animations, else\r\n     * the property values will increase continually. */\r\n    add,\r\n}\r\n\r\n/** Indicates whether a timeline's `alpha` is mixing out over time toward 0 (the setup or current pose value) or\r\n * mixing in toward 1 (the timeline's value).\r\n *\r\n * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\r\n * @public\r\n * */\r\nexport enum MixDirection {\r\n    mixIn,\r\n    mixOut,\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IAnimation<Timeline extends ITimeline = ITimeline> {\r\n    name: string;\r\n    timelines: Timeline[];\r\n    duration: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IAnimationState<AnimationStateData extends IAnimationStateData = IAnimationStateData> {\r\n    data: AnimationStateData;\r\n    tracks: ITrackEntry[];\r\n    listeners: IAnimationStateListener[];\r\n    timeScale: number;\r\n\r\n    update(dt: number): void;\r\n    apply(skeleton: ISkeleton): boolean;\r\n\r\n    setAnimation(trackIndex: number, animationName: string, loop: boolean): ITrackEntry;\r\n    addAnimation(trackIndex: number, animationName: string, loop: boolean, delay: number): ITrackEntry;\r\n    addEmptyAnimation(trackIndex: number, mixDuration: number, delay: number): ITrackEntry;\r\n    setEmptyAnimation(trackIndex: number, mixDuration: number): ITrackEntry;\r\n    setEmptyAnimations(mixDuration: number): void;\r\n    hasAnimation(animationName: string): boolean;\r\n    addListener(listener: IAnimationStateListener): void;\r\n    removeListener(listener: IAnimationStateListener): void;\r\n    clearListeners(): void;\r\n    clearTracks(): void;\r\n    clearTrack(index: number): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IAnimationStateData<SkeletonData extends ISkeletonData = ISkeletonData, Animation extends IAnimation = IAnimation> {\r\n    skeletonData: SkeletonData;\r\n    animationToMixTime: Map<number>;\r\n    defaultMix: number;\r\n    setMix(fromName: string, toName: string, duration: number): void;\r\n    setMixWith(from: Animation, to: Animation, duration: number): void;\r\n    getMix(from: Animation, to: Animation): number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IAnimationStateListener {\r\n    start?(entry: ITrackEntry): void;\r\n    interrupt?(entry: ITrackEntry): void;\r\n    end?(entry: ITrackEntry): void;\r\n    dispose?(entry: ITrackEntry): void;\r\n    complete?(entry: ITrackEntry): void;\r\n    event?(entry: ITrackEntry, event: IEvent): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITimeline {}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITrackEntry {\r\n    trackIndex: number;\r\n    loop: boolean;\r\n    animationEnd: number;\r\n    listener: IAnimationStateListener;\r\n\r\n    delay: number;\r\n    trackTime: number;\r\n    trackLast: number;\r\n    nextTrackLast: number;\r\n    trackEnd: number;\r\n    timeScale: number;\r\n    alpha: number;\r\n    mixTime: number;\r\n    mixDuration: number;\r\n    interruptAlpha: number;\r\n    totalAlpha: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IEventData {\r\n    name: string;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IEvent {\r\n    time: number;\r\n    data: IEventData;\r\n}\r\n"],"names":["MixBlend","MixDirection"],"mappings":";;AAWY,IAAA,QAAA,qBAAAA,SAAL,KAAA;AAGH,EAAAA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AAMA,EAAAA,SAAA,CAAA,SAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AAKA,EAAAA,SAAA,CAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AAOA,EAAAA,SAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AArBQ,EAAAA,OAAAA,SAAAA,CAAAA;AAAA,CAAA,EAAA,QAAA,IAAA,EAAA,EAAA;AA8BA,IAAA,YAAA,qBAAAC,aAAL,KAAA;AACH,EAAAA,aAAA,CAAA,aAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA,CAAA;AACA,EAAAA,aAAA,CAAA,aAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AAFQ,EAAAA,OAAAA,aAAAA,CAAAA;AAAA,CAAA,EAAA,YAAA,IAAA,EAAA;;;;;"}