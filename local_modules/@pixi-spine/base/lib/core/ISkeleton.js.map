{"version":3,"file":"ISkeleton.js","sources":["../../src/core/ISkeleton.ts"],"sourcesContent":["import type { AttachmentType } from './AttachmentType';\r\nimport type { IAnimation, IEventData } from './IAnimation';\r\nimport type { IIkConstraintData, IPathConstraintData, ITransformConstraintData } from './IConstraint';\r\nimport type { Color, Vector2, Map } from './Utils';\r\nimport type { TextureRegion } from './TextureRegion';\r\nimport type { BLEND_MODES, Matrix } from '@pixi/core';\r\n\r\n// This enum was moved from BoneData.ts of spine 3.7, 3.8 and 4.0\r\n\r\n/** Determines how a bone inherits world transforms from parent bones.\r\n * @public\r\n * */\r\nexport enum TransformMode {\r\n    Normal,\r\n    OnlyTranslation,\r\n    NoRotationOrReflection,\r\n    NoScale,\r\n    NoScaleOrReflection,\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBone {\r\n    data: IBoneData;\r\n    matrix: Matrix;\r\n    active: boolean;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISkin {\r\n    name: string;\r\n    attachments: Array<Map<IAttachment>>;\r\n\r\n    getAttachment(slotIndex: number, name: string): IAttachment | null;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IAttachment {\r\n    name: string;\r\n    type: AttachmentType;\r\n    readonly sequence?: ISequence;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IHasTextureRegion {\r\n    /** The name used to find the {@link #region()}. */\r\n    path: string;\r\n\r\n    /** The region used to draw the attachment. After setting the region or if the region's properties are changed,\r\n     * {@link #updateRegion()} must be called. */\r\n    region: TextureRegion | null;\r\n\r\n    /** Updates any values the attachment calculates using the {@link #getRegion()}. Must be called after setting the\r\n     * {@link #getRegion()} or if the region's properties are changed. */\r\n    // updateRegion (): void;\r\n\r\n    /** The color to tint the attachment. */\r\n    color: Color;\r\n\r\n    readonly sequence: ISequence | null;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISequence {\r\n    id: number;\r\n    regions: TextureRegion[];\r\n    apply(slot: ISlot, attachment: IHasTextureRegion): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IVertexAttachment<Slot extends ISlot = ISlot> extends IAttachment {\r\n    id: number;\r\n    computeWorldVerticesOld(slot: Slot, worldVertices: ArrayLike<number>): void;\r\n    computeWorldVertices(slot: Slot, start: number, count: number, worldVertices: ArrayLike<number>, offset: number, stride: number): void;\r\n    worldVerticesLength: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IClippingAttachment extends IVertexAttachment {\r\n    endSlot?: ISlotData;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IRegionAttachment extends IAttachment {\r\n    region: TextureRegion;\r\n    color: Color;\r\n    x;\r\n    y;\r\n    scaleX;\r\n    scaleY;\r\n    rotation;\r\n    width;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IMeshAttachment extends IVertexAttachment {\r\n    region: TextureRegion;\r\n    color: Color;\r\n    regionUVs: Float32Array;\r\n    triangles: number[];\r\n    hullLength: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISlotData {\r\n    index: number;\r\n    name: string;\r\n    boneData: IBoneData;\r\n    color: Color;\r\n    darkColor: Color;\r\n    attachmentName: string;\r\n    blendMode: BLEND_MODES;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface IBoneData {\r\n    index: number;\r\n    name: string;\r\n    parent: IBoneData;\r\n    length: number;\r\n    x: number;\r\n    y: number;\r\n    rotation: number;\r\n    scaleX: number;\r\n    scaleY: number;\r\n    shearX: number;\r\n    shearY: number;\r\n    transformMode: TransformMode;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISlot {\r\n    getAttachment(): IAttachment;\r\n    data: ISlotData;\r\n    color: Color;\r\n    darkColor: Color;\r\n    blendMode: number;\r\n    bone: IBone;\r\n\r\n    sprites?: any;\r\n    currentSprite?: any;\r\n    currentSpriteName?: string;\r\n\r\n    meshes?: any;\r\n    currentMesh?: any;\r\n    currentMeshName?: string;\r\n    currentMeshId?: number;\r\n\r\n    currentGraphics?: any;\r\n    clippingContainer?: any;\r\n\r\n    hackRegion?: TextureRegion;\r\n    hackAttachment?: IAttachment;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISkeleton<SkeletonData extends ISkeletonData = ISkeletonData, Bone extends IBone = IBone, Slot extends ISlot = ISlot, Skin extends ISkin = ISkin> {\r\n    bones: Bone[];\r\n    slots: Slot[];\r\n    drawOrder: Slot[];\r\n    skin: Skin;\r\n    data: SkeletonData;\r\n    x: number; // added for debug purposes\r\n    y: number; // added for debug purposes\r\n    updateWorldTransform(): void;\r\n    setToSetupPose(): void;\r\n    findSlotIndex(slotName: string): number;\r\n    getAttachmentByName(slotName: string, attachmentName: string): IAttachment;\r\n\r\n    setBonesToSetupPose(): void;\r\n    setSlotsToSetupPose(): void;\r\n    findBone(boneName: string): Bone;\r\n    findSlot(slotName: string): Slot;\r\n    findBoneIndex(boneName: string): number;\r\n    findSlotIndex(slotName: string): number;\r\n    setSkinByName(skinName: string): void;\r\n    setAttachment(slotName: string, attachmentName: string): void;\r\n    getBounds(offset: Vector2, size: Vector2, temp: Array<number>): void;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISkeletonParser {\r\n    scale: number;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ISkeletonData<\r\n    BoneData extends IBoneData = IBoneData,\r\n    SlotData extends ISlotData = ISlotData,\r\n    Skin extends ISkin = ISkin,\r\n    Animation extends IAnimation = IAnimation,\r\n    EventData extends IEventData = IEventData,\r\n    IkConstraintData extends IIkConstraintData = IIkConstraintData,\r\n    TransformConstraintData extends ITransformConstraintData = ITransformConstraintData,\r\n    PathConstraintData extends IPathConstraintData = IPathConstraintData\r\n> {\r\n    name: string;\r\n    bones: BoneData[];\r\n    slots: SlotData[];\r\n    skins: Skin[];\r\n    defaultSkin: Skin;\r\n    events: EventData[];\r\n    animations: Animation[];\r\n    version: string;\r\n    hash: string;\r\n    width: number;\r\n    height: number;\r\n    ikConstraints: IkConstraintData[];\r\n    transformConstraints: TransformConstraintData[];\r\n    pathConstraints: PathConstraintData[];\r\n\r\n    findBone(boneName: string): BoneData | null;\r\n    findBoneIndex(boneName: string): number;\r\n    findSlot(slotName: string): SlotData | null;\r\n    findSlotIndex(slotName: string): number;\r\n    findSkin(skinName: string): Skin | null;\r\n\r\n    findEvent(eventDataName: string): EventData | null;\r\n    findAnimation(animationName: string): Animation | null;\r\n    findIkConstraint(constraintName: string): IkConstraintData | null;\r\n    findTransformConstraint(constraintName: string): TransformConstraintData | null;\r\n    findPathConstraint(constraintName: string): PathConstraintData | null;\r\n}\r\n"],"names":["TransformMode"],"mappings":";;AAYY,IAAA,aAAA,qBAAAA,cAAL,KAAA;AACH,EAAAA,cAAA,CAAA,cAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA;AACA,EAAAA,cAAA,CAAA,cAAA,CAAA,iBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iBAAA,CAAA;AACA,EAAAA,cAAA,CAAA,cAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAAA,CAAA;AACA,EAAAA,cAAA,CAAA,cAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA;AACA,EAAAA,cAAA,CAAA,cAAA,CAAA,qBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,qBAAA,CAAA;AALQ,EAAAA,OAAAA,cAAAA,CAAAA;AAAA,CAAA,EAAA,aAAA,IAAA,EAAA;;;;"}