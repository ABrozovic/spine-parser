{"version":3,"file":"TextureAtlas.js","sources":["../../src/core/TextureAtlas.ts"],"sourcesContent":["import { Texture, SCALE_MODES, MIPMAP_MODES, ALPHA_MODES, Rectangle } from '@pixi/core';\r\nimport { TextureRegion, TextureWrap, TextureFilter, filterFromString } from './TextureRegion';\r\nimport type { Map, Disposable } from './Utils';\r\nimport type { BaseTexture } from '@pixi/core';\r\n\r\nclass RegionFields {\r\n    x = 0;\r\n    y = 0;\r\n    width = 0;\r\n    height = 0;\r\n    offsetX = 0;\r\n    offsetY = 0;\r\n    originalWidth = 0;\r\n    originalHeight = 0;\r\n    rotate = 0;\r\n    index = 0;\r\n}\r\n/**\r\n * @public\r\n */\r\nexport class TextureAtlas implements Disposable {\r\n    pages = new Array<TextureAtlasPage>();\r\n    regions = new Array<TextureAtlasRegion>();\r\n\r\n    constructor(atlasText?: string, textureLoader?: (path: string, loaderFunction: (tex: BaseTexture) => any) => any, callback?: (obj: TextureAtlas) => any) {\r\n        if (atlasText) {\r\n            this.addSpineAtlas(atlasText, textureLoader, callback);\r\n        }\r\n    }\r\n\r\n    addTexture(name: string, texture: Texture) {\r\n        const pages = this.pages;\r\n        let page: TextureAtlasPage = null;\r\n\r\n        for (let i = 0; i < pages.length; i++) {\r\n            if (pages[i].baseTexture === texture.baseTexture) {\r\n                page = pages[i];\r\n                break;\r\n            }\r\n        }\r\n        if (page === null) {\r\n            page = new TextureAtlasPage();\r\n            page.name = 'texturePage';\r\n            const baseTexture = texture.baseTexture;\r\n\r\n            page.width = baseTexture.realWidth;\r\n            page.height = baseTexture.realHeight;\r\n            page.baseTexture = baseTexture;\r\n            // those fields are not relevant in Pixi\r\n            page.minFilter = page.magFilter = TextureFilter.Nearest;\r\n            page.uWrap = TextureWrap.ClampToEdge;\r\n            page.vWrap = TextureWrap.ClampToEdge;\r\n            pages.push(page);\r\n        }\r\n        const region = new TextureAtlasRegion();\r\n\r\n        region.name = name;\r\n        region.page = page;\r\n        region.texture = texture;\r\n        region.index = -1;\r\n        this.regions.push(region);\r\n\r\n        return region;\r\n    }\r\n\r\n    addTextureHash(textures: Map<Texture>, stripExtension: boolean) {\r\n        for (const key in textures) {\r\n            if (textures.hasOwnProperty(key)) {\r\n                this.addTexture(stripExtension && key.indexOf('.') !== -1 ? key.substr(0, key.lastIndexOf('.')) : key, textures[key]);\r\n            }\r\n        }\r\n    }\r\n\r\n    public addSpineAtlas(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\r\n        return this.load(atlasText, textureLoader, callback);\r\n    }\r\n\r\n    private load(atlasText: string, textureLoader: (path: string, loaderFunction: (tex: BaseTexture) => any) => any, callback: (obj: TextureAtlas) => any) {\r\n        if (textureLoader == null) {\r\n            throw new Error('textureLoader cannot be null.');\r\n        }\r\n\r\n        const reader = new TextureAtlasReader(atlasText);\r\n        const entry = new Array<string>(4);\r\n        let page: TextureAtlasPage = null;\r\n        const pageFields: Map<Function> = {};\r\n        let region: RegionFields = null;\r\n\r\n        pageFields.size = () => {\r\n            page.width = parseInt(entry[1]);\r\n            page.height = parseInt(entry[2]);\r\n        };\r\n        pageFields.format = () => {\r\n            // page.format = Format[tuple[0]]; we don't need format in WebGL\r\n        };\r\n        pageFields.filter = () => {\r\n            page.minFilter = filterFromString(entry[1]);\r\n            page.magFilter = filterFromString(entry[2]);\r\n        };\r\n        pageFields.repeat = () => {\r\n            if (entry[1].indexOf('x') != -1) page.uWrap = TextureWrap.Repeat;\r\n            if (entry[1].indexOf('y') != -1) page.vWrap = TextureWrap.Repeat;\r\n        };\r\n        pageFields.pma = () => {\r\n            page.pma = entry[1] == 'true';\r\n        };\r\n\r\n        const regionFields: Map<Function> = {};\r\n\r\n        regionFields.xy = () => {\r\n            // Deprecated, use bounds.\r\n            region.x = parseInt(entry[1]);\r\n            region.y = parseInt(entry[2]);\r\n        };\r\n        regionFields.size = () => {\r\n            // Deprecated, use bounds.\r\n            region.width = parseInt(entry[1]);\r\n            region.height = parseInt(entry[2]);\r\n        };\r\n        regionFields.bounds = () => {\r\n            region.x = parseInt(entry[1]);\r\n            region.y = parseInt(entry[2]);\r\n            region.width = parseInt(entry[3]);\r\n            region.height = parseInt(entry[4]);\r\n        };\r\n        regionFields.offset = () => {\r\n            // Deprecated, use offsets.\r\n            region.offsetX = parseInt(entry[1]);\r\n            region.offsetY = parseInt(entry[2]);\r\n        };\r\n        regionFields.orig = () => {\r\n            // Deprecated, use offsets.\r\n            region.originalWidth = parseInt(entry[1]);\r\n            region.originalHeight = parseInt(entry[2]);\r\n        };\r\n        regionFields.offsets = () => {\r\n            region.offsetX = parseInt(entry[1]);\r\n            region.offsetY = parseInt(entry[2]);\r\n            region.originalWidth = parseInt(entry[3]);\r\n            region.originalHeight = parseInt(entry[4]);\r\n        };\r\n        regionFields.rotate = () => {\r\n            const rotateValue = entry[1];\r\n            let rotate = 0;\r\n\r\n            if (rotateValue.toLocaleLowerCase() == 'true') {\r\n                rotate = 6;\r\n            } else if (rotateValue.toLocaleLowerCase() == 'false') {\r\n                rotate = 0;\r\n            } else {\r\n                rotate = ((720 - parseFloat(rotateValue)) % 360) / 45;\r\n            }\r\n            region.rotate = rotate;\r\n        };\r\n        regionFields.index = () => {\r\n            region.index = parseInt(entry[1]);\r\n        };\r\n\r\n        let line = reader.readLine();\r\n        // Ignore empty lines before first entry.\r\n\r\n        while (line != null && line.trim().length == 0) {\r\n            line = reader.readLine();\r\n        }\r\n        // Header entries.\r\n        while (true) {\r\n            if (line == null || line.trim().length == 0) break;\r\n            if (reader.readEntry(entry, line) == 0) break; // Silently ignore all header fields.\r\n            line = reader.readLine();\r\n        }\r\n\r\n        const iterateParser = () => {\r\n            while (true) {\r\n                if (line == null) {\r\n                    return callback && callback(this);\r\n                }\r\n                if (line.trim().length == 0) {\r\n                    page = null;\r\n                    line = reader.readLine();\r\n                } else if (page === null) {\r\n                    page = new TextureAtlasPage();\r\n                    page.name = line.trim();\r\n\r\n                    while (true) {\r\n                        if (reader.readEntry(entry, (line = reader.readLine())) == 0) break;\r\n                        const field: Function = pageFields[entry[0]];\r\n\r\n                        if (field) field();\r\n                    }\r\n                    this.pages.push(page);\r\n\r\n                    textureLoader(page.name, (texture: BaseTexture) => {\r\n                        if (texture === null) {\r\n                            this.pages.splice(this.pages.indexOf(page), 1);\r\n\r\n                            return callback && callback(null);\r\n                        }\r\n                        page.baseTexture = texture;\r\n                        // TODO: set scaleMode and mipmapMode from spine\r\n                        if (page.pma) {\r\n                            texture.alphaMode = ALPHA_MODES.PMA;\r\n                        }\r\n                        if (!texture.valid) {\r\n                            texture.setSize(page.width, page.height);\r\n                        }\r\n                        page.setFilters();\r\n\r\n                        if (!page.width || !page.height) {\r\n                            page.width = texture.realWidth;\r\n                            page.height = texture.realHeight;\r\n                            if (!page.width || !page.height) {\r\n                                console.log(\r\n                                    `ERROR spine atlas page ${page.name}: meshes wont work if you dont specify size in atlas (http://www.html5gamedevs.com/topic/18888-pixi-spines-and-meshes/?p=107121)`\r\n                                );\r\n                            }\r\n                        }\r\n                        iterateParser();\r\n                    });\r\n                    break;\r\n                } else {\r\n                    region = new RegionFields();\r\n                    const atlasRegion = new TextureAtlasRegion();\r\n\r\n                    atlasRegion.name = line;\r\n                    atlasRegion.page = page;\r\n                    let names: string[] = null;\r\n                    let values: number[][] = null;\r\n\r\n                    while (true) {\r\n                        const count = reader.readEntry(entry, (line = reader.readLine()));\r\n\r\n                        if (count == 0) break;\r\n                        const field: Function = regionFields[entry[0]];\r\n\r\n                        if (field) {\r\n                            field();\r\n                        } else {\r\n                            if (names == null) {\r\n                                names = [];\r\n                                values = [];\r\n                            }\r\n                            names.push(entry[0]);\r\n                            const entryValues: number[] = [];\r\n\r\n                            for (let i = 0; i < count; i++) {\r\n                                entryValues.push(parseInt(entry[i + 1]));\r\n                            }\r\n                            values.push(entryValues);\r\n                        }\r\n                    }\r\n                    if (region.originalWidth == 0 && region.originalHeight == 0) {\r\n                        region.originalWidth = region.width;\r\n                        region.originalHeight = region.height;\r\n                    }\r\n\r\n                    const resolution = page.baseTexture.resolution;\r\n\r\n                    region.x /= resolution;\r\n                    region.y /= resolution;\r\n                    region.width /= resolution;\r\n                    region.height /= resolution;\r\n                    region.originalWidth /= resolution;\r\n                    region.originalHeight /= resolution;\r\n                    region.offsetX /= resolution;\r\n                    region.offsetY /= resolution;\r\n\r\n                    const swapWH = region.rotate % 4 !== 0;\r\n                    const frame = new Rectangle(region.x, region.y, swapWH ? region.height : region.width, swapWH ? region.width : region.height);\r\n\r\n                    const orig = new Rectangle(0, 0, region.originalWidth, region.originalHeight);\r\n                    const trim = new Rectangle(region.offsetX, region.originalHeight - region.height - region.offsetY, region.width, region.height);\r\n\r\n                    atlasRegion.texture = new Texture(atlasRegion.page.baseTexture, frame, orig, trim, region.rotate);\r\n                    atlasRegion.index = region.index;\r\n                    atlasRegion.texture.updateUvs();\r\n\r\n                    this.regions.push(atlasRegion);\r\n                }\r\n            }\r\n        };\r\n\r\n        iterateParser();\r\n    }\r\n\r\n    findRegion(name: string): TextureAtlasRegion {\r\n        for (let i = 0; i < this.regions.length; i++) {\r\n            if (this.regions[i].name == name) {\r\n                return this.regions[i];\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    dispose() {\r\n        for (let i = 0; i < this.pages.length; i++) {\r\n            this.pages[i].baseTexture.dispose();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nclass TextureAtlasReader {\r\n    lines: Array<string>;\r\n    index = 0;\r\n\r\n    constructor(text: string) {\r\n        this.lines = text.split(/\\r\\n|\\r|\\n/);\r\n    }\r\n\r\n    readLine(): string {\r\n        if (this.index >= this.lines.length) {\r\n            return null;\r\n        }\r\n\r\n        return this.lines[this.index++];\r\n    }\r\n\r\n    readEntry(entry: string[], line: string): number {\r\n        if (line == null) return 0;\r\n        line = line.trim();\r\n        if (line.length == 0) return 0;\r\n\r\n        const colon = line.indexOf(':');\r\n\r\n        if (colon == -1) return 0;\r\n        entry[0] = line.substr(0, colon).trim();\r\n        for (let i = 1, lastMatch = colon + 1; ; i++) {\r\n            const comma = line.indexOf(',', lastMatch);\r\n\r\n            if (comma == -1) {\r\n                entry[i] = line.substr(lastMatch).trim();\r\n\r\n                return i;\r\n            }\r\n            entry[i] = line.substr(lastMatch, comma - lastMatch).trim();\r\n            lastMatch = comma + 1;\r\n            if (i == 4) return 4;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class TextureAtlasPage {\r\n    name: string;\r\n    minFilter: TextureFilter = TextureFilter.Nearest;\r\n    magFilter: TextureFilter = TextureFilter.Nearest;\r\n    uWrap: TextureWrap = TextureWrap.ClampToEdge;\r\n    vWrap: TextureWrap = TextureWrap.ClampToEdge;\r\n    baseTexture: BaseTexture;\r\n    width: number;\r\n    height: number;\r\n    pma: boolean;\r\n\r\n    public setFilters() {\r\n        const tex = this.baseTexture;\r\n        const filter = this.minFilter;\r\n\r\n        if (filter == TextureFilter.Linear) {\r\n            tex.scaleMode = SCALE_MODES.LINEAR;\r\n        } else if (this.minFilter == TextureFilter.Nearest) {\r\n            tex.scaleMode = SCALE_MODES.NEAREST;\r\n        } else {\r\n            tex.mipmap = MIPMAP_MODES.POW2;\r\n            if (filter == TextureFilter.MipMapNearestNearest) {\r\n                tex.scaleMode = SCALE_MODES.NEAREST;\r\n            } else {\r\n                tex.scaleMode = SCALE_MODES.LINEAR;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class TextureAtlasRegion extends TextureRegion {\r\n    page: TextureAtlasPage;\r\n    name: string;\r\n    index: number;\r\n}\r\n"],"names":["TextureFilter","TextureWrap","filterFromString","ALPHA_MODES","Rectangle","Texture","SCALE_MODES","MIPMAP_MODES","TextureRegion"],"mappings":"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"}