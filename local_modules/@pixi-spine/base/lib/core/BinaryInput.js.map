{"version":3,"file":"BinaryInput.js","sources":["../../src/core/BinaryInput.ts"],"sourcesContent":["/**\r\n * @public\r\n */\r\nexport class BinaryInput {\r\n    constructor(data: Uint8Array, public strings = new Array<string>(), private index: number = 0, private buffer = new DataView(data.buffer)) {}\r\n\r\n    readByte(): number {\r\n        return this.buffer.getInt8(this.index++);\r\n    }\r\n\r\n    readUnsignedByte(): number {\r\n        return this.buffer.getUint8(this.index++);\r\n    }\r\n\r\n    readShort(): number {\r\n        const value = this.buffer.getInt16(this.index);\r\n\r\n        this.index += 2;\r\n\r\n        return value;\r\n    }\r\n\r\n    readInt32(): number {\r\n        const value = this.buffer.getInt32(this.index);\r\n\r\n        this.index += 4;\r\n\r\n        return value;\r\n    }\r\n\r\n    readInt(optimizePositive: boolean) {\r\n        let b = this.readByte();\r\n        let result = b & 0x7f;\r\n\r\n        if ((b & 0x80) != 0) {\r\n            b = this.readByte();\r\n            result |= (b & 0x7f) << 7;\r\n            if ((b & 0x80) != 0) {\r\n                b = this.readByte();\r\n                result |= (b & 0x7f) << 14;\r\n                if ((b & 0x80) != 0) {\r\n                    b = this.readByte();\r\n                    result |= (b & 0x7f) << 21;\r\n                    if ((b & 0x80) != 0) {\r\n                        b = this.readByte();\r\n                        result |= (b & 0x7f) << 28;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return optimizePositive ? result : (result >>> 1) ^ -(result & 1);\r\n    }\r\n\r\n    readStringRef(): string | null {\r\n        const index = this.readInt(true);\r\n\r\n        return index == 0 ? null : this.strings[index - 1];\r\n    }\r\n\r\n    readString(): string | null {\r\n        let byteCount = this.readInt(true);\r\n\r\n        switch (byteCount) {\r\n            case 0:\r\n                return null;\r\n            case 1:\r\n                return '';\r\n        }\r\n        byteCount--;\r\n        let chars = '';\r\n\r\n        for (let i = 0; i < byteCount; ) {\r\n            const b = this.readUnsignedByte();\r\n\r\n            switch (b >> 4) {\r\n                case 12:\r\n                case 13:\r\n                    chars += String.fromCharCode(((b & 0x1f) << 6) | (this.readByte() & 0x3f));\r\n                    i += 2;\r\n                    break;\r\n                case 14:\r\n                    chars += String.fromCharCode(((b & 0x0f) << 12) | ((this.readByte() & 0x3f) << 6) | (this.readByte() & 0x3f));\r\n                    i += 3;\r\n                    break;\r\n                default:\r\n                    chars += String.fromCharCode(b);\r\n                    i++;\r\n            }\r\n        }\r\n\r\n        return chars;\r\n    }\r\n\r\n    readFloat(): number {\r\n        const value = this.buffer.getFloat32(this.index);\r\n\r\n        this.index += 4;\r\n\r\n        return value;\r\n    }\r\n\r\n    readBoolean(): boolean {\r\n        return this.readByte() != 0;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}