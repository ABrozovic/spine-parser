{"version":3,"file":"Bone.js","sources":["../../src/core/Bone.ts"],"sourcesContent":["import { Matrix } from '@pixi/core';\r\nimport type { Updatable } from './Updatable';\r\nimport type { BoneData } from './BoneData';\r\nimport type { Skeleton } from './Skeleton';\r\nimport { IBone, MathUtils, settings, TransformMode, Vector2 } from '@pixi-spine/base';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Bone implements Updatable, IBone {\r\n    // be careful! Spine b,c is c,b in pixi matrix\r\n    matrix = new Matrix();\r\n\r\n    get worldX(): number {\r\n        return this.matrix.tx;\r\n    }\r\n\r\n    get worldY(): number {\r\n        return this.matrix.ty;\r\n    }\r\n\r\n    data: BoneData;\r\n    skeleton: Skeleton;\r\n    parent: Bone;\r\n    children = new Array<Bone>();\r\n    x = 0;\r\n    y = 0;\r\n    rotation = 0;\r\n    scaleX = 0;\r\n    scaleY = 0;\r\n    shearX = 0;\r\n    shearY = 0;\r\n    ax = 0;\r\n    ay = 0;\r\n    arotation = 0;\r\n    ascaleX = 0;\r\n    ascaleY = 0;\r\n    ashearX = 0;\r\n    ashearY = 0;\r\n    appliedValid = false;\r\n\r\n    sorted = false;\r\n\r\n    /** @param parent May be null. */\r\n    constructor(data: BoneData, skeleton: Skeleton, parent: Bone) {\r\n        if (data == null) throw new Error('data cannot be null.');\r\n        if (skeleton == null) throw new Error('skeleton cannot be null.');\r\n        this.data = data;\r\n        this.skeleton = skeleton;\r\n        this.parent = parent;\r\n        this.setToSetupPose();\r\n    }\r\n\r\n    /** NOT USED IN 3.7. Needed for the debug graph code */\r\n    active = true;\r\n\r\n    /** Same as {@link #updateWorldTransform()}. This method exists for Bone to implement {@link Updatable}. */\r\n    update() {\r\n        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and this bone's local transform. */\r\n    updateWorldTransform() {\r\n        this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\r\n    }\r\n\r\n    /** Computes the world transform using the parent bone and the specified local transform. */\r\n    updateWorldTransformWith(x: number, y: number, rotation: number, scaleX: number, scaleY: number, shearX: number, shearY: number) {\r\n        this.ax = x;\r\n        this.ay = y;\r\n        this.arotation = rotation;\r\n        this.ascaleX = scaleX;\r\n        this.ascaleY = scaleY;\r\n        this.ashearX = shearX;\r\n        this.ashearY = shearY;\r\n        this.appliedValid = true;\r\n\r\n        const parent = this.parent;\r\n        const m = this.matrix;\r\n\r\n        const sx = this.skeleton.scaleX;\r\n        const sy = settings.yDown ? -this.skeleton.scaleY : this.skeleton.scaleY;\r\n\r\n        if (parent == null) {\r\n            // Root bone.\r\n            const skeleton = this.skeleton;\r\n            const rotationY = rotation + 90 + shearY;\r\n\r\n            m.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\r\n            m.c = MathUtils.cosDeg(rotationY) * scaleY * sx;\r\n            m.b = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\r\n            m.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\r\n            m.tx = x * sx + skeleton.x;\r\n            m.ty = y * sy + skeleton.y;\r\n\r\n            return;\r\n        }\r\n\r\n        let pa = parent.matrix.a;\r\n        let pb = parent.matrix.c;\r\n        let pc = parent.matrix.b;\r\n        let pd = parent.matrix.d;\r\n\r\n        m.tx = pa * x + pb * y + parent.matrix.tx;\r\n        m.ty = pc * x + pd * y + parent.matrix.ty;\r\n        switch (this.data.transformMode) {\r\n            case TransformMode.Normal: {\r\n                const rotationY = rotation + 90 + shearY;\r\n                const la = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n                const lb = MathUtils.cosDeg(rotationY) * scaleY;\r\n                const lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n                const ld = MathUtils.sinDeg(rotationY) * scaleY;\r\n\r\n                m.a = pa * la + pb * lc;\r\n                m.c = pa * lb + pb * ld;\r\n                m.b = pc * la + pd * lc;\r\n                m.d = pc * lb + pd * ld;\r\n\r\n                return;\r\n            }\r\n            case TransformMode.OnlyTranslation: {\r\n                const rotationY = rotation + 90 + shearY;\r\n\r\n                m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\r\n                m.c = MathUtils.cosDeg(rotationY) * scaleY;\r\n                m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;\r\n                m.d = MathUtils.sinDeg(rotationY) * scaleY;\r\n                break;\r\n            }\r\n            case TransformMode.NoRotationOrReflection: {\r\n                let s = pa * pa + pc * pc;\r\n                let prx = 0;\r\n\r\n                if (s > 0.0001) {\r\n                    s = Math.abs(pa * pd - pb * pc) / s;\r\n                    pb = pc * s;\r\n                    pd = pa * s;\r\n                    prx = Math.atan2(pc, pa) * MathUtils.radDeg;\r\n                } else {\r\n                    pa = 0;\r\n                    pc = 0;\r\n                    prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\r\n                }\r\n                const rx = rotation + shearX - prx;\r\n                const ry = rotation + shearY - prx + 90;\r\n                const la = MathUtils.cosDeg(rx) * scaleX;\r\n                const lb = MathUtils.cosDeg(ry) * scaleY;\r\n                const lc = MathUtils.sinDeg(rx) * scaleX;\r\n                const ld = MathUtils.sinDeg(ry) * scaleY;\r\n\r\n                m.a = pa * la - pb * lc;\r\n                m.c = pa * lb - pb * ld;\r\n                m.b = pc * la + pd * lc;\r\n                m.d = pc * lb + pd * ld;\r\n                break;\r\n            }\r\n            case TransformMode.NoScale:\r\n            case TransformMode.NoScaleOrReflection: {\r\n                const cos = MathUtils.cosDeg(rotation);\r\n                const sin = MathUtils.sinDeg(rotation);\r\n                let za = (pa * cos + pb * sin) / sx;\r\n                let zc = (pc * cos + pd * sin) / sy;\r\n                let s = Math.sqrt(za * za + zc * zc);\r\n\r\n                if (s > 0.00001) s = 1 / s;\r\n                za *= s;\r\n                zc *= s;\r\n                s = Math.sqrt(za * za + zc * zc);\r\n                if (\r\n                    this.data.transformMode == TransformMode.NoScale &&\r\n                    pa * pd - pb * pc < 0 != (settings.yDown ? this.skeleton.scaleX < 0 != this.skeleton.scaleY > 0 : this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)\r\n                )\r\n                    s = -s;\r\n                const r = Math.PI / 2 + Math.atan2(zc, za);\r\n                const zb = Math.cos(r) * s;\r\n                const zd = Math.sin(r) * s;\r\n                const la = MathUtils.cosDeg(shearX) * scaleX;\r\n                const lb = MathUtils.cosDeg(90 + shearY) * scaleY;\r\n                const lc = MathUtils.sinDeg(shearX) * scaleX;\r\n                const ld = MathUtils.sinDeg(90 + shearY) * scaleY;\r\n\r\n                m.a = za * la + zb * lc;\r\n                m.c = za * lb + zb * ld;\r\n                m.b = zc * la + zd * lc;\r\n                m.d = zc * lb + zd * ld;\r\n                break;\r\n            }\r\n        }\r\n        m.a *= sx;\r\n        m.c *= sx;\r\n        m.b *= sy;\r\n        m.d *= sy;\r\n    }\r\n\r\n    setToSetupPose() {\r\n        const data = this.data;\r\n\r\n        this.x = data.x;\r\n        this.y = data.y;\r\n        this.rotation = data.rotation;\r\n        this.scaleX = data.scaleX;\r\n        this.scaleY = data.scaleY;\r\n        this.shearX = data.shearX;\r\n        this.shearY = data.shearY;\r\n    }\r\n\r\n    getWorldRotationX() {\r\n        return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;\r\n    }\r\n\r\n    getWorldRotationY() {\r\n        return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;\r\n    }\r\n\r\n    getWorldScaleX() {\r\n        const m = this.matrix;\r\n\r\n        return Math.sqrt(m.a * m.a + m.c * m.c);\r\n    }\r\n\r\n    getWorldScaleY() {\r\n        const m = this.matrix;\r\n\r\n        return Math.sqrt(m.b * m.b + m.d * m.d);\r\n    }\r\n\r\n    /** Computes the individual applied transform values from the world transform. This can be useful to perform processing using\r\n     * the applied transform after the world transform has been modified directly (eg, by a constraint).\r\n     * <p>\r\n     * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. */\r\n    updateAppliedTransform() {\r\n        this.appliedValid = true;\r\n        const parent = this.parent;\r\n        const m = this.matrix;\r\n\r\n        if (parent == null) {\r\n            this.ax = m.tx;\r\n            this.ay = m.ty;\r\n            this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;\r\n            this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);\r\n            this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);\r\n            this.ashearX = 0;\r\n            this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;\r\n\r\n            return;\r\n        }\r\n        const pm = parent.matrix;\r\n        const pid = 1 / (pm.a * pm.d - pm.b * pm.c);\r\n        const dx = m.tx - pm.tx;\r\n        const dy = m.ty - pm.ty;\r\n\r\n        this.ax = dx * pm.d * pid - dy * pm.c * pid;\r\n        this.ay = dy * pm.a * pid - dx * pm.b * pid;\r\n        const ia = pid * pm.d;\r\n        const id = pid * pm.a;\r\n        const ib = pid * pm.c;\r\n        const ic = pid * pm.b;\r\n        const ra = ia * m.a - ib * m.b;\r\n        const rb = ia * m.c - ib * m.d;\r\n        const rc = id * m.b - ic * m.a;\r\n        const rd = id * m.d - ic * m.c;\r\n\r\n        this.ashearX = 0;\r\n        this.ascaleX = Math.sqrt(ra * ra + rc * rc);\r\n        if (this.ascaleX > 0.0001) {\r\n            const det = ra * rd - rb * rc;\r\n\r\n            this.ascaleY = det / this.ascaleX;\r\n            this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\r\n            this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\r\n        } else {\r\n            this.ascaleX = 0;\r\n            this.ascaleY = Math.sqrt(rb * rb + rd * rd);\r\n            this.ashearY = 0;\r\n            this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\r\n        }\r\n    }\r\n\r\n    worldToLocal(world: Vector2) {\r\n        const m = this.matrix;\r\n        const a = m.a;\r\n        const b = m.c;\r\n        const c = m.b;\r\n        const d = m.d;\r\n        const invDet = 1 / (a * d - b * c);\r\n        const x = world.x - m.tx;\r\n        const y = world.y - m.ty;\r\n\r\n        world.x = x * d * invDet - y * b * invDet;\r\n        world.y = y * a * invDet - x * c * invDet;\r\n\r\n        return world;\r\n    }\r\n\r\n    localToWorld(local: Vector2) {\r\n        const m = this.matrix;\r\n        const x = local.x;\r\n        const y = local.y;\r\n\r\n        local.x = x * m.a + y * m.c + m.tx;\r\n        local.y = x * m.b + y * m.d + m.ty;\r\n\r\n        return local;\r\n    }\r\n\r\n    worldToLocalRotation(worldRotation: number) {\r\n        const sin = MathUtils.sinDeg(worldRotation);\r\n        const cos = MathUtils.cosDeg(worldRotation);\r\n        const mat = this.matrix;\r\n\r\n        return Math.atan2(mat.a * sin - mat.b * cos, mat.d * cos - mat.c * sin) * MathUtils.radDeg;\r\n    }\r\n\r\n    localToWorldRotation(localRotation: number) {\r\n        const sin = MathUtils.sinDeg(localRotation);\r\n        const cos = MathUtils.cosDeg(localRotation);\r\n        const mat = this.matrix;\r\n\r\n        return Math.atan2(cos * mat.b + sin * mat.d, cos * mat.a + sin * mat.c) * MathUtils.radDeg;\r\n    }\r\n\r\n    rotateWorld(degrees: number) {\r\n        const mat = this.matrix;\r\n        const a = mat.a;\r\n        const b = mat.c;\r\n        const c = mat.b;\r\n        const d = mat.d;\r\n        const cos = MathUtils.cosDeg(degrees);\r\n        const sin = MathUtils.sinDeg(degrees);\r\n\r\n        mat.a = cos * a - sin * c;\r\n        mat.c = cos * b - sin * d;\r\n        mat.b = sin * a + cos * c;\r\n        mat.d = sin * b + cos * d;\r\n        this.appliedValid = false;\r\n    }\r\n}\r\n"],"names":["Matrix","settings","MathUtils","TransformMode"],"mappings":";;;;;AASO,MAAM,IAAiC,CAAA;AAAA;AAAA,EAmC1C,WAAA,CAAY,IAAgB,EAAA,QAAA,EAAoB,MAAc,EAAA;AAjC9D;AAAA,IAAA,IAAA,CAAA,MAAA,GAAS,IAAIA,WAAO,EAAA,CAAA;AAapB,IAAA,IAAA,CAAA,QAAA,GAAW,IAAI,KAAY,EAAA,CAAA;AAC3B,IAAI,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACJ,IAAI,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACJ,IAAW,IAAA,CAAA,QAAA,GAAA,CAAA,CAAA;AACX,IAAS,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACT,IAAS,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACT,IAAS,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACT,IAAS,IAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACT,IAAK,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACL,IAAK,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACL,IAAY,IAAA,CAAA,SAAA,GAAA,CAAA,CAAA;AACZ,IAAU,IAAA,CAAA,OAAA,GAAA,CAAA,CAAA;AACV,IAAU,IAAA,CAAA,OAAA,GAAA,CAAA,CAAA;AACV,IAAU,IAAA,CAAA,OAAA,GAAA,CAAA,CAAA;AACV,IAAU,IAAA,CAAA,OAAA,GAAA,CAAA,CAAA;AACV,IAAe,IAAA,CAAA,YAAA,GAAA,KAAA,CAAA;AAEf,IAAS,IAAA,CAAA,MAAA,GAAA,KAAA,CAAA;AAaT;AAAA,IAAS,IAAA,CAAA,MAAA,GAAA,IAAA,CAAA;AATL,IAAA,IAAI,IAAQ,IAAA,IAAA;AAAM,MAAM,MAAA,IAAI,MAAM,sBAAsB,CAAA,CAAA;AACxD,IAAA,IAAI,QAAY,IAAA,IAAA;AAAM,MAAM,MAAA,IAAI,MAAM,0BAA0B,CAAA,CAAA;AAChE,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAChB,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AAAA,GACxB;AAAA,EAtCA,IAAI,MAAiB,GAAA;AACjB,IAAA,OAAO,KAAK,MAAO,CAAA,EAAA,CAAA;AAAA,GACvB;AAAA,EAEA,IAAI,MAAiB,GAAA;AACjB,IAAA,OAAO,KAAK,MAAO,CAAA,EAAA,CAAA;AAAA,GACvB;AAAA;AAAA,EAsCA,MAAS,GAAA;AACL,IAAA,IAAA,CAAK,wBAAyB,CAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,GAAG,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AAAA,GACnH;AAAA;AAAA,EAGA,oBAAuB,GAAA;AACnB,IAAA,IAAA,CAAK,wBAAyB,CAAA,IAAA,CAAK,CAAG,EAAA,IAAA,CAAK,GAAG,IAAK,CAAA,QAAA,EAAU,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,MAAA,EAAQ,IAAK,CAAA,MAAA,EAAQ,KAAK,MAAM,CAAA,CAAA;AAAA,GACnH;AAAA;AAAA,EAGA,yBAAyB,CAAW,EAAA,CAAA,EAAW,UAAkB,MAAgB,EAAA,MAAA,EAAgB,QAAgB,MAAgB,EAAA;AAC7H,IAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACV,IAAA,IAAA,CAAK,EAAK,GAAA,CAAA,CAAA;AACV,IAAA,IAAA,CAAK,SAAY,GAAA,QAAA,CAAA;AACjB,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,OAAU,GAAA,MAAA,CAAA;AACf,IAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AAEpB,IAAA,MAAM,SAAS,IAAK,CAAA,MAAA,CAAA;AACpB,IAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AAEf,IAAM,MAAA,EAAA,GAAK,KAAK,QAAS,CAAA,MAAA,CAAA;AACzB,IAAM,MAAA,EAAA,GAAKC,cAAS,KAAQ,GAAA,CAAC,KAAK,QAAS,CAAA,MAAA,GAAS,KAAK,QAAS,CAAA,MAAA,CAAA;AAElE,IAAA,IAAI,UAAU,IAAM,EAAA;AAEhB,MAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AACtB,MAAM,MAAA,SAAA,GAAY,WAAW,EAAK,GAAA,MAAA,CAAA;AAElC,MAAA,CAAA,CAAE,IAAIC,cAAU,CAAA,MAAA,CAAO,QAAW,GAAA,MAAM,IAAI,MAAS,GAAA,EAAA,CAAA;AACrD,MAAA,CAAA,CAAE,CAAI,GAAAA,cAAA,CAAU,MAAO,CAAA,SAAS,IAAI,MAAS,GAAA,EAAA,CAAA;AAC7C,MAAA,CAAA,CAAE,IAAIA,cAAU,CAAA,MAAA,CAAO,QAAW,GAAA,MAAM,IAAI,MAAS,GAAA,EAAA,CAAA;AACrD,MAAA,CAAA,CAAE,CAAI,GAAAA,cAAA,CAAU,MAAO,CAAA,SAAS,IAAI,MAAS,GAAA,EAAA,CAAA;AAC7C,MAAE,CAAA,CAAA,EAAA,GAAK,CAAI,GAAA,EAAA,GAAK,QAAS,CAAA,CAAA,CAAA;AACzB,MAAE,CAAA,CAAA,EAAA,GAAK,CAAI,GAAA,EAAA,GAAK,QAAS,CAAA,CAAA,CAAA;AAEzB,MAAA,OAAA;AAAA,KACJ;AAEA,IAAI,IAAA,EAAA,GAAK,OAAO,MAAO,CAAA,CAAA,CAAA;AACvB,IAAI,IAAA,EAAA,GAAK,OAAO,MAAO,CAAA,CAAA,CAAA;AACvB,IAAI,IAAA,EAAA,GAAK,OAAO,MAAO,CAAA,CAAA,CAAA;AACvB,IAAI,IAAA,EAAA,GAAK,OAAO,MAAO,CAAA,CAAA,CAAA;AAEvB,IAAA,CAAA,CAAE,KAAK,EAAK,GAAA,CAAA,GAAI,EAAK,GAAA,CAAA,GAAI,OAAO,MAAO,CAAA,EAAA,CAAA;AACvC,IAAA,CAAA,CAAE,KAAK,EAAK,GAAA,CAAA,GAAI,EAAK,GAAA,CAAA,GAAI,OAAO,MAAO,CAAA,EAAA,CAAA;AACvC,IAAQ,QAAA,IAAA,CAAK,KAAK,aAAe;AAAA,MAC7B,KAAKC,mBAAc,MAAQ,EAAA;AACvB,QAAM,MAAA,SAAA,GAAY,WAAW,EAAK,GAAA,MAAA,CAAA;AAClC,QAAA,MAAM,EAAK,GAAAD,cAAA,CAAU,MAAO,CAAA,QAAA,GAAW,MAAM,CAAI,GAAA,MAAA,CAAA;AACjD,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,SAAS,CAAI,GAAA,MAAA,CAAA;AACzC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,QAAA,GAAW,MAAM,CAAI,GAAA,MAAA,CAAA;AACjD,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,SAAS,CAAI,GAAA,MAAA,CAAA;AAEzC,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AAErB,QAAA,OAAA;AAAA,OACJ;AAAA,MACA,KAAKC,mBAAc,eAAiB,EAAA;AAChC,QAAM,MAAA,SAAA,GAAY,WAAW,EAAK,GAAA,MAAA,CAAA;AAElC,QAAA,CAAA,CAAE,CAAI,GAAAD,cAAA,CAAU,MAAO,CAAA,QAAA,GAAW,MAAM,CAAI,GAAA,MAAA,CAAA;AAC5C,QAAA,CAAA,CAAE,CAAI,GAAAA,cAAA,CAAU,MAAO,CAAA,SAAS,CAAI,GAAA,MAAA,CAAA;AACpC,QAAA,CAAA,CAAE,CAAI,GAAAA,cAAA,CAAU,MAAO,CAAA,QAAA,GAAW,MAAM,CAAI,GAAA,MAAA,CAAA;AAC5C,QAAA,CAAA,CAAE,CAAI,GAAAA,cAAA,CAAU,MAAO,CAAA,SAAS,CAAI,GAAA,MAAA,CAAA;AACpC,QAAA,MAAA;AAAA,OACJ;AAAA,MACA,KAAKC,mBAAc,sBAAwB,EAAA;AACvC,QAAI,IAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACvB,QAAA,IAAI,GAAM,GAAA,CAAA,CAAA;AAEV,QAAA,IAAI,IAAI,IAAQ,EAAA;AACZ,UAAA,CAAA,GAAI,KAAK,GAAI,CAAA,EAAA,GAAK,EAAK,GAAA,EAAA,GAAK,EAAE,CAAI,GAAA,CAAA,CAAA;AAClC,UAAA,EAAA,GAAK,EAAK,GAAA,CAAA,CAAA;AACV,UAAA,EAAA,GAAK,EAAK,GAAA,CAAA,CAAA;AACV,UAAA,GAAA,GAAM,IAAK,CAAA,KAAA,CAAM,EAAI,EAAA,EAAE,IAAID,cAAU,CAAA,MAAA,CAAA;AAAA,SAClC,MAAA;AACH,UAAK,EAAA,GAAA,CAAA,CAAA;AACL,UAAK,EAAA,GAAA,CAAA,CAAA;AACL,UAAA,GAAA,GAAM,KAAK,IAAK,CAAA,KAAA,CAAM,EAAI,EAAA,EAAE,IAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,SAC9C;AACA,QAAM,MAAA,EAAA,GAAK,WAAW,MAAS,GAAA,GAAA,CAAA;AAC/B,QAAM,MAAA,EAAA,GAAK,QAAW,GAAA,MAAA,GAAS,GAAM,GAAA,EAAA,CAAA;AACrC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,EAAE,CAAI,GAAA,MAAA,CAAA;AAClC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,EAAE,CAAI,GAAA,MAAA,CAAA;AAClC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,EAAE,CAAI,GAAA,MAAA,CAAA;AAClC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,EAAE,CAAI,GAAA,MAAA,CAAA;AAElC,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAA,MAAA;AAAA,OACJ;AAAA,MACA,KAAKC,kBAAc,CAAA,OAAA,CAAA;AAAA,MACnB,KAAKA,mBAAc,mBAAqB,EAAA;AACpC,QAAM,MAAA,GAAA,GAAMD,cAAU,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AACrC,QAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,QAAQ,CAAA,CAAA;AACrC,QAAA,IAAI,EAAM,GAAA,CAAA,EAAA,GAAK,GAAM,GAAA,EAAA,GAAK,GAAO,IAAA,EAAA,CAAA;AACjC,QAAA,IAAI,EAAM,GAAA,CAAA,EAAA,GAAK,GAAM,GAAA,EAAA,GAAK,GAAO,IAAA,EAAA,CAAA;AACjC,QAAA,IAAI,IAAI,IAAK,CAAA,IAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAK,EAAE,CAAA,CAAA;AAEnC,QAAA,IAAI,CAAI,GAAA,IAAA;AAAS,UAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA;AACzB,QAAM,EAAA,IAAA,CAAA,CAAA;AACN,QAAM,EAAA,IAAA,CAAA,CAAA;AACN,QAAA,CAAA,GAAI,IAAK,CAAA,IAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAK,EAAE,CAAA,CAAA;AAC/B,QACI,IAAA,IAAA,CAAK,IAAK,CAAA,aAAA,IAAiBC,kBAAc,CAAA,OAAA,IACzC,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,GAAK,CAAM,KAAAF,aAAA,CAAS,KAAQ,GAAA,IAAA,CAAK,SAAS,MAAS,GAAA,CAAA,IAAK,IAAK,CAAA,QAAA,CAAS,MAAS,GAAA,CAAA,GAAI,IAAK,CAAA,QAAA,CAAS,MAAS,GAAA,CAAA,IAAK,IAAK,CAAA,QAAA,CAAS,MAAS,GAAA,CAAA,CAAA;AAErJ,UAAA,CAAA,GAAI,CAAC,CAAA,CAAA;AACT,QAAA,MAAM,IAAI,IAAK,CAAA,EAAA,GAAK,IAAI,IAAK,CAAA,KAAA,CAAM,IAAI,EAAE,CAAA,CAAA;AACzC,QAAA,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAI,GAAA,CAAA,CAAA;AACzB,QAAA,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,CAAC,CAAI,GAAA,CAAA,CAAA;AACzB,QAAA,MAAM,EAAK,GAAAC,cAAA,CAAU,MAAO,CAAA,MAAM,CAAI,GAAA,MAAA,CAAA;AACtC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,EAAA,GAAK,MAAM,CAAI,GAAA,MAAA,CAAA;AAC3C,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,MAAM,CAAI,GAAA,MAAA,CAAA;AACtC,QAAA,MAAM,EAAK,GAAAA,cAAA,CAAU,MAAO,CAAA,EAAA,GAAK,MAAM,CAAI,GAAA,MAAA,CAAA;AAE3C,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAE,CAAA,CAAA,CAAA,GAAI,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AACrB,QAAA,MAAA;AAAA,OACJ;AAAA,KACJ;AACA,IAAA,CAAA,CAAE,CAAK,IAAA,EAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,IAAA,EAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,IAAA,EAAA,CAAA;AACP,IAAA,CAAA,CAAE,CAAK,IAAA,EAAA,CAAA;AAAA,GACX;AAAA,EAEA,cAAiB,GAAA;AACb,IAAA,MAAM,OAAO,IAAK,CAAA,IAAA,CAAA;AAElB,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,CAAA,CAAA;AACd,IAAA,IAAA,CAAK,WAAW,IAAK,CAAA,QAAA,CAAA;AACrB,IAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AACnB,IAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AACnB,IAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AACnB,IAAA,IAAA,CAAK,SAAS,IAAK,CAAA,MAAA,CAAA;AAAA,GACvB;AAAA,EAEA,iBAAoB,GAAA;AAChB,IAAO,OAAA,IAAA,CAAK,MAAM,IAAK,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,GAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,GAChE;AAAA,EAEA,iBAAoB,GAAA;AAChB,IAAO,OAAA,IAAA,CAAK,MAAM,IAAK,CAAA,MAAA,CAAO,GAAG,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,GAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,GAChE;AAAA,EAEA,cAAiB,GAAA;AACb,IAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AAEf,IAAO,OAAA,IAAA,CAAK,KAAK,CAAE,CAAA,CAAA,GAAI,EAAE,CAAI,GAAA,CAAA,CAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,GAC1C;AAAA,EAEA,cAAiB,GAAA;AACb,IAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AAEf,IAAO,OAAA,IAAA,CAAK,KAAK,CAAE,CAAA,CAAA,GAAI,EAAE,CAAI,GAAA,CAAA,CAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,GAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAyB,GAAA;AACrB,IAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AACpB,IAAA,MAAM,SAAS,IAAK,CAAA,MAAA,CAAA;AACpB,IAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AAEf,IAAA,IAAI,UAAU,IAAM,EAAA;AAChB,MAAA,IAAA,CAAK,KAAK,CAAE,CAAA,EAAA,CAAA;AACZ,MAAA,IAAA,CAAK,KAAK,CAAE,CAAA,EAAA,CAAA;AACZ,MAAK,IAAA,CAAA,SAAA,GAAY,KAAK,KAAM,CAAA,CAAA,CAAE,GAAG,CAAE,CAAA,CAAC,IAAIA,cAAU,CAAA,MAAA,CAAA;AAClD,MAAK,IAAA,CAAA,OAAA,GAAU,IAAK,CAAA,IAAA,CAAK,CAAE,CAAA,CAAA,GAAI,EAAE,CAAI,GAAA,CAAA,CAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAC9C,MAAK,IAAA,CAAA,OAAA,GAAU,IAAK,CAAA,IAAA,CAAK,CAAE,CAAA,CAAA,GAAI,EAAE,CAAI,GAAA,CAAA,CAAE,CAAI,GAAA,CAAA,CAAE,CAAC,CAAA,CAAA;AAC9C,MAAA,IAAA,CAAK,OAAU,GAAA,CAAA,CAAA;AACf,MAAK,IAAA,CAAA,OAAA,GAAU,KAAK,KAAM,CAAA,CAAA,CAAE,IAAI,CAAE,CAAA,CAAA,GAAI,EAAE,CAAI,GAAA,CAAA,CAAE,GAAG,CAAE,CAAA,CAAA,GAAI,EAAE,CAAI,GAAA,CAAA,CAAE,IAAI,CAAE,CAAA,CAAC,IAAIA,cAAU,CAAA,MAAA,CAAA;AAEpF,MAAA,OAAA;AAAA,KACJ;AACA,IAAA,MAAM,KAAK,MAAO,CAAA,MAAA,CAAA;AAClB,IAAM,MAAA,GAAA,GAAM,KAAK,EAAG,CAAA,CAAA,GAAI,GAAG,CAAI,GAAA,EAAA,CAAG,IAAI,EAAG,CAAA,CAAA,CAAA,CAAA;AACzC,IAAM,MAAA,EAAA,GAAK,CAAE,CAAA,EAAA,GAAK,EAAG,CAAA,EAAA,CAAA;AACrB,IAAM,MAAA,EAAA,GAAK,CAAE,CAAA,EAAA,GAAK,EAAG,CAAA,EAAA,CAAA;AAErB,IAAA,IAAA,CAAK,KAAK,EAAK,GAAA,EAAA,CAAG,IAAI,GAAM,GAAA,EAAA,GAAK,GAAG,CAAI,GAAA,GAAA,CAAA;AACxC,IAAA,IAAA,CAAK,KAAK,EAAK,GAAA,EAAA,CAAG,IAAI,GAAM,GAAA,EAAA,GAAK,GAAG,CAAI,GAAA,GAAA,CAAA;AACxC,IAAM,MAAA,EAAA,GAAK,MAAM,EAAG,CAAA,CAAA,CAAA;AACpB,IAAM,MAAA,EAAA,GAAK,MAAM,EAAG,CAAA,CAAA,CAAA;AACpB,IAAM,MAAA,EAAA,GAAK,MAAM,EAAG,CAAA,CAAA,CAAA;AACpB,IAAM,MAAA,EAAA,GAAK,MAAM,EAAG,CAAA,CAAA,CAAA;AACpB,IAAA,MAAM,EAAK,GAAA,EAAA,GAAK,CAAE,CAAA,CAAA,GAAI,KAAK,CAAE,CAAA,CAAA,CAAA;AAC7B,IAAA,MAAM,EAAK,GAAA,EAAA,GAAK,CAAE,CAAA,CAAA,GAAI,KAAK,CAAE,CAAA,CAAA,CAAA;AAC7B,IAAA,MAAM,EAAK,GAAA,EAAA,GAAK,CAAE,CAAA,CAAA,GAAI,KAAK,CAAE,CAAA,CAAA,CAAA;AAC7B,IAAA,MAAM,EAAK,GAAA,EAAA,GAAK,CAAE,CAAA,CAAA,GAAI,KAAK,CAAE,CAAA,CAAA,CAAA;AAE7B,IAAA,IAAA,CAAK,OAAU,GAAA,CAAA,CAAA;AACf,IAAA,IAAA,CAAK,UAAU,IAAK,CAAA,IAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAK,EAAE,CAAA,CAAA;AAC1C,IAAI,IAAA,IAAA,CAAK,UAAU,IAAQ,EAAA;AACvB,MAAM,MAAA,GAAA,GAAM,EAAK,GAAA,EAAA,GAAK,EAAK,GAAA,EAAA,CAAA;AAE3B,MAAK,IAAA,CAAA,OAAA,GAAU,MAAM,IAAK,CAAA,OAAA,CAAA;AAC1B,MAAK,IAAA,CAAA,OAAA,GAAU,KAAK,KAAM,CAAA,EAAA,GAAK,KAAK,EAAK,GAAA,EAAA,EAAI,GAAG,CAAA,GAAIA,cAAU,CAAA,MAAA,CAAA;AAC9D,MAAA,IAAA,CAAK,YAAY,IAAK,CAAA,KAAA,CAAM,EAAI,EAAA,EAAE,IAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,KAC7C,MAAA;AACH,MAAA,IAAA,CAAK,OAAU,GAAA,CAAA,CAAA;AACf,MAAA,IAAA,CAAK,UAAU,IAAK,CAAA,IAAA,CAAK,EAAK,GAAA,EAAA,GAAK,KAAK,EAAE,CAAA,CAAA;AAC1C,MAAA,IAAA,CAAK,OAAU,GAAA,CAAA,CAAA;AACf,MAAA,IAAA,CAAK,YAAY,EAAK,GAAA,IAAA,CAAK,MAAM,EAAI,EAAA,EAAE,IAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,KACzD;AAAA,GACJ;AAAA,EAEA,aAAa,KAAgB,EAAA;AACzB,IAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,IAAA,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;AACZ,IAAA,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;AACZ,IAAA,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;AACZ,IAAA,MAAM,IAAI,CAAE,CAAA,CAAA,CAAA;AACZ,IAAA,MAAM,MAAS,GAAA,CAAA,IAAK,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,CAAA,CAAA,CAAA;AAChC,IAAM,MAAA,CAAA,GAAI,KAAM,CAAA,CAAA,GAAI,CAAE,CAAA,EAAA,CAAA;AACtB,IAAM,MAAA,CAAA,GAAI,KAAM,CAAA,CAAA,GAAI,CAAE,CAAA,EAAA,CAAA;AAEtB,IAAA,KAAA,CAAM,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,MAAA,GAAS,IAAI,CAAI,GAAA,MAAA,CAAA;AACnC,IAAA,KAAA,CAAM,CAAI,GAAA,CAAA,GAAI,CAAI,GAAA,MAAA,GAAS,IAAI,CAAI,GAAA,MAAA,CAAA;AAEnC,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,aAAa,KAAgB,EAAA;AACzB,IAAA,MAAM,IAAI,IAAK,CAAA,MAAA,CAAA;AACf,IAAA,MAAM,IAAI,KAAM,CAAA,CAAA,CAAA;AAChB,IAAA,MAAM,IAAI,KAAM,CAAA,CAAA,CAAA;AAEhB,IAAA,KAAA,CAAM,IAAI,CAAI,GAAA,CAAA,CAAE,IAAI,CAAI,GAAA,CAAA,CAAE,IAAI,CAAE,CAAA,EAAA,CAAA;AAChC,IAAA,KAAA,CAAM,IAAI,CAAI,GAAA,CAAA,CAAE,IAAI,CAAI,GAAA,CAAA,CAAE,IAAI,CAAE,CAAA,EAAA,CAAA;AAEhC,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,qBAAqB,aAAuB,EAAA;AACxC,IAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,aAAa,CAAA,CAAA;AAC1C,IAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,aAAa,CAAA,CAAA;AAC1C,IAAA,MAAM,MAAM,IAAK,CAAA,MAAA,CAAA;AAEjB,IAAA,OAAO,IAAK,CAAA,KAAA,CAAM,GAAI,CAAA,CAAA,GAAI,MAAM,GAAI,CAAA,CAAA,GAAI,GAAK,EAAA,GAAA,CAAI,IAAI,GAAM,GAAA,GAAA,CAAI,CAAI,GAAA,GAAG,IAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,GACxF;AAAA,EAEA,qBAAqB,aAAuB,EAAA;AACxC,IAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,aAAa,CAAA,CAAA;AAC1C,IAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,aAAa,CAAA,CAAA;AAC1C,IAAA,MAAM,MAAM,IAAK,CAAA,MAAA,CAAA;AAEjB,IAAA,OAAO,IAAK,CAAA,KAAA,CAAM,GAAM,GAAA,GAAA,CAAI,IAAI,GAAM,GAAA,GAAA,CAAI,CAAG,EAAA,GAAA,GAAM,IAAI,CAAI,GAAA,GAAA,GAAM,GAAI,CAAA,CAAC,IAAIA,cAAU,CAAA,MAAA,CAAA;AAAA,GACxF;AAAA,EAEA,YAAY,OAAiB,EAAA;AACzB,IAAA,MAAM,MAAM,IAAK,CAAA,MAAA,CAAA;AACjB,IAAA,MAAM,IAAI,GAAI,CAAA,CAAA,CAAA;AACd,IAAA,MAAM,IAAI,GAAI,CAAA,CAAA,CAAA;AACd,IAAA,MAAM,IAAI,GAAI,CAAA,CAAA,CAAA;AACd,IAAA,MAAM,IAAI,GAAI,CAAA,CAAA,CAAA;AACd,IAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AACpC,IAAM,MAAA,GAAA,GAAMA,cAAU,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAEpC,IAAI,GAAA,CAAA,CAAA,GAAI,GAAM,GAAA,CAAA,GAAI,GAAM,GAAA,CAAA,CAAA;AACxB,IAAI,GAAA,CAAA,CAAA,GAAI,GAAM,GAAA,CAAA,GAAI,GAAM,GAAA,CAAA,CAAA;AACxB,IAAI,GAAA,CAAA,CAAA,GAAI,GAAM,GAAA,CAAA,GAAI,GAAM,GAAA,CAAA,CAAA;AACxB,IAAI,GAAA,CAAA,CAAA,GAAI,GAAM,GAAA,CAAA,GAAI,GAAM,GAAA,CAAA,CAAA;AACxB,IAAA,IAAA,CAAK,YAAe,GAAA,KAAA,CAAA;AAAA,GACxB;AACJ;;;;"}