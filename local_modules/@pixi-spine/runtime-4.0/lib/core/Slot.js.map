{"version":3,"file":"Slot.js","sources":["../../src/core/Slot.ts"],"sourcesContent":["import { Color, ISlot } from '@pixi-spine/base';\r\n\r\nimport type { Attachment } from './attachments/Attachment';\r\nimport type { Bone } from './Bone';\r\nimport type { SlotData } from './SlotData';\r\nimport type { Skeleton } from './Skeleton';\r\n\r\n/** Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\r\n * state for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\r\n * across multiple skeletons.\r\n * @public\r\n * */\r\nexport class Slot implements ISlot {\r\n    // this is canon\r\n    blendMode: number;\r\n    /** The slot's setup pose data. */\r\n    data: SlotData;\r\n\r\n    /** The bone this slot belongs to. */\r\n    bone: Bone;\r\n\r\n    /** The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\r\n     * color tinting. */\r\n    color: Color;\r\n\r\n    /** The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\r\n     * color's alpha is not used. */\r\n    darkColor: Color;\r\n\r\n    attachment: Attachment;\r\n\r\n    private attachmentTime: number;\r\n\r\n    attachmentState: number;\r\n\r\n    /** Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\r\n     * weighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\r\n     *\r\n     * See {@link VertexAttachment#computeWorldVertices()} and {@link DeformTimeline}. */\r\n    deform = new Array<number>();\r\n\r\n    constructor(data: SlotData, bone: Bone) {\r\n        if (data == null) throw new Error('data cannot be null.');\r\n        if (bone == null) throw new Error('bone cannot be null.');\r\n        this.data = data;\r\n        this.bone = bone;\r\n        this.color = new Color();\r\n        this.darkColor = data.darkColor == null ? null : new Color();\r\n        this.setToSetupPose();\r\n\r\n        this.blendMode = this.data.blendMode;\r\n    }\r\n\r\n    /** The skeleton this slot belongs to. */\r\n    getSkeleton(): Skeleton {\r\n        return this.bone.skeleton;\r\n    }\r\n\r\n    /** The current attachment for the slot, or null if the slot has no attachment. */\r\n    getAttachment(): Attachment {\r\n        return this.attachment;\r\n    }\r\n\r\n    /** Sets the slot's attachment and, if the attachment changed, resets {@link #attachmentTime} and clears {@link #deform}.\r\n     * @param attachment May be null. */\r\n    setAttachment(attachment: Attachment) {\r\n        if (this.attachment == attachment) return;\r\n        this.attachment = attachment;\r\n        this.attachmentTime = this.bone.skeleton.time;\r\n        this.deform.length = 0;\r\n    }\r\n\r\n    setAttachmentTime(time: number) {\r\n        this.attachmentTime = this.bone.skeleton.time - time;\r\n    }\r\n\r\n    /** The time that has elapsed since the last time the attachment was set or cleared. Relies on Skeleton\r\n     * {@link Skeleton#time}. */\r\n    getAttachmentTime(): number {\r\n        return this.bone.skeleton.time - this.attachmentTime;\r\n    }\r\n\r\n    /** Sets this slot to the setup pose. */\r\n    setToSetupPose() {\r\n        this.color.setFromColor(this.data.color);\r\n        if (this.darkColor != null) this.darkColor.setFromColor(this.data.darkColor);\r\n        if (this.data.attachmentName == null) this.attachment = null;\r\n        else {\r\n            this.attachment = null;\r\n            this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\r\n        }\r\n    }\r\n}\r\n"],"names":["Color"],"mappings":";;;;AAYO,MAAM,IAAsB,CAAA;AAAA,EA6B/B,WAAA,CAAY,MAAgB,IAAY,EAAA;AAFxC;AAAA;AAAA;AAAA;AAAA,IAAA,IAAA,CAAA,MAAA,GAAS,IAAI,KAAc,EAAA,CAAA;AAGvB,IAAA,IAAI,IAAQ,IAAA,IAAA;AAAM,MAAM,MAAA,IAAI,MAAM,sBAAsB,CAAA,CAAA;AACxD,IAAA,IAAI,IAAQ,IAAA,IAAA;AAAM,MAAM,MAAA,IAAI,MAAM,sBAAsB,CAAA,CAAA;AACxD,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAK,IAAA,CAAA,KAAA,GAAQ,IAAIA,UAAM,EAAA,CAAA;AACvB,IAAA,IAAA,CAAK,YAAY,IAAK,CAAA,SAAA,IAAa,IAAO,GAAA,IAAA,GAAO,IAAIA,UAAM,EAAA,CAAA;AAC3D,IAAA,IAAA,CAAK,cAAe,EAAA,CAAA;AAEpB,IAAK,IAAA,CAAA,SAAA,GAAY,KAAK,IAAK,CAAA,SAAA,CAAA;AAAA,GAC/B;AAAA;AAAA,EAGA,WAAwB,GAAA;AACpB,IAAA,OAAO,KAAK,IAAK,CAAA,QAAA,CAAA;AAAA,GACrB;AAAA;AAAA,EAGA,aAA4B,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,UAAA,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA,EAIA,cAAc,UAAwB,EAAA;AAClC,IAAA,IAAI,KAAK,UAAc,IAAA,UAAA;AAAY,MAAA,OAAA;AACnC,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAClB,IAAK,IAAA,CAAA,cAAA,GAAiB,IAAK,CAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAA;AACzC,IAAA,IAAA,CAAK,OAAO,MAAS,GAAA,CAAA,CAAA;AAAA,GACzB;AAAA,EAEA,kBAAkB,IAAc,EAAA;AAC5B,IAAA,IAAA,CAAK,cAAiB,GAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,IAAO,GAAA,IAAA,CAAA;AAAA,GACpD;AAAA;AAAA;AAAA,EAIA,iBAA4B,GAAA;AACxB,IAAA,OAAO,IAAK,CAAA,IAAA,CAAK,QAAS,CAAA,IAAA,GAAO,IAAK,CAAA,cAAA,CAAA;AAAA,GAC1C;AAAA;AAAA,EAGA,cAAiB,GAAA;AACb,IAAA,IAAA,CAAK,KAAM,CAAA,YAAA,CAAa,IAAK,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AACvC,IAAA,IAAI,KAAK,SAAa,IAAA,IAAA;AAAM,MAAA,IAAA,CAAK,SAAU,CAAA,YAAA,CAAa,IAAK,CAAA,IAAA,CAAK,SAAS,CAAA,CAAA;AAC3E,IAAI,IAAA,IAAA,CAAK,KAAK,cAAkB,IAAA,IAAA;AAAM,MAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAAA,SACnD;AACD,MAAA,IAAA,CAAK,UAAa,GAAA,IAAA,CAAA;AAClB,MAAK,IAAA,CAAA,aAAA,CAAc,IAAK,CAAA,IAAA,CAAK,QAAS,CAAA,aAAA,CAAc,IAAK,CAAA,IAAA,CAAK,KAAO,EAAA,IAAA,CAAK,IAAK,CAAA,cAAc,CAAC,CAAA,CAAA;AAAA,KAClG;AAAA,GACJ;AACJ;;;;"}