{"version":3,"file":"RegionAttachment.mjs","sources":["../../../src/core/attachments/RegionAttachment.ts"],"sourcesContent":["import { Attachment } from './Attachment';\r\nimport { AttachmentType, ArrayLike, Color, TextureRegion, Utils, IRegionAttachment } from '@pixi-spine/base';\r\n\r\nimport type { Bone } from '../Bone';\r\nimport { Slot } from '../Slot';\r\n\r\n/**\r\n * @public\r\n */\r\nexport class RegionAttachment extends Attachment implements IRegionAttachment {\r\n    type = AttachmentType.Region;\r\n\r\n    static OX1 = 0;\r\n    static OY1 = 1;\r\n    static OX2 = 2;\r\n    static OY2 = 3;\r\n    static OX3 = 4;\r\n    static OY3 = 5;\r\n    static OX4 = 6;\r\n    static OY4 = 7;\r\n\r\n    static X1 = 0;\r\n    static Y1 = 1;\r\n    static C1R = 2;\r\n    static C1G = 3;\r\n    static C1B = 4;\r\n    static C1A = 5;\r\n    static U1 = 6;\r\n    static V1 = 7;\r\n\r\n    static X2 = 8;\r\n    static Y2 = 9;\r\n    static C2R = 10;\r\n    static C2G = 11;\r\n    static C2B = 12;\r\n    static C2A = 13;\r\n    static U2 = 14;\r\n    static V2 = 15;\r\n\r\n    static X3 = 16;\r\n    static Y3 = 17;\r\n    static C3R = 18;\r\n    static C3G = 19;\r\n    static C3B = 20;\r\n    static C3A = 21;\r\n    static U3 = 22;\r\n    static V3 = 23;\r\n\r\n    static X4 = 24;\r\n    static Y4 = 25;\r\n    static C4R = 26;\r\n    static C4G = 27;\r\n    static C4B = 28;\r\n    static C4A = 29;\r\n    static U4 = 30;\r\n    static V4 = 31;\r\n\r\n    /** The local x translation. */\r\n    x = 0;\r\n\r\n    /** The local y translation. */\r\n    y = 0;\r\n\r\n    /** The local scaleX. */\r\n    scaleX = 1;\r\n\r\n    /** The local scaleY. */\r\n    scaleY = 1;\r\n\r\n    /** The local rotation. */\r\n    rotation = 0;\r\n\r\n    /** The width of the region attachment in Spine. */\r\n    width = 0;\r\n\r\n    /** The height of the region attachment in Spine. */\r\n    height = 0;\r\n\r\n    /** The color to tint the region attachment. */\r\n    color = new Color(1, 1, 1, 1);\r\n\r\n    /** The name of the texture region for this attachment. */\r\n    path: string;\r\n\r\n    rendererObject: any;\r\n    region: TextureRegion;\r\n\r\n    /** For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\r\n     *\r\n     * See {@link #updateOffset()}. */\r\n    offset = Utils.newFloatArray(8);\r\n\r\n    uvs = Utils.newFloatArray(8);\r\n\r\n    tempColor = new Color(1, 1, 1, 1);\r\n\r\n    constructor(name: string) {\r\n        super(name);\r\n    }\r\n\r\n    /** Calculates the {@link #offset} using the region settings. Must be called after changing region settings. */\r\n    updateOffset(): void {\r\n        const regionScaleX = (this.width / this.region.originalWidth) * this.scaleX;\r\n        const regionScaleY = (this.height / this.region.originalHeight) * this.scaleY;\r\n        const localX = (-this.width / 2) * this.scaleX + this.region.offsetX * regionScaleX;\r\n        const localY = (-this.height / 2) * this.scaleY + this.region.offsetY * regionScaleY;\r\n        const localX2 = localX + this.region.width * regionScaleX;\r\n        const localY2 = localY + this.region.height * regionScaleY;\r\n        const radians = (this.rotation * Math.PI) / 180;\r\n        const cos = Math.cos(radians);\r\n        const sin = Math.sin(radians);\r\n        const localXCos = localX * cos + this.x;\r\n        const localXSin = localX * sin;\r\n        const localYCos = localY * cos + this.y;\r\n        const localYSin = localY * sin;\r\n        const localX2Cos = localX2 * cos + this.x;\r\n        const localX2Sin = localX2 * sin;\r\n        const localY2Cos = localY2 * cos + this.y;\r\n        const localY2Sin = localY2 * sin;\r\n        const offset = this.offset;\r\n\r\n        offset[RegionAttachment.OX1] = localXCos - localYSin;\r\n        offset[RegionAttachment.OY1] = localYCos + localXSin;\r\n        offset[RegionAttachment.OX2] = localXCos - localY2Sin;\r\n        offset[RegionAttachment.OY2] = localY2Cos + localXSin;\r\n        offset[RegionAttachment.OX3] = localX2Cos - localY2Sin;\r\n        offset[RegionAttachment.OY3] = localY2Cos + localX2Sin;\r\n        offset[RegionAttachment.OX4] = localX2Cos - localYSin;\r\n        offset[RegionAttachment.OY4] = localYCos + localX2Sin;\r\n    }\r\n\r\n    setRegion(region: TextureRegion): void {\r\n        this.region = region;\r\n        const uvs = this.uvs;\r\n\r\n        if (region.degrees == 90) {\r\n            uvs[2] = region.u;\r\n            uvs[3] = region.v2;\r\n            uvs[4] = region.u;\r\n            uvs[5] = region.v;\r\n            uvs[6] = region.u2;\r\n            uvs[7] = region.v;\r\n            uvs[0] = region.u2;\r\n            uvs[1] = region.v2;\r\n        } else {\r\n            uvs[0] = region.u;\r\n            uvs[1] = region.v2;\r\n            uvs[2] = region.u;\r\n            uvs[3] = region.v;\r\n            uvs[4] = region.u2;\r\n            uvs[5] = region.v;\r\n            uvs[6] = region.u2;\r\n            uvs[7] = region.v2;\r\n        }\r\n    }\r\n\r\n    /** Transforms the attachment's four vertices to world coordinates.\r\n     *\r\n     * See [World transforms](http://esotericsoftware.com/spine-runtime-skeletons#World-transforms) in the Spine\r\n     * Runtimes Guide.\r\n     * @param worldVertices The output world vertices. Must have a length >= `offset` + 8.\r\n     * @param offset The `worldVertices` index to begin writing values.\r\n     * @param stride The number of `worldVertices` entries between the value pairs written. */\r\n    computeWorldVertices(bone: Bone | Slot, worldVertices: ArrayLike<number>, offset: number, stride: number) {\r\n        const vertexOffset = this.offset;\r\n        const mat = bone instanceof Slot ? bone.bone.matrix : bone.matrix;\r\n        const x = mat.tx;\r\n        const y = mat.ty;\r\n        const a = mat.a;\r\n        const b = mat.c;\r\n        const c = mat.b;\r\n        const d = mat.d;\r\n        let offsetX = 0;\r\n        let offsetY = 0;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX1];\r\n        offsetY = vertexOffset[RegionAttachment.OY1];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // br\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX2];\r\n        offsetY = vertexOffset[RegionAttachment.OY2];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // bl\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX3];\r\n        offsetY = vertexOffset[RegionAttachment.OY3];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ul\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n        offset += stride;\r\n\r\n        offsetX = vertexOffset[RegionAttachment.OX4];\r\n        offsetY = vertexOffset[RegionAttachment.OY4];\r\n        worldVertices[offset] = offsetX * a + offsetY * b + x; // ur\r\n        worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\r\n    }\r\n\r\n    copy(): Attachment {\r\n        const copy = new RegionAttachment(this.name);\r\n\r\n        copy.region = this.region;\r\n        copy.rendererObject = this.rendererObject;\r\n        copy.path = this.path;\r\n        copy.x = this.x;\r\n        copy.y = this.y;\r\n        copy.scaleX = this.scaleX;\r\n        copy.scaleY = this.scaleY;\r\n        copy.rotation = this.rotation;\r\n        copy.width = this.width;\r\n        copy.height = this.height;\r\n        Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\r\n        Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\r\n        copy.color.setFromColor(this.color);\r\n\r\n        return copy;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}