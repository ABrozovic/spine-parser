/*!
 * @pixi-spine/loader-base - v4.0.4
 * Compiled Fri, 16 Jun 2023 00:33:29 UTC
 *
 * @pixi-spine/loader-base is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2023, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */import{TextureAtlas as b}from"@pixi-spine/base";import{LoaderParserPriority as j,checkExtension as g,checkDataUrl as y}from"@pixi/assets";import{ExtensionType as x,settings as v,utils as f,extensions as O}from"@pixi/core";const z={extension:x.Asset,loader:{extension:{type:x.LoadParser,priority:j.Normal},test(a){return g(a,".atlas")},async load(a){return await(await v.ADAPTER.fetch(a)).text()},testParse(a,r){const o=g(r.src,".atlas"),e=typeof a=="string";return Promise.resolve(o&&e)},async parse(a,r,o){const e=r.data;let t=f.path.dirname(r.src);t&&t.lastIndexOf("/")!==t.length-1&&(t+="/");let i=null,n=null;const u=new Promise((p,l)=>{i=p,n=l});let d;const c=p=>{p||n(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),i(d)};if(e.image||e.images){const p=Object.assign(e.image?{default:e.image}:{},e.images);d=new b(a,(l,m)=>{const s=p[l]||p.default;s&&s.baseTexture?m(s.baseTexture):m(s)},c)}else d=new b(a,k(o,t,e.imageMetadata),c);return await u},unload(a){a.dispose()}}},k=(a,r,o,e)=>async(t,i)=>{const n=f.path.normalize([...r.split(f.path.sep),t].join(f.path.sep)),u=await a.load(e||{src:n,data:o});i(u.baseTexture)};O.add(z);const S=".json",B="application/json",F=["application/octet-stream","text/plain"],J=["image/jpeg","image/png"];function M(a){return a.hasOwnProperty("bones")}function $(a){return a instanceof ArrayBuffer}class q{constructor(){}installLoader(){const r=this,o={extension:x.Asset,loader:{extension:{type:x.LoadParser,priority:j.Normal},test(e){return g(e,".skel")},async load(e){return y(e,F)?G(e.slice(0,e.lastIndexOf("."))):await(await v.ADAPTER.fetch(e)).arrayBuffer()},testParse(e,t){var i;const n=y(t.src,B)||g(t.src,S)&&M(e),u=g(t.src,".skel")&&$(e),d=((i=t.data)==null?void 0:i.spineAtlas)===!1;return Promise.resolve(n&&!d||u)},async parse(e,t,i){var n;const u=f.path.extname(t.src).toLowerCase(),d=f.path.basename(t.src,u);let c=f.path.dirname(t.src);c&&c.lastIndexOf("/")!==c.length-1&&(c+="/");const p=y(t.src,B)||g(t.src,S)&&M(e);let l=null,m=e;p?l=r.createJsonParser():(l=r.createBinaryParser(),m=new Uint8Array(e));const s=t.data||{},L=(n=s==null?void 0:s.spineSkeletonScale)!=null?n:null;L&&(l.scale=L);const w=s.spineAtlas;if(w&&w.pages)return r.parseData(l,w,m);let A=s.atlasRawData;if(y(s.spineAtlasFile,F)&&(A=atob(s.spineAtlasFile.split(",")[1])),A){let T=null,D=null;const R=new Promise((P,U)=>{T=P,D=U}),C=typeof s.image=="string"&&y(s.image,J)?s.image:null,I=new b(A,k(i,c,s.imageMetadata,C),P=>{P||D(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),T(I)}),N=await R;return r.parseData(l,N,m)}let h=s.spineAtlasFile;h||(h=`${c+d}.atlas`);const E=await i.load({src:h,data:s,alias:s.spineAtlasAlias});return r.parseData(l,E,m)}}};return O.add(o),o}}function G(a){const r=a.split(",")[1],o=atob(r),e=o.length,t=new ArrayBuffer(e),i=new Uint8Array(t);for(let n=0;n<e;n++)i[n]=o.charCodeAt(n);return t}export{q as SpineLoaderAbstract,k as makeSpineTextureAtlasLoaderFunctionFromPixiLoaderObject};
//# sourceMappingURL=loader-base.mjs.map
