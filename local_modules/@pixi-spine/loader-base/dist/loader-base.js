/*!
 * @pixi-spine/loader-base - v4.0.3
 * Compiled Fri, 12 May 2023 00:15:30 UTC
 *
 * @pixi-spine/loader-base is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2023, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */this.PIXI=this.PIXI||{},this.PIXI.spine=function(y,h,i,s){"use strict";const S={extension:s.ExtensionType.Asset,loader:{extension:{type:s.ExtensionType.LoadParser,priority:i.LoaderParserPriority.Normal},test(n){return i.checkExtension(n,".atlas")},async load(n){return await(await s.settings.ADAPTER.fetch(n)).text()},testParse(n,r){const d=i.checkExtension(r.src,".atlas"),e=typeof n=="string";return Promise.resolve(d&&e)},async parse(n,r,d){const e=r.data;let t=s.utils.path.dirname(r.src);t&&t.lastIndexOf("/")!==t.length-1&&(t+="/");let l=null,c=null;const x=new Promise((p,o)=>{l=p,c=o});let m;const u=p=>{p||c(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),l(m)};if(e.image||e.images){const p=Object.assign(e.image?{default:e.image}:{},e.images);m=new h.TextureAtlas(n,(o,g)=>{const a=p[o]||p.default;a&&a.baseTexture?g(a.baseTexture):g(a)},u)}else m=new h.TextureAtlas(n,P(d,t,e.imageMetadata),u);return await x},unload(n){n.dispose()}}},P=(n,r,d,e)=>async(t,l)=>{const c=s.utils.path.join(...r.split(s.utils.path.sep),t),x=await n.load(e||{src:c,data:d});l(x.baseTexture)};s.extensions.add(S);const I=".json",T="application/json",j="application/octet-stream",v=["image/jpeg","image/png"];function b(n){return n.hasOwnProperty("bones")}function F(n){return n instanceof ArrayBuffer}class O{constructor(){}installLoader(){const r=this,d={extension:s.ExtensionType.Asset,loader:{extension:{type:s.ExtensionType.LoadParser,priority:i.LoaderParserPriority.Normal},test(e){return i.checkExtension(e,".skel")},async load(e){return await(await s.settings.ADAPTER.fetch(e)).arrayBuffer()},testParse(e,t){var l;const c=i.checkDataUrl(t.src,T)||i.checkExtension(t.src,I)&&b(e),x=i.checkExtension(t.src,".skel")&&F(e),m=((l=t.data)==null?void 0:l.spineAtlas)===!1;return Promise.resolve(c&&!m||x)},async parse(e,t,l){var c;const x=s.utils.path.extname(t.src).toLowerCase(),m=s.utils.path.basename(t.src,x);let u=s.utils.path.dirname(t.src);u&&u.lastIndexOf("/")!==u.length-1&&(u+="/");const p=i.checkDataUrl(t.src,T)||i.checkExtension(t.src,I)&&b(e);let o=null,g=e;p?o=r.createJsonParser():(o=r.createBinaryParser(),g=new Uint8Array(e));const a=t.data||{},E=(c=a==null?void 0:a.spineSkeletonScale)!=null?c:null;E&&(o.scale=E);const f=a.spineAtlas;if(f&&f.pages)return r.parseData(o,f,g);let A=a.atlasRawData;if(i.checkDataUrl(a.spineAtlasFile,j)&&(A=Buffer.from(a.spineAtlasFile.split(",")[1],"base64").toString("binary")),A){let L=null,D=null;const X=new Promise((k,N)=>{L=k,D=N}),B=typeof a.image=="string"&&i.checkDataUrl(a.image,v)?a.image:null,M=new h.TextureAtlas(A,P(l,u,a.imageMetadata,B),k=>{k||D(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),L(M)}),R=await X;return r.parseData(o,R,g)}let w=a.spineAtlasFile;w||(w=`${u+m}.atlas`);const U=await l.load({src:w,data:a,alias:a.spineAtlasAlias});return r.parseData(o,U,g)}}};return s.extensions.add(d),d}}return y.SpineLoaderAbstract=O,y.makeSpineTextureAtlasLoaderFunctionFromPixiLoaderObject=P,y}({},PIXI.spine,PIXI,PIXI);
//# sourceMappingURL=loader-base.js.map
