/*!
 * @pixi-spine/loader-base - v4.0.4
 * Compiled Fri, 16 Jun 2023 00:33:29 UTC
 *
 * @pixi-spine/loader-base is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 * 
 * Copyright 2023, Ivan Igorevich Popelyshev <ivan.popelyshev@gmail.com>, All Rights Reserved
 */this.PIXI=this.PIXI||{},this.PIXI.spine=function(g,m,l,r){"use strict";const S={extension:r.ExtensionType.Asset,loader:{extension:{type:r.ExtensionType.LoadParser,priority:l.LoaderParserPriority.Normal},test(a){return l.checkExtension(a,".atlas")},async load(a){return await(await r.settings.ADAPTER.fetch(a)).text()},testParse(a,i){const c=l.checkExtension(i.src,".atlas"),t=typeof a=="string";return Promise.resolve(c&&t)},async parse(a,i,c){const t=i.data;let e=r.utils.path.dirname(i.src);e&&e.lastIndexOf("/")!==e.length-1&&(e+="/");let o=null,s=null;const x=new Promise((d,u)=>{o=d,s=u});let h;const p=d=>{d||s(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),o(h)};if(t.image||t.images){const d=Object.assign(t.image?{default:t.image}:{},t.images);h=new m.TextureAtlas(a,(u,y)=>{const n=d[u]||d.default;n&&n.baseTexture?y(n.baseTexture):y(n)},p)}else h=new m.TextureAtlas(a,f(c,e,t.imageMetadata),p);return await x},unload(a){a.dispose()}}},f=(a,i,c,t)=>async(e,o)=>{const s=r.utils.path.normalize([...i.split(r.utils.path.sep),e].join(r.utils.path.sep)),x=await a.load(t||{src:s,data:c});o(x.baseTexture)};r.extensions.add(S);const I=".json",T="application/json",b=["application/octet-stream","text/plain"],v=["image/jpeg","image/png"];function L(a){return a.hasOwnProperty("bones")}function F(a){return a instanceof ArrayBuffer}class O{constructor(){}installLoader(){const i=this,c={extension:r.ExtensionType.Asset,loader:{extension:{type:r.ExtensionType.LoadParser,priority:l.LoaderParserPriority.Normal},test(t){return l.checkExtension(t,".skel")},async load(t){return l.checkDataUrl(t,b)?U(t.slice(0,t.lastIndexOf("."))):await(await r.settings.ADAPTER.fetch(t)).arrayBuffer()},testParse(t,e){var o;const s=l.checkDataUrl(e.src,T)||l.checkExtension(e.src,I)&&L(t),x=l.checkExtension(e.src,".skel")&&F(t),h=((o=e.data)==null?void 0:o.spineAtlas)===!1;return Promise.resolve(s&&!h||x)},async parse(t,e,o){var s;const x=r.utils.path.extname(e.src).toLowerCase(),h=r.utils.path.basename(e.src,x);let p=r.utils.path.dirname(e.src);p&&p.lastIndexOf("/")!==p.length-1&&(p+="/");const d=l.checkDataUrl(e.src,T)||l.checkExtension(e.src,I)&&L(t);let u=null,y=t;d?u=i.createJsonParser():(u=i.createBinaryParser(),y=new Uint8Array(t));const n=e.data||{},D=(s=n==null?void 0:n.spineSkeletonScale)!=null?s:null;D&&(u.scale=D);const A=n.spineAtlas;if(A&&A.pages)return i.parseData(u,A,y);let P=n.atlasRawData;if(l.checkDataUrl(n.spineAtlasFile,b)&&(P=atob(n.spineAtlasFile.split(",")[1])),P){let E=null,j=null;const B=new Promise((k,N)=>{E=k,j=N}),M=typeof n.image=="string"&&l.checkDataUrl(n.image,v)?n.image:null,R=new m.TextureAtlas(P,f(o,p,n.imageMetadata,M),k=>{k||j(`Something went terribly wrong loading a spine .atlas file
Most likely your texture failed to load.`),E(R)}),C=await B;return i.parseData(u,C,y)}let w=n.spineAtlasFile;w||(w=`${p+h}.atlas`);const X=await o.load({src:w,data:n,alias:n.spineAtlasAlias});return i.parseData(u,X,y)}}};return r.extensions.add(c),c}}function U(a){const i=a.split(",")[1],c=atob(i),t=c.length,e=new ArrayBuffer(t),o=new Uint8Array(e);for(let s=0;s<t;s++)o[s]=c.charCodeAt(s);return e}return g.SpineLoaderAbstract=O,g.makeSpineTextureAtlasLoaderFunctionFromPixiLoaderObject=f,g}({},PIXI.spine,PIXI,PIXI);
//# sourceMappingURL=loader-base.js.map
