{"version":3,"file":"loader-uni.mjs","sources":["../../runtime-3.4/lib/core/attachments/Attachment.mjs","../../runtime-3.4/lib/core/attachments/BoundingBoxAttachment.mjs","../../runtime-3.4/lib/core/attachments/ClippingAttachment.mjs","../../runtime-3.4/lib/core/attachments/MeshAttachment.mjs","../../runtime-3.4/lib/core/attachments/PathAttachment.mjs","../../runtime-3.4/lib/core/attachments/PointAttachment.mjs","../../runtime-3.4/lib/core/Slot.mjs","../../runtime-3.4/lib/core/attachments/RegionAttachment.mjs","../../runtime-3.4/lib/core/vertexeffects/JitterEffect.mjs","../../runtime-3.4/lib/core/vertexeffects/SwirlEffect.mjs","../../runtime-3.4/lib/core/Animation.mjs","../../runtime-3.4/lib/core/AnimationState.mjs","../../runtime-3.4/lib/core/AnimationStateData.mjs","../../runtime-3.4/lib/core/AtlasAttachmentLoader.mjs","../../runtime-3.4/lib/core/Bone.mjs","../../runtime-3.4/lib/core/BoneData.mjs","../../runtime-3.4/lib/core/Constraint.mjs","../../runtime-3.4/lib/core/Event.mjs","../../runtime-3.4/lib/core/EventData.mjs","../../runtime-3.4/lib/core/IkConstraint.mjs","../../runtime-3.4/lib/core/IkConstraintData.mjs","../../runtime-3.4/lib/core/PathConstraintData.mjs","../../runtime-3.4/lib/core/PathConstraint.mjs","../../runtime-3.4/lib/core/TransformConstraint.mjs","../../runtime-3.4/lib/core/Skeleton.mjs","../../runtime-3.4/lib/core/SkeletonData.mjs","../../runtime-3.4/lib/core/SlotData.mjs","../../runtime-3.4/lib/core/TransformConstraintData.mjs","../../runtime-3.4/lib/core/Skin.mjs","../../runtime-3.4/lib/core/SkeletonBinary.mjs","../../runtime-3.4/lib/core/SkeletonBounds.mjs","../../runtime-3.4/lib/core/SkeletonJson.mjs","../../runtime-3.4/lib/Spine.mjs","../src/versions.ts","../src/SpineLoader.ts","../src/Spine.ts","../src/index.ts"],"sourcesContent":["import { Utils } from '@pixi-spine/base';\n\nclass Attachment {\n  constructor(name) {\n    if (name == null)\n      throw new Error(\"name cannot be null.\");\n    this.name = name;\n  }\n}\nconst _VertexAttachment = class extends Attachment {\n  constructor(name) {\n    super(name);\n    this.id = (_VertexAttachment.nextID++ & 65535) << 11;\n    this.worldVerticesLength = 0;\n    this.deformAttachment = this;\n  }\n  computeWorldVerticesOld(slot, worldVertices) {\n    this.computeWorldVertices(slot, 0, this.worldVerticesLength, worldVertices, 0, 2);\n  }\n  /** Transforms local vertices to world coordinates.\n   * @param start The index of the first local vertex value to transform. Each vertex has 2 values, x and y.\n   * @param count The number of world vertex values to output. Must be <= {@link #getWorldVerticesLength()} - start.\n   * @param worldVertices The output world vertices. Must have a length >= offset + count.\n   * @param offset The worldVertices index to begin writing values. */\n  computeWorldVertices(slot, start, count, worldVertices, offset, stride) {\n    count = offset + (count >> 1) * stride;\n    const skeleton = slot.bone.skeleton;\n    const deformArray = slot.deform;\n    let vertices = this.vertices;\n    const bones = this.bones;\n    if (bones == null) {\n      if (deformArray.length > 0)\n        vertices = deformArray;\n      const mat = slot.bone.matrix;\n      const x = mat.tx;\n      const y = mat.ty;\n      const a = mat.a;\n      const b = mat.c;\n      const c = mat.b;\n      const d = mat.d;\n      for (let v2 = start, w = offset; w < count; v2 += 2, w += stride) {\n        const vx = vertices[v2];\n        const vy = vertices[v2 + 1];\n        worldVertices[w] = vx * a + vy * b + x;\n        worldVertices[w + 1] = vx * c + vy * d + y;\n      }\n      return;\n    }\n    let v = 0;\n    let skip = 0;\n    for (let i = 0; i < start; i += 2) {\n      const n = bones[v];\n      v += n + 1;\n      skip += n;\n    }\n    const skeletonBones = skeleton.bones;\n    if (deformArray.length == 0) {\n      for (let w = offset, b = skip * 3; w < count; w += stride) {\n        let wx = 0;\n        let wy = 0;\n        let n = bones[v++];\n        n += v;\n        for (; v < n; v++, b += 3) {\n          const mat = skeletonBones[bones[v]].matrix;\n          const vx = vertices[b];\n          const vy = vertices[b + 1];\n          const weight = vertices[b + 2];\n          wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\n          wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\n        }\n        worldVertices[w] = wx;\n        worldVertices[w + 1] = wy;\n      }\n    } else {\n      const deform = deformArray;\n      for (let w = offset, b = skip * 3, f = skip << 1; w < count; w += stride) {\n        let wx = 0;\n        let wy = 0;\n        let n = bones[v++];\n        n += v;\n        for (; v < n; v++, b += 3, f += 2) {\n          const mat = skeletonBones[bones[v]].matrix;\n          const vx = vertices[b] + deform[f];\n          const vy = vertices[b + 1] + deform[f + 1];\n          const weight = vertices[b + 2];\n          wx += (vx * mat.a + vy * mat.c + mat.tx) * weight;\n          wy += (vx * mat.b + vy * mat.d + mat.ty) * weight;\n        }\n        worldVertices[w] = wx;\n        worldVertices[w + 1] = wy;\n      }\n    }\n  }\n  copyTo(attachment) {\n    if (this.bones != null) {\n      attachment.bones = new Array(this.bones.length);\n      Utils.arrayCopy(this.bones, 0, attachment.bones, 0, this.bones.length);\n    } else\n      attachment.bones = null;\n    if (this.vertices != null) {\n      attachment.vertices = Utils.newFloatArray(this.vertices.length);\n      Utils.arrayCopy(this.vertices, 0, attachment.vertices, 0, this.vertices.length);\n    } else\n      attachment.vertices = null;\n    attachment.worldVerticesLength = this.worldVerticesLength;\n    attachment.deformAttachment = this.deformAttachment;\n  }\n};\nlet VertexAttachment = _VertexAttachment;\nVertexAttachment.nextID = 0;\n\nexport { Attachment, VertexAttachment };\n//# sourceMappingURL=Attachment.mjs.map\n","import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color } from '@pixi-spine/base';\n\nclass BoundingBoxAttachment extends VertexAttachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.BoundingBox;\n    this.color = new Color(1, 1, 1, 1);\n  }\n  copy() {\n    const copy = new BoundingBoxAttachment(this.name);\n    this.copyTo(copy);\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n}\n\nexport { BoundingBoxAttachment };\n//# sourceMappingURL=BoundingBoxAttachment.mjs.map\n","import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color } from '@pixi-spine/base';\n\nclass ClippingAttachment extends VertexAttachment {\n  // ce3a3aff\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Clipping;\n    // Nonessential.\n    this.color = new Color(0.2275, 0.2275, 0.8078, 1);\n  }\n  copy() {\n    const copy = new ClippingAttachment(this.name);\n    this.copyTo(copy);\n    copy.endSlot = this.endSlot;\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n}\n\nexport { ClippingAttachment };\n//# sourceMappingURL=ClippingAttachment.mjs.map\n","import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color, Utils } from '@pixi-spine/base';\n\nclass MeshAttachment extends VertexAttachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Mesh;\n    this.color = new Color(1, 1, 1, 1);\n    this.tempColor = new Color(0, 0, 0, 0);\n  }\n  getParentMesh() {\n    return this.parentMesh;\n  }\n  /** @param parentMesh May be null. */\n  setParentMesh(parentMesh) {\n    this.parentMesh = parentMesh;\n    if (parentMesh != null) {\n      this.bones = parentMesh.bones;\n      this.vertices = parentMesh.vertices;\n      this.worldVerticesLength = parentMesh.worldVerticesLength;\n      this.regionUVs = parentMesh.regionUVs;\n      this.triangles = parentMesh.triangles;\n      this.hullLength = parentMesh.hullLength;\n      this.worldVerticesLength = parentMesh.worldVerticesLength;\n    }\n  }\n  copy() {\n    if (this.parentMesh != null)\n      return this.newLinkedMesh();\n    const copy = new MeshAttachment(this.name);\n    copy.region = this.region;\n    copy.path = this.path;\n    copy.color.setFromColor(this.color);\n    this.copyTo(copy);\n    copy.regionUVs = new Float32Array(this.regionUVs.length);\n    Utils.arrayCopy(this.regionUVs, 0, copy.regionUVs, 0, this.regionUVs.length);\n    copy.triangles = new Array(this.triangles.length);\n    Utils.arrayCopy(this.triangles, 0, copy.triangles, 0, this.triangles.length);\n    copy.hullLength = this.hullLength;\n    if (this.edges != null) {\n      copy.edges = new Array(this.edges.length);\n      Utils.arrayCopy(this.edges, 0, copy.edges, 0, this.edges.length);\n    }\n    copy.width = this.width;\n    copy.height = this.height;\n    return copy;\n  }\n  newLinkedMesh() {\n    const copy = new MeshAttachment(this.name);\n    copy.region = this.region;\n    copy.path = this.path;\n    copy.color.setFromColor(this.color);\n    copy.deformAttachment = this.deformAttachment;\n    copy.setParentMesh(this.parentMesh != null ? this.parentMesh : this);\n    return copy;\n  }\n}\n\nexport { MeshAttachment };\n//# sourceMappingURL=MeshAttachment.mjs.map\n","import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color, Utils } from '@pixi-spine/base';\n\nclass PathAttachment extends VertexAttachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Path;\n    this.closed = false;\n    this.constantSpeed = false;\n    this.color = new Color(1, 1, 1, 1);\n  }\n  copy() {\n    const copy = new PathAttachment(this.name);\n    this.copyTo(copy);\n    copy.lengths = new Array(this.lengths.length);\n    Utils.arrayCopy(this.lengths, 0, copy.lengths, 0, this.lengths.length);\n    copy.closed = closed;\n    copy.constantSpeed = this.constantSpeed;\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n}\n\nexport { PathAttachment };\n//# sourceMappingURL=PathAttachment.mjs.map\n","import { VertexAttachment } from './Attachment.mjs';\nimport { AttachmentType, Color, MathUtils } from '@pixi-spine/base';\n\nclass PointAttachment extends VertexAttachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Point;\n    this.color = new Color(0.38, 0.94, 0, 1);\n  }\n  computeWorldPosition(bone, point) {\n    const mat = bone.matrix;\n    point.x = this.x * mat.a + this.y * mat.c + bone.worldX;\n    point.y = this.x * mat.b + this.y * mat.d + bone.worldY;\n    return point;\n  }\n  computeWorldRotation(bone) {\n    const mat = bone.matrix;\n    const cos = MathUtils.cosDeg(this.rotation);\n    const sin = MathUtils.sinDeg(this.rotation);\n    const x = cos * mat.a + sin * mat.c;\n    const y = cos * mat.b + sin * mat.d;\n    return Math.atan2(y, x) * MathUtils.radDeg;\n  }\n  copy() {\n    const copy = new PointAttachment(this.name);\n    copy.x = this.x;\n    copy.y = this.y;\n    copy.rotation = this.rotation;\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n}\n\nexport { PointAttachment };\n//# sourceMappingURL=PointAttachment.mjs.map\n","import { Color } from '@pixi-spine/base';\n\nclass Slot {\n  constructor(data, bone) {\n    this.deform = new Array();\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    if (bone == null)\n      throw new Error(\"bone cannot be null.\");\n    this.data = data;\n    this.bone = bone;\n    this.color = new Color();\n    this.darkColor = data.darkColor == null ? null : new Color();\n    this.setToSetupPose();\n    this.blendMode = this.data.blendMode;\n  }\n  /** @return May be null. */\n  getAttachment() {\n    return this.attachment;\n  }\n  /** Sets the attachment and if it changed, resets {@link #getAttachmentTime()} and clears {@link #getAttachmentVertices()}.\n   * @param attachment May be null. */\n  setAttachment(attachment) {\n    if (this.attachment == attachment)\n      return;\n    this.attachment = attachment;\n    this.attachmentTime = this.bone.skeleton.time;\n    this.deform.length = 0;\n  }\n  setAttachmentTime(time) {\n    this.attachmentTime = this.bone.skeleton.time - time;\n  }\n  /** Returns the time since the attachment was set. */\n  getAttachmentTime() {\n    return this.bone.skeleton.time - this.attachmentTime;\n  }\n  setToSetupPose() {\n    this.color.setFromColor(this.data.color);\n    if (this.darkColor != null)\n      this.darkColor.setFromColor(this.data.darkColor);\n    if (this.data.attachmentName == null)\n      this.attachment = null;\n    else {\n      this.attachment = null;\n      this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));\n    }\n  }\n}\n\nexport { Slot };\n//# sourceMappingURL=Slot.mjs.map\n","import { Attachment } from './Attachment.mjs';\nimport { AttachmentType, Color, Utils } from '@pixi-spine/base';\nimport { Slot } from '../Slot.mjs';\n\nconst _RegionAttachment = class extends Attachment {\n  constructor(name) {\n    super(name);\n    this.type = AttachmentType.Region;\n    this.x = 0;\n    this.y = 0;\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.rotation = 0;\n    this.width = 0;\n    this.height = 0;\n    this.color = new Color(1, 1, 1, 1);\n    this.offset = Utils.newFloatArray(8);\n    this.uvs = Utils.newFloatArray(8);\n    this.tempColor = new Color(1, 1, 1, 1);\n  }\n  updateOffset() {\n    const regionScaleX = this.width / this.region.originalWidth * this.scaleX;\n    const regionScaleY = this.height / this.region.originalHeight * this.scaleY;\n    const localX = -this.width / 2 * this.scaleX + this.region.offsetX * regionScaleX;\n    const localY = -this.height / 2 * this.scaleY + this.region.offsetY * regionScaleY;\n    const localX2 = localX + this.region.width * regionScaleX;\n    const localY2 = localY + this.region.height * regionScaleY;\n    const radians = this.rotation * Math.PI / 180;\n    const cos = Math.cos(radians);\n    const sin = Math.sin(radians);\n    const localXCos = localX * cos + this.x;\n    const localXSin = localX * sin;\n    const localYCos = localY * cos + this.y;\n    const localYSin = localY * sin;\n    const localX2Cos = localX2 * cos + this.x;\n    const localX2Sin = localX2 * sin;\n    const localY2Cos = localY2 * cos + this.y;\n    const localY2Sin = localY2 * sin;\n    const offset = this.offset;\n    offset[_RegionAttachment.OX1] = localXCos - localYSin;\n    offset[_RegionAttachment.OY1] = localYCos + localXSin;\n    offset[_RegionAttachment.OX2] = localXCos - localY2Sin;\n    offset[_RegionAttachment.OY2] = localY2Cos + localXSin;\n    offset[_RegionAttachment.OX3] = localX2Cos - localY2Sin;\n    offset[_RegionAttachment.OY3] = localY2Cos + localX2Sin;\n    offset[_RegionAttachment.OX4] = localX2Cos - localYSin;\n    offset[_RegionAttachment.OY4] = localYCos + localX2Sin;\n  }\n  setRegion(region) {\n    this.region = region;\n    const uvs = this.uvs;\n    if (region.rotate) {\n      uvs[2] = region.u;\n      uvs[3] = region.v2;\n      uvs[4] = region.u;\n      uvs[5] = region.v;\n      uvs[6] = region.u2;\n      uvs[7] = region.v;\n      uvs[0] = region.u2;\n      uvs[1] = region.v2;\n    } else {\n      uvs[0] = region.u;\n      uvs[1] = region.v2;\n      uvs[2] = region.u;\n      uvs[3] = region.v;\n      uvs[4] = region.u2;\n      uvs[5] = region.v;\n      uvs[6] = region.u2;\n      uvs[7] = region.v2;\n    }\n  }\n  computeWorldVertices(bone, worldVertices, offset, stride) {\n    const vertexOffset = this.offset;\n    const mat = bone instanceof Slot ? bone.bone.matrix : bone.matrix;\n    const x = mat.tx;\n    const y = mat.ty;\n    const a = mat.a;\n    const b = mat.c;\n    const c = mat.b;\n    const d = mat.d;\n    let offsetX = 0;\n    let offsetY = 0;\n    offsetX = vertexOffset[_RegionAttachment.OX1];\n    offsetY = vertexOffset[_RegionAttachment.OY1];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[_RegionAttachment.OX2];\n    offsetY = vertexOffset[_RegionAttachment.OY2];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[_RegionAttachment.OX3];\n    offsetY = vertexOffset[_RegionAttachment.OY3];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n    offset += stride;\n    offsetX = vertexOffset[_RegionAttachment.OX4];\n    offsetY = vertexOffset[_RegionAttachment.OY4];\n    worldVertices[offset] = offsetX * a + offsetY * b + x;\n    worldVertices[offset + 1] = offsetX * c + offsetY * d + y;\n  }\n  copy() {\n    const copy = new _RegionAttachment(this.name);\n    copy.region = this.region;\n    copy.rendererObject = this.rendererObject;\n    copy.path = this.path;\n    copy.x = this.x;\n    copy.y = this.y;\n    copy.scaleX = this.scaleX;\n    copy.scaleY = this.scaleY;\n    copy.rotation = this.rotation;\n    copy.width = this.width;\n    copy.height = this.height;\n    Utils.arrayCopy(this.uvs, 0, copy.uvs, 0, 8);\n    Utils.arrayCopy(this.offset, 0, copy.offset, 0, 8);\n    copy.color.setFromColor(this.color);\n    return copy;\n  }\n};\nlet RegionAttachment = _RegionAttachment;\nRegionAttachment.OX1 = 0;\nRegionAttachment.OY1 = 1;\nRegionAttachment.OX2 = 2;\nRegionAttachment.OY2 = 3;\nRegionAttachment.OX3 = 4;\nRegionAttachment.OY3 = 5;\nRegionAttachment.OX4 = 6;\nRegionAttachment.OY4 = 7;\nRegionAttachment.X1 = 0;\nRegionAttachment.Y1 = 1;\nRegionAttachment.C1R = 2;\nRegionAttachment.C1G = 3;\nRegionAttachment.C1B = 4;\nRegionAttachment.C1A = 5;\nRegionAttachment.U1 = 6;\nRegionAttachment.V1 = 7;\nRegionAttachment.X2 = 8;\nRegionAttachment.Y2 = 9;\nRegionAttachment.C2R = 10;\nRegionAttachment.C2G = 11;\nRegionAttachment.C2B = 12;\nRegionAttachment.C2A = 13;\nRegionAttachment.U2 = 14;\nRegionAttachment.V2 = 15;\nRegionAttachment.X3 = 16;\nRegionAttachment.Y3 = 17;\nRegionAttachment.C3R = 18;\nRegionAttachment.C3G = 19;\nRegionAttachment.C3B = 20;\nRegionAttachment.C3A = 21;\nRegionAttachment.U3 = 22;\nRegionAttachment.V3 = 23;\nRegionAttachment.X4 = 24;\nRegionAttachment.Y4 = 25;\nRegionAttachment.C4R = 26;\nRegionAttachment.C4G = 27;\nRegionAttachment.C4B = 28;\nRegionAttachment.C4A = 29;\nRegionAttachment.U4 = 30;\nRegionAttachment.V4 = 31;\n\nexport { RegionAttachment };\n//# sourceMappingURL=RegionAttachment.mjs.map\n","import { MathUtils } from '@pixi-spine/base';\n\nclass JitterEffect {\n  constructor(jitterX, jitterY) {\n    this.jitterX = 0;\n    this.jitterY = 0;\n    this.jitterX = jitterX;\n    this.jitterY = jitterY;\n  }\n  begin(skeleton) {\n  }\n  transform(position, uv, light, dark) {\n    position.x += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\n    position.y += MathUtils.randomTriangular(-this.jitterX, this.jitterY);\n  }\n  end() {\n  }\n}\n\nexport { JitterEffect };\n//# sourceMappingURL=JitterEffect.mjs.map\n","import { PowOut, MathUtils } from '@pixi-spine/base';\n\nconst _SwirlEffect = class {\n  constructor(radius) {\n    this.centerX = 0;\n    this.centerY = 0;\n    this.radius = 0;\n    this.angle = 0;\n    this.worldX = 0;\n    this.worldY = 0;\n    this.radius = radius;\n  }\n  begin(skeleton) {\n    this.worldX = skeleton.x + this.centerX;\n    this.worldY = skeleton.y + this.centerY;\n  }\n  transform(position, uv, light, dark) {\n    const radAngle = this.angle * MathUtils.degreesToRadians;\n    const x = position.x - this.worldX;\n    const y = position.y - this.worldY;\n    const dist = Math.sqrt(x * x + y * y);\n    if (dist < this.radius) {\n      const theta = _SwirlEffect.interpolation.apply(0, radAngle, (this.radius - dist) / this.radius);\n      const cos = Math.cos(theta);\n      const sin = Math.sin(theta);\n      position.x = cos * x - sin * y + this.worldX;\n      position.y = sin * x + cos * y + this.worldY;\n    }\n  }\n  end() {\n  }\n};\nlet SwirlEffect = _SwirlEffect;\nSwirlEffect.interpolation = new PowOut(2);\n\nexport { SwirlEffect };\n//# sourceMappingURL=SwirlEffect.mjs.map\n","import { VertexAttachment } from './attachments/Attachment.mjs';\nimport { MixBlend, MixDirection, MathUtils, Utils } from '@pixi-spine/base';\nimport './attachments/RegionAttachment.mjs';\n\nclass Animation {\n  constructor(name, timelines, duration) {\n    if (name == null)\n      throw new Error(\"name cannot be null.\");\n    if (timelines == null)\n      throw new Error(\"timelines cannot be null.\");\n    this.name = name;\n    this.timelines = timelines;\n    this.timelineIds = [];\n    for (let i = 0; i < timelines.length; i++)\n      this.timelineIds[timelines[i].getPropertyId()] = true;\n    this.duration = duration;\n  }\n  hasTimeline(id) {\n    return this.timelineIds[id] == true;\n  }\n  /** Applies all the animation's timelines to the specified skeleton.\n   *\n   * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n   * @param loop If true, the animation repeats after {@link #getDuration()}.\n   * @param events May be null to ignore fired events. */\n  apply(skeleton, lastTime, time, loop, events, alpha, blend, direction) {\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    if (loop && this.duration != 0) {\n      time %= this.duration;\n      if (lastTime > 0)\n        lastTime %= this.duration;\n    }\n    const timelines = this.timelines;\n    for (let i = 0, n = timelines.length; i < n; i++)\n      timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n  }\n  /** @param target After the first and before the last value.\n   * @returns index of first value greater than the target. */\n  static binarySearch(values, target, step = 1) {\n    let low = 0;\n    let high = values.length / step - 2;\n    if (high == 0)\n      return step;\n    let current = high >>> 1;\n    while (true) {\n      if (values[(current + 1) * step] <= target)\n        low = current + 1;\n      else\n        high = current;\n      if (low == high)\n        return (low + 1) * step;\n      current = low + high >>> 1;\n    }\n  }\n  static linearSearch(values, target, step) {\n    for (let i = 0, last = values.length - step; i <= last; i += step)\n      if (values[i] > target)\n        return i;\n    return -1;\n  }\n}\nvar TimelineType = /* @__PURE__ */ ((TimelineType2) => {\n  TimelineType2[TimelineType2[\"rotate\"] = 0] = \"rotate\";\n  TimelineType2[TimelineType2[\"translate\"] = 1] = \"translate\";\n  TimelineType2[TimelineType2[\"scale\"] = 2] = \"scale\";\n  TimelineType2[TimelineType2[\"shear\"] = 3] = \"shear\";\n  TimelineType2[TimelineType2[\"attachment\"] = 4] = \"attachment\";\n  TimelineType2[TimelineType2[\"color\"] = 5] = \"color\";\n  TimelineType2[TimelineType2[\"deform\"] = 6] = \"deform\";\n  TimelineType2[TimelineType2[\"event\"] = 7] = \"event\";\n  TimelineType2[TimelineType2[\"drawOrder\"] = 8] = \"drawOrder\";\n  TimelineType2[TimelineType2[\"ikConstraint\"] = 9] = \"ikConstraint\";\n  TimelineType2[TimelineType2[\"transformConstraint\"] = 10] = \"transformConstraint\";\n  TimelineType2[TimelineType2[\"pathConstraintPosition\"] = 11] = \"pathConstraintPosition\";\n  TimelineType2[TimelineType2[\"pathConstraintSpacing\"] = 12] = \"pathConstraintSpacing\";\n  TimelineType2[TimelineType2[\"pathConstraintMix\"] = 13] = \"pathConstraintMix\";\n  TimelineType2[TimelineType2[\"twoColor\"] = 14] = \"twoColor\";\n  return TimelineType2;\n})(TimelineType || {});\nconst _CurveTimeline = class {\n  constructor(frameCount) {\n    this.curveData = [];\n    if (frameCount <= 0)\n      throw new Error(`frameCount must be > 0: ${frameCount}`);\n    this.curves = Utils.newFloatArray((frameCount - 1) * _CurveTimeline.BEZIER_SIZE);\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.curves.length / _CurveTimeline.BEZIER_SIZE + 1;\n  }\n  /** Sets the specified key frame to linear interpolation. */\n  setLinear(frameIndex) {\n    this.curves[frameIndex * _CurveTimeline.BEZIER_SIZE] = _CurveTimeline.LINEAR;\n  }\n  /** Sets the specified key frame to stepped interpolation. */\n  setStepped(frameIndex) {\n    this.curves[frameIndex * _CurveTimeline.BEZIER_SIZE] = _CurveTimeline.STEPPED;\n  }\n  /** Returns the interpolation type for the specified key frame.\n   * @returns Linear is 0, stepped is 1, Bezier is 2. */\n  getCurveType(frameIndex) {\n    const index = frameIndex * _CurveTimeline.BEZIER_SIZE;\n    if (index == this.curves.length)\n      return _CurveTimeline.LINEAR;\n    const type = this.curves[index];\n    if (type == _CurveTimeline.LINEAR)\n      return _CurveTimeline.LINEAR;\n    if (type == _CurveTimeline.STEPPED)\n      return _CurveTimeline.STEPPED;\n    return _CurveTimeline.BEZIER;\n  }\n  /** Sets the specified key frame to Bezier interpolation. `cx1` and `cx2` are from 0 to 1,\n   * representing the percent of time between the two key frames. `cy1` and `cy2` are the percent of the\n   * difference between the key frame's values. */\n  setCurve(frameIndex, cx1, cy1, cx2, cy2) {\n    this.curveData.push({ frameIndex, cx1, cy1, cx2, cy2 });\n    const tmpx = (-cx1 * 2 + cx2) * 0.03;\n    const tmpy = (-cy1 * 2 + cy2) * 0.03;\n    const dddfx = ((cx1 - cx2) * 3 + 1) * 6e-3;\n    const dddfy = ((cy1 - cy2) * 3 + 1) * 6e-3;\n    let ddfx = tmpx * 2 + dddfx;\n    let ddfy = tmpy * 2 + dddfy;\n    let dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667;\n    let dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;\n    let i = frameIndex * _CurveTimeline.BEZIER_SIZE;\n    const curves = this.curves;\n    curves[i++] = _CurveTimeline.BEZIER;\n    let x = dfx;\n    let y = dfy;\n    for (let n = i + _CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n      curves[i] = x;\n      curves[i + 1] = y;\n      dfx += ddfx;\n      dfy += ddfy;\n      ddfx += dddfx;\n      ddfy += dddfy;\n      x += dfx;\n      y += dfy;\n    }\n  }\n  /** Returns the interpolated percentage for the specified key frame and linear percentage. */\n  getCurvePercent(frameIndex, percent) {\n    percent = MathUtils.clamp(percent, 0, 1);\n    const curves = this.curves;\n    let i = frameIndex * _CurveTimeline.BEZIER_SIZE;\n    const type = curves[i];\n    if (type == _CurveTimeline.LINEAR)\n      return percent;\n    if (type == _CurveTimeline.STEPPED)\n      return 0;\n    i++;\n    let x = 0;\n    for (let start = i, n = i + _CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n      x = curves[i];\n      if (x >= percent) {\n        let prevX;\n        let prevY;\n        if (i == start) {\n          prevX = 0;\n          prevY = 0;\n        } else {\n          prevX = curves[i - 2];\n          prevY = curves[i - 1];\n        }\n        return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\n      }\n    }\n    const y = curves[i - 1];\n    return y + (1 - y) * (percent - x) / (1 - x);\n  }\n};\nlet CurveTimeline = _CurveTimeline;\nCurveTimeline.LINEAR = 0;\nCurveTimeline.STEPPED = 1;\nCurveTimeline.BEZIER = 2;\nCurveTimeline.BEZIER_SIZE = 10 * 2 - 1;\nconst _RotateTimeline = class extends CurveTimeline {\n  // time, degrees, ...\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"RotateTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount << 1);\n  }\n  getPropertyId() {\n    return (0 /* rotate */ << 24) + this.boneIndex;\n  }\n  /** Sets the time and angle of the specified keyframe. */\n  setFrame(frameIndex, time, degrees) {\n    this.data.push({ frameIndex, time, degrees });\n    frameIndex <<= 1;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _RotateTimeline.ROTATION] = degrees;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation;\n          return;\n        case MixBlend.first:\n          const r2 = bone.data.rotation - bone.rotation;\n          bone.rotation += (r2 - (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360) * alpha;\n      }\n      return;\n    }\n    if (time >= frames[frames.length - _RotateTimeline.ENTRIES]) {\n      let r2 = frames[frames.length + _RotateTimeline.PREV_ROTATION];\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation + r2 * alpha;\n          break;\n        case MixBlend.first:\n        case MixBlend.replace:\n          r2 += bone.data.rotation - bone.rotation;\n          r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;\n        case MixBlend.add:\n          bone.rotation += r2 * alpha;\n      }\n      return;\n    }\n    const frame = Animation.binarySearch(frames, time, _RotateTimeline.ENTRIES);\n    const prevRotation = frames[frame + _RotateTimeline.PREV_ROTATION];\n    const frameTime = frames[frame];\n    const percent = this.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + _RotateTimeline.PREV_TIME] - frameTime));\n    let r = frames[frame + _RotateTimeline.ROTATION] - prevRotation;\n    r = prevRotation + (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * percent;\n    switch (blend) {\n      case MixBlend.setup:\n        bone.rotation = bone.data.rotation + (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        r += bone.data.rotation - bone.rotation;\n      case MixBlend.add:\n        bone.rotation += (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;\n    }\n  }\n};\nlet RotateTimeline = _RotateTimeline;\nRotateTimeline.ENTRIES = 2;\nRotateTimeline.PREV_TIME = -2;\nRotateTimeline.PREV_ROTATION = -1;\nRotateTimeline.ROTATION = 1;\nconst _TranslateTimeline = class extends CurveTimeline {\n  // time, x, y, ...\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"TranslateTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _TranslateTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (1 /* translate */ << 24) + this.boneIndex;\n  }\n  /** Sets the time in seconds, x, and y values for the specified key frame. */\n  setFrame(frameIndex, time, x, y) {\n    this.data.push({ frameIndex, time, x, y });\n    frameIndex *= _TranslateTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _TranslateTimeline.X] = x;\n    this.frames[frameIndex + _TranslateTimeline.Y] = y;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.x = bone.data.x;\n          bone.y = bone.data.y;\n          return;\n        case MixBlend.first:\n          bone.x += (bone.data.x - bone.x) * alpha;\n          bone.y += (bone.data.y - bone.y) * alpha;\n      }\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    if (time >= frames[frames.length - _TranslateTimeline.ENTRIES]) {\n      x = frames[frames.length + _TranslateTimeline.PREV_X];\n      y = frames[frames.length + _TranslateTimeline.PREV_Y];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _TranslateTimeline.ENTRIES);\n      x = frames[frame + _TranslateTimeline.PREV_X];\n      y = frames[frame + _TranslateTimeline.PREV_Y];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / _TranslateTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _TranslateTimeline.PREV_TIME] - frameTime));\n      x += (frames[frame + _TranslateTimeline.X] - x) * percent;\n      y += (frames[frame + _TranslateTimeline.Y] - y) * percent;\n    }\n    switch (blend) {\n      case MixBlend.setup:\n        bone.x = bone.data.x + x * alpha;\n        bone.y = bone.data.y + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.x += (bone.data.x + x - bone.x) * alpha;\n        bone.y += (bone.data.y + y - bone.y) * alpha;\n        break;\n      case MixBlend.add:\n        bone.x += x * alpha;\n        bone.y += y * alpha;\n    }\n  }\n};\nlet TranslateTimeline = _TranslateTimeline;\nTranslateTimeline.ENTRIES = 3;\nTranslateTimeline.PREV_TIME = -3;\nTranslateTimeline.PREV_X = -2;\nTranslateTimeline.PREV_Y = -1;\nTranslateTimeline.X = 1;\nTranslateTimeline.Y = 2;\nclass ScaleTimeline extends TranslateTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"ScaleTimeline\";\n  }\n  getPropertyId() {\n    return (2 /* scale */ << 24) + this.boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.scaleX = bone.data.scaleX;\n          bone.scaleY = bone.data.scaleY;\n          return;\n        case MixBlend.first:\n          bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n          bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n      }\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    if (time >= frames[frames.length - ScaleTimeline.ENTRIES]) {\n      x = frames[frames.length + ScaleTimeline.PREV_X] * bone.data.scaleX;\n      y = frames[frames.length + ScaleTimeline.PREV_Y] * bone.data.scaleY;\n    } else {\n      const frame = Animation.binarySearch(frames, time, ScaleTimeline.ENTRIES);\n      x = frames[frame + ScaleTimeline.PREV_X];\n      y = frames[frame + ScaleTimeline.PREV_Y];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / ScaleTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ScaleTimeline.PREV_TIME] - frameTime));\n      x = (x + (frames[frame + ScaleTimeline.X] - x) * percent) * bone.data.scaleX;\n      y = (y + (frames[frame + ScaleTimeline.Y] - y) * percent) * bone.data.scaleY;\n    }\n    if (alpha == 1) {\n      if (blend == MixBlend.add) {\n        bone.scaleX += x - bone.data.scaleX;\n        bone.scaleY += y - bone.data.scaleY;\n      } else {\n        bone.scaleX = x;\n        bone.scaleY = y;\n      }\n    } else {\n      let bx = 0;\n      let by = 0;\n      if (direction == MixDirection.mixOut) {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = bone.data.scaleX;\n            by = bone.data.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = bone.scaleX;\n            by = bone.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.add:\n            bx = bone.scaleX;\n            by = bone.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n            by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n            bone.scaleX = bx + (x - bx) * alpha;\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n            by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n            bone.scaleX = bx + (x - bx) * alpha;\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.add:\n            bx = MathUtils.signum(x);\n            by = MathUtils.signum(y);\n            bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\n            bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\n        }\n      }\n    }\n  }\n}\nclass ShearTimeline extends TranslateTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"ShearTimeline\";\n  }\n  getPropertyId() {\n    return (3 /* shear */ << 24) + this.boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.shearX = bone.data.shearX;\n          bone.shearY = bone.data.shearY;\n          return;\n        case MixBlend.first:\n          bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n          bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n      }\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    if (time >= frames[frames.length - ShearTimeline.ENTRIES]) {\n      x = frames[frames.length + ShearTimeline.PREV_X];\n      y = frames[frames.length + ShearTimeline.PREV_Y];\n    } else {\n      const frame = Animation.binarySearch(frames, time, ShearTimeline.ENTRIES);\n      x = frames[frame + ShearTimeline.PREV_X];\n      y = frames[frame + ShearTimeline.PREV_Y];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / ShearTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ShearTimeline.PREV_TIME] - frameTime));\n      x = x + (frames[frame + ShearTimeline.X] - x) * percent;\n      y = y + (frames[frame + ShearTimeline.Y] - y) * percent;\n    }\n    switch (blend) {\n      case MixBlend.setup:\n        bone.shearX = bone.data.shearX + x * alpha;\n        bone.shearY = bone.data.shearY + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n        bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n        break;\n      case MixBlend.add:\n        bone.shearX += x * alpha;\n        bone.shearY += y * alpha;\n    }\n  }\n}\nconst _ColorTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"ColorTimeline\";\n    // time, r, g, b, a, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _ColorTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (5 /* color */ << 24) + this.slotIndex;\n  }\n  /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n  setFrame(frameIndex, time, r, g, b, a) {\n    this.data.push({ frameIndex, time, r, g, b, a });\n    frameIndex *= _ColorTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _ColorTimeline.R] = r;\n    this.frames[frameIndex + _ColorTimeline.G] = g;\n    this.frames[frameIndex + _ColorTimeline.B] = b;\n    this.frames[frameIndex + _ColorTimeline.A] = a;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          slot.color.setFromColor(slot.data.color);\n          return;\n        case MixBlend.first:\n          const color = slot.color;\n          const setup = slot.data.color;\n          color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);\n      }\n      return;\n    }\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n    if (time >= frames[frames.length - _ColorTimeline.ENTRIES]) {\n      const i = frames.length;\n      r = frames[i + _ColorTimeline.PREV_R];\n      g = frames[i + _ColorTimeline.PREV_G];\n      b = frames[i + _ColorTimeline.PREV_B];\n      a = frames[i + _ColorTimeline.PREV_A];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _ColorTimeline.ENTRIES);\n      r = frames[frame + _ColorTimeline.PREV_R];\n      g = frames[frame + _ColorTimeline.PREV_G];\n      b = frames[frame + _ColorTimeline.PREV_B];\n      a = frames[frame + _ColorTimeline.PREV_A];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / _ColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _ColorTimeline.PREV_TIME] - frameTime));\n      r += (frames[frame + _ColorTimeline.R] - r) * percent;\n      g += (frames[frame + _ColorTimeline.G] - g) * percent;\n      b += (frames[frame + _ColorTimeline.B] - b) * percent;\n      a += (frames[frame + _ColorTimeline.A] - a) * percent;\n    }\n    if (alpha == 1)\n      slot.color.set(r, g, b, a);\n    else {\n      const color = slot.color;\n      if (blend == MixBlend.setup)\n        color.setFromColor(slot.data.color);\n      color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n    }\n  }\n};\nlet ColorTimeline = _ColorTimeline;\nColorTimeline.ENTRIES = 5;\nColorTimeline.PREV_TIME = -5;\nColorTimeline.PREV_R = -4;\nColorTimeline.PREV_G = -3;\nColorTimeline.PREV_B = -2;\nColorTimeline.PREV_A = -1;\nColorTimeline.R = 1;\nColorTimeline.G = 2;\nColorTimeline.B = 3;\nColorTimeline.A = 4;\nconst _TwoColorTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"TwoColorTimeline\";\n    // time, r, g, b, a, r2, g2, b2, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _TwoColorTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (14 /* twoColor */ << 24) + this.slotIndex;\n  }\n  /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n  setFrame(frameIndex, time, r, g, b, a, r2, g2, b2) {\n    this.data.push({ frameIndex, time, r, g, b, a, r2, g2, b2 });\n    frameIndex *= _TwoColorTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _TwoColorTimeline.R] = r;\n    this.frames[frameIndex + _TwoColorTimeline.G] = g;\n    this.frames[frameIndex + _TwoColorTimeline.B] = b;\n    this.frames[frameIndex + _TwoColorTimeline.A] = a;\n    this.frames[frameIndex + _TwoColorTimeline.R2] = r2;\n    this.frames[frameIndex + _TwoColorTimeline.G2] = g2;\n    this.frames[frameIndex + _TwoColorTimeline.B2] = b2;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          slot.color.setFromColor(slot.data.color);\n          slot.darkColor.setFromColor(slot.data.darkColor);\n          return;\n        case MixBlend.first:\n          const light = slot.color;\n          const dark = slot.darkColor;\n          const setupLight = slot.data.color;\n          const setupDark = slot.data.darkColor;\n          light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);\n          dark.add((setupDark.r - dark.r) * alpha, (setupDark.g - dark.g) * alpha, (setupDark.b - dark.b) * alpha, 0);\n      }\n      return;\n    }\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n    let r2 = 0;\n    let g2 = 0;\n    let b2 = 0;\n    if (time >= frames[frames.length - _TwoColorTimeline.ENTRIES]) {\n      const i = frames.length;\n      r = frames[i + _TwoColorTimeline.PREV_R];\n      g = frames[i + _TwoColorTimeline.PREV_G];\n      b = frames[i + _TwoColorTimeline.PREV_B];\n      a = frames[i + _TwoColorTimeline.PREV_A];\n      r2 = frames[i + _TwoColorTimeline.PREV_R2];\n      g2 = frames[i + _TwoColorTimeline.PREV_G2];\n      b2 = frames[i + _TwoColorTimeline.PREV_B2];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _TwoColorTimeline.ENTRIES);\n      r = frames[frame + _TwoColorTimeline.PREV_R];\n      g = frames[frame + _TwoColorTimeline.PREV_G];\n      b = frames[frame + _TwoColorTimeline.PREV_B];\n      a = frames[frame + _TwoColorTimeline.PREV_A];\n      r2 = frames[frame + _TwoColorTimeline.PREV_R2];\n      g2 = frames[frame + _TwoColorTimeline.PREV_G2];\n      b2 = frames[frame + _TwoColorTimeline.PREV_B2];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / _TwoColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _TwoColorTimeline.PREV_TIME] - frameTime));\n      r += (frames[frame + _TwoColorTimeline.R] - r) * percent;\n      g += (frames[frame + _TwoColorTimeline.G] - g) * percent;\n      b += (frames[frame + _TwoColorTimeline.B] - b) * percent;\n      a += (frames[frame + _TwoColorTimeline.A] - a) * percent;\n      r2 += (frames[frame + _TwoColorTimeline.R2] - r2) * percent;\n      g2 += (frames[frame + _TwoColorTimeline.G2] - g2) * percent;\n      b2 += (frames[frame + _TwoColorTimeline.B2] - b2) * percent;\n    }\n    if (alpha == 1) {\n      slot.color.set(r, g, b, a);\n      slot.darkColor.set(r2, g2, b2, 1);\n    } else {\n      const light = slot.color;\n      const dark = slot.darkColor;\n      if (blend == MixBlend.setup) {\n        light.setFromColor(slot.data.color);\n        dark.setFromColor(slot.data.darkColor);\n      }\n      light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n      dark.add((r2 - dark.r) * alpha, (g2 - dark.g) * alpha, (b2 - dark.b) * alpha, 0);\n    }\n  }\n};\nlet TwoColorTimeline = _TwoColorTimeline;\nTwoColorTimeline.ENTRIES = 8;\nTwoColorTimeline.PREV_TIME = -8;\nTwoColorTimeline.PREV_R = -7;\nTwoColorTimeline.PREV_G = -6;\nTwoColorTimeline.PREV_B = -5;\nTwoColorTimeline.PREV_A = -4;\nTwoColorTimeline.PREV_R2 = -3;\nTwoColorTimeline.PREV_G2 = -2;\nTwoColorTimeline.PREV_B2 = -1;\nTwoColorTimeline.R = 1;\nTwoColorTimeline.G = 2;\nTwoColorTimeline.B = 3;\nTwoColorTimeline.A = 4;\nTwoColorTimeline.R2 = 5;\nTwoColorTimeline.G2 = 6;\nTwoColorTimeline.B2 = 7;\nclass AttachmentTimeline {\n  constructor(frameCount) {\n    this.type = \"AttachmentTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.attachmentNames = new Array(frameCount);\n  }\n  getPropertyId() {\n    return (4 /* attachment */ << 24) + this.slotIndex;\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the attachment name for the specified key frame. */\n  setFrame(frameIndex, time, attachmentName) {\n    this.data.push({ frameIndex, time, attachmentName });\n    this.frames[frameIndex] = time;\n    this.attachmentNames[frameIndex] = attachmentName;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    if (direction == MixDirection.mixOut) {\n      if (blend == MixBlend.setup)\n        this.setAttachment(skeleton, slot, slot.data.attachmentName);\n      return;\n    }\n    const frames = this.frames;\n    if (time < frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first)\n        this.setAttachment(skeleton, slot, slot.data.attachmentName);\n      return;\n    }\n    let frameIndex = 0;\n    if (time >= frames[frames.length - 1])\n      frameIndex = frames.length - 1;\n    else\n      frameIndex = Animation.binarySearch(frames, time, 1) - 1;\n    const attachmentName = this.attachmentNames[frameIndex];\n    skeleton.slots[this.slotIndex].setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n  }\n  setAttachment(skeleton, slot, attachmentName) {\n    slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n  }\n}\nlet zeros = null;\nclass DeformTimeline extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"DeformTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.frameVertices = new Array(frameCount);\n    if (zeros == null)\n      zeros = Utils.newFloatArray(64);\n  }\n  getPropertyId() {\n    return (6 /* deform */ << 27) + Number(this.attachment.id) + this.slotIndex;\n  }\n  /** Sets the time in seconds and the vertices for the specified key frame.\n   * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n  setFrame(frameIndex, time, vertices, skin) {\n    this.data.push({ frameIndex, time, vertices, skin });\n    this.frames[frameIndex] = time;\n    this.frameVertices[frameIndex] = vertices;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const slotAttachment = slot.getAttachment();\n    if (!(slotAttachment instanceof VertexAttachment) || !(slotAttachment.deformAttachment == this.attachment))\n      return;\n    const deformArray = slot.deform || [];\n    if (deformArray.length == 0)\n      blend = MixBlend.setup;\n    const frameVertices = this.frameVertices;\n    const vertexCount = frameVertices[0].length;\n    const frames = this.frames;\n    if (time < frames[0]) {\n      const vertexAttachment = slotAttachment;\n      switch (blend) {\n        case MixBlend.setup:\n          deformArray.length = 0;\n          return;\n        case MixBlend.first:\n          if (alpha == 1) {\n            deformArray.length = 0;\n            break;\n          }\n          const deform2 = Utils.setArraySize(deformArray, vertexCount);\n          if (vertexAttachment.bones == null) {\n            const setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++)\n              deform2[i] += (setupVertices[i] - deform2[i]) * alpha;\n          } else {\n            alpha = 1 - alpha;\n            for (let i = 0; i < vertexCount; i++)\n              deform2[i] *= alpha;\n          }\n      }\n      return;\n    }\n    const deform = Utils.setArraySize(deformArray, vertexCount);\n    if (time >= frames[frames.length - 1]) {\n      const lastVertices = frameVertices[frames.length - 1];\n      if (alpha == 1) {\n        if (blend == MixBlend.add) {\n          const vertexAttachment = slotAttachment;\n          if (vertexAttachment.bones == null) {\n            const setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              deform[i] += lastVertices[i] - setupVertices[i];\n            }\n          } else {\n            for (let i = 0; i < vertexCount; i++)\n              deform[i] += lastVertices[i];\n          }\n        } else {\n          Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup: {\n            const vertexAttachment2 = slotAttachment;\n            if (vertexAttachment2.bones == null) {\n              const setupVertices = vertexAttachment2.vertices;\n              for (let i = 0; i < vertexCount; i++) {\n                const setup = setupVertices[i];\n                deform[i] = setup + (lastVertices[i] - setup) * alpha;\n              }\n            } else {\n              for (let i = 0; i < vertexCount; i++)\n                deform[i] = lastVertices[i] * alpha;\n            }\n            break;\n          }\n          case MixBlend.first:\n          case MixBlend.replace:\n            for (let i = 0; i < vertexCount; i++)\n              deform[i] += (lastVertices[i] - deform[i]) * alpha;\n            break;\n          case MixBlend.add:\n            const vertexAttachment = slotAttachment;\n            if (vertexAttachment.bones == null) {\n              const setupVertices = vertexAttachment.vertices;\n              for (let i = 0; i < vertexCount; i++) {\n                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n              }\n            } else {\n              for (let i = 0; i < vertexCount; i++)\n                deform[i] += lastVertices[i] * alpha;\n            }\n        }\n      }\n      return;\n    }\n    const frame = Animation.binarySearch(frames, time);\n    const prevVertices = frameVertices[frame - 1];\n    const nextVertices = frameVertices[frame];\n    const frameTime = frames[frame];\n    const percent = this.getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime));\n    if (alpha == 1) {\n      if (blend == MixBlend.add) {\n        const vertexAttachment = slotAttachment;\n        if (vertexAttachment.bones == null) {\n          const setupVertices = vertexAttachment.vertices;\n          for (let i = 0; i < vertexCount; i++) {\n            const prev = prevVertices[i];\n            deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n          }\n        } else {\n          for (let i = 0; i < vertexCount; i++) {\n            const prev = prevVertices[i];\n            deform[i] += prev + (nextVertices[i] - prev) * percent;\n          }\n        }\n      } else {\n        for (let i = 0; i < vertexCount; i++) {\n          const prev = prevVertices[i];\n          deform[i] = prev + (nextVertices[i] - prev) * percent;\n        }\n      }\n    } else {\n      switch (blend) {\n        case MixBlend.setup: {\n          const vertexAttachment2 = slotAttachment;\n          if (vertexAttachment2.bones == null) {\n            const setupVertices = vertexAttachment2.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              const setup = setupVertices[i];\n              deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n            }\n          } else {\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n            }\n          }\n          break;\n        }\n        case MixBlend.first:\n        case MixBlend.replace:\n          for (let i = 0; i < vertexCount; i++) {\n            const prev = prevVertices[i];\n            deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n          }\n          break;\n        case MixBlend.add:\n          const vertexAttachment = slotAttachment;\n          if (vertexAttachment.bones == null) {\n            const setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n            }\n          } else {\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n            }\n          }\n      }\n    }\n  }\n}\nclass EventTimeline {\n  constructor(frameCount) {\n    this.type = \"EventTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.events = new Array(frameCount);\n  }\n  getPropertyId() {\n    return 7 /* event */ << 24;\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the event for the specified key frame. */\n  setFrame(frameIndex, event) {\n    this.data.push({ frameIndex, event });\n    this.frames[frameIndex] = event.time;\n    this.events[frameIndex] = event;\n  }\n  /** Fires events for frames > `lastTime` and <= `time`. */\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    if (firedEvents == null)\n      return;\n    const frames = this.frames;\n    const frameCount = this.frames.length;\n    if (lastTime > time) {\n      this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n      lastTime = -1;\n    } else if (lastTime >= frames[frameCount - 1])\n      return;\n    if (time < frames[0])\n      return;\n    let frame = 0;\n    if (lastTime < frames[0])\n      frame = 0;\n    else {\n      frame = Animation.binarySearch(frames, lastTime);\n      const frameTime = frames[frame];\n      while (frame > 0) {\n        if (frames[frame - 1] != frameTime)\n          break;\n        frame--;\n      }\n    }\n    for (; frame < frameCount && time >= frames[frame]; frame++)\n      firedEvents.push(this.events[frame]);\n  }\n}\nclass DrawOrderTimeline {\n  constructor(frameCount) {\n    this.type = \"DrawOrderTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.drawOrders = new Array(frameCount);\n  }\n  getPropertyId() {\n    return 8 /* drawOrder */ << 24;\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the draw order for the specified key frame.\n   * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n   *           draw order. */\n  setFrame(frameIndex, time, drawOrder) {\n    this.data.push({ frameIndex, time, drawOrder });\n    this.frames[frameIndex] = time;\n    this.drawOrders[frameIndex] = drawOrder;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const drawOrder = skeleton.drawOrder;\n    const slots = skeleton.slots;\n    if (direction == MixDirection.mixOut && blend == MixBlend.setup) {\n      Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n      return;\n    }\n    const frames = this.frames;\n    if (time < frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first)\n        Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n      return;\n    }\n    let frame = 0;\n    if (time >= frames[frames.length - 1])\n      frame = frames.length - 1;\n    else\n      frame = Animation.binarySearch(frames, time) - 1;\n    const drawOrderToSetupIndex = this.drawOrders[frame];\n    if (drawOrderToSetupIndex == null)\n      Utils.arrayCopy(slots, 0, drawOrder, 0, slots.length);\n    else {\n      for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n        drawOrder[i] = slots[drawOrderToSetupIndex[i]];\n    }\n  }\n}\nconst _IkConstraintTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"IkConstraintTimeline\";\n    // time, mix, softness, bendDirection, compress, stretch, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _IkConstraintTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (9 /* ikConstraint */ << 24) + this.ikConstraintIndex;\n  }\n  /** Sets the time, mix and bend direction of the specified keyframe. */\n  setFrame(frameIndex, time, mix, bendDirection) {\n    this.data.push({ frameIndex, time, mix, bendDirection });\n    frameIndex *= _IkConstraintTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _IkConstraintTimeline.MIX] = mix;\n    this.frames[frameIndex + _IkConstraintTimeline.BEND_DIRECTION] = bendDirection;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.ikConstraints[this.ikConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.mix = constraint.data.mix;\n          constraint.softness = constraint.data.softness;\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n          return;\n        case MixBlend.first:\n          constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n          constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n      }\n      return;\n    }\n    if (time >= frames[frames.length - _IkConstraintTimeline.ENTRIES]) {\n      if (blend === MixBlend.setup) {\n        constraint.mix = constraint.data.mix + (frames[frames.length + _IkConstraintTimeline.PREV_MIX] - constraint.data.mix) * alpha;\n        constraint.softness = constraint.data.softness + (frames[frames.length + _IkConstraintTimeline.PREV_SOFTNESS] - constraint.data.softness) * alpha;\n        if (direction === MixDirection.mixOut) {\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n        } else {\n          constraint.bendDirection = frames[frames.length + _IkConstraintTimeline.PREV_BEND_DIRECTION];\n          constraint.compress = frames[frames.length + _IkConstraintTimeline.PREV_COMPRESS] !== 0;\n          constraint.stretch = frames[frames.length + _IkConstraintTimeline.PREV_STRETCH] !== 0;\n        }\n      } else {\n        constraint.mix += (frames[frames.length + _IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;\n        constraint.softness += (frames[frames.length + _IkConstraintTimeline.PREV_SOFTNESS] - constraint.softness) * alpha;\n        if (direction === MixDirection.mixIn) {\n          constraint.bendDirection = frames[frames.length + _IkConstraintTimeline.PREV_BEND_DIRECTION];\n          constraint.compress = frames[frames.length + _IkConstraintTimeline.PREV_COMPRESS] !== 0;\n          constraint.stretch = frames[frames.length + _IkConstraintTimeline.PREV_STRETCH] !== 0;\n        }\n      }\n      return;\n    }\n    const frame = Animation.binarySearch(frames, time, _IkConstraintTimeline.ENTRIES);\n    const mix = frames[frame + _IkConstraintTimeline.PREV_MIX];\n    const frameTime = frames[frame];\n    const percent = this.getCurvePercent(frame / _IkConstraintTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _IkConstraintTimeline.PREV_TIME] - frameTime));\n    constraint.mix += (mix + (frames[frame + _IkConstraintTimeline.MIX] - mix) * percent - constraint.mix) * alpha;\n    constraint.bendDirection = Math.floor(frames[frame + _IkConstraintTimeline.PREV_BEND_DIRECTION]);\n  }\n};\nlet IkConstraintTimeline = _IkConstraintTimeline;\nIkConstraintTimeline.ENTRIES = 6;\nIkConstraintTimeline.PREV_TIME = -6;\nIkConstraintTimeline.PREV_MIX = -5;\nIkConstraintTimeline.PREV_SOFTNESS = -4;\nIkConstraintTimeline.PREV_BEND_DIRECTION = -3;\nIkConstraintTimeline.PREV_COMPRESS = -2;\nIkConstraintTimeline.PREV_STRETCH = -1;\nIkConstraintTimeline.MIX = 1;\nIkConstraintTimeline.SOFTNESS = 2;\nIkConstraintTimeline.BEND_DIRECTION = 3;\nIkConstraintTimeline.COMPRESS = 4;\nIkConstraintTimeline.STRETCH = 5;\nconst _TransformConstraintTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"TransformConstraintTimeline\";\n    // time, rotate mix, translate mix, scale mix, shear mix, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _TransformConstraintTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (10 /* transformConstraint */ << 24) + this.transformConstraintIndex;\n  }\n  /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n  setFrame(frameIndex, time, rotateMix, translateMix, scaleMix, shearMix) {\n    this.data.push({ frameIndex, time, rotateMix, translateMix, scaleMix, shearMix });\n    frameIndex *= _TransformConstraintTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _TransformConstraintTimeline.ROTATE] = rotateMix;\n    this.frames[frameIndex + _TransformConstraintTimeline.TRANSLATE] = translateMix;\n    this.frames[frameIndex + _TransformConstraintTimeline.SCALE] = scaleMix;\n    this.frames[frameIndex + _TransformConstraintTimeline.SHEAR] = shearMix;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.transformConstraints[this.transformConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      const data = constraint.data;\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.rotateMix = data.rotateMix;\n          constraint.translateMix = data.translateMix;\n          constraint.scaleMix = data.scaleMix;\n          constraint.shearMix = data.shearMix;\n          return;\n        case MixBlend.first:\n          constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;\n          constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;\n          constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;\n          constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha;\n      }\n      return;\n    }\n    let rotate = 0;\n    let translate = 0;\n    let scale = 0;\n    let shear = 0;\n    if (time >= frames[frames.length - _TransformConstraintTimeline.ENTRIES]) {\n      const i = frames.length;\n      rotate = frames[i + _TransformConstraintTimeline.PREV_ROTATE];\n      translate = frames[i + _TransformConstraintTimeline.PREV_TRANSLATE];\n      scale = frames[i + _TransformConstraintTimeline.PREV_SCALE];\n      shear = frames[i + _TransformConstraintTimeline.PREV_SHEAR];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _TransformConstraintTimeline.ENTRIES);\n      rotate = frames[frame + _TransformConstraintTimeline.PREV_ROTATE];\n      translate = frames[frame + _TransformConstraintTimeline.PREV_TRANSLATE];\n      scale = frames[frame + _TransformConstraintTimeline.PREV_SCALE];\n      shear = frames[frame + _TransformConstraintTimeline.PREV_SHEAR];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / _TransformConstraintTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + _TransformConstraintTimeline.PREV_TIME] - frameTime)\n      );\n      rotate += (frames[frame + _TransformConstraintTimeline.ROTATE] - rotate) * percent;\n      translate += (frames[frame + _TransformConstraintTimeline.TRANSLATE] - translate) * percent;\n      scale += (frames[frame + _TransformConstraintTimeline.SCALE] - scale) * percent;\n      shear += (frames[frame + _TransformConstraintTimeline.SHEAR] - shear) * percent;\n    }\n    if (blend == MixBlend.setup) {\n      const data = constraint.data;\n      constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;\n      constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;\n      constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;\n      constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;\n    } else {\n      constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n      constraint.translateMix += (translate - constraint.translateMix) * alpha;\n      constraint.scaleMix += (scale - constraint.scaleMix) * alpha;\n      constraint.shearMix += (shear - constraint.shearMix) * alpha;\n    }\n  }\n};\nlet TransformConstraintTimeline = _TransformConstraintTimeline;\nTransformConstraintTimeline.ENTRIES = 5;\nTransformConstraintTimeline.PREV_TIME = -5;\nTransformConstraintTimeline.PREV_ROTATE = -4;\nTransformConstraintTimeline.PREV_TRANSLATE = -3;\nTransformConstraintTimeline.PREV_SCALE = -2;\nTransformConstraintTimeline.PREV_SHEAR = -1;\nTransformConstraintTimeline.ROTATE = 1;\nTransformConstraintTimeline.TRANSLATE = 2;\nTransformConstraintTimeline.SCALE = 3;\nTransformConstraintTimeline.SHEAR = 4;\nconst _PathConstraintPositionTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"PathConstraintPositionTimeline\";\n    // time, position, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _PathConstraintPositionTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (11 /* pathConstraintPosition */ << 24) + this.pathConstraintIndex;\n  }\n  /** Sets the time in seconds and path constraint position for the specified key frame. */\n  setFrame(frameIndex, time, value) {\n    this.data.push({ frameIndex, time, value });\n    frameIndex *= _PathConstraintPositionTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _PathConstraintPositionTimeline.VALUE] = value;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.position = constraint.data.position;\n          return;\n        case MixBlend.first:\n          constraint.position += (constraint.data.position - constraint.position) * alpha;\n      }\n      return;\n    }\n    let position = 0;\n    if (time >= frames[frames.length - _PathConstraintPositionTimeline.ENTRIES])\n      position = frames[frames.length + _PathConstraintPositionTimeline.PREV_VALUE];\n    else {\n      const frame = Animation.binarySearch(frames, time, _PathConstraintPositionTimeline.ENTRIES);\n      position = frames[frame + _PathConstraintPositionTimeline.PREV_VALUE];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / _PathConstraintPositionTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + _PathConstraintPositionTimeline.PREV_TIME] - frameTime)\n      );\n      position += (frames[frame + _PathConstraintPositionTimeline.VALUE] - position) * percent;\n    }\n    if (blend == MixBlend.setup)\n      constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\n    else\n      constraint.position += (position - constraint.position) * alpha;\n  }\n};\nlet PathConstraintPositionTimeline = _PathConstraintPositionTimeline;\nPathConstraintPositionTimeline.ENTRIES = 2;\nPathConstraintPositionTimeline.PREV_TIME = -2;\nPathConstraintPositionTimeline.PREV_VALUE = -1;\nPathConstraintPositionTimeline.VALUE = 1;\nclass PathConstraintSpacingTimeline extends PathConstraintPositionTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"PathConstraintSpacingTimeline\";\n  }\n  getPropertyId() {\n    return (12 /* pathConstraintSpacing */ << 24) + this.pathConstraintIndex;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.spacing = constraint.data.spacing;\n          return;\n        case MixBlend.first:\n          constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\n      }\n      return;\n    }\n    let spacing = 0;\n    if (time >= frames[frames.length - PathConstraintSpacingTimeline.ENTRIES])\n      spacing = frames[frames.length + PathConstraintSpacingTimeline.PREV_VALUE];\n    else {\n      const frame = Animation.binarySearch(frames, time, PathConstraintSpacingTimeline.ENTRIES);\n      spacing = frames[frame + PathConstraintSpacingTimeline.PREV_VALUE];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / PathConstraintSpacingTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + PathConstraintSpacingTimeline.PREV_TIME] - frameTime)\n      );\n      spacing += (frames[frame + PathConstraintSpacingTimeline.VALUE] - spacing) * percent;\n    }\n    if (blend == MixBlend.setup)\n      constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\n    else\n      constraint.spacing += (spacing - constraint.spacing) * alpha;\n  }\n}\nconst _PathConstraintMixTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"PathConstraintMixTimeline\";\n    // time, rotate mix, translate mix, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _PathConstraintMixTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (13 /* pathConstraintMix */ << 24) + this.pathConstraintIndex;\n  }\n  /** The time in seconds, rotate mix, and translate mix for the specified key frame. */\n  setFrame(frameIndex, time, rotateMix, translateMix) {\n    this.data.push({ frameIndex, time, rotateMix, translateMix });\n    frameIndex *= _PathConstraintMixTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _PathConstraintMixTimeline.ROTATE] = rotateMix;\n    this.frames[frameIndex + _PathConstraintMixTimeline.TRANSLATE] = translateMix;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.rotateMix = constraint.data.rotateMix;\n          constraint.translateMix = constraint.data.translateMix;\n          return;\n        case MixBlend.first:\n          constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha;\n          constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha;\n      }\n      return;\n    }\n    let rotate = 0;\n    let translate = 0;\n    if (time >= frames[frames.length - _PathConstraintMixTimeline.ENTRIES]) {\n      rotate = frames[frames.length + _PathConstraintMixTimeline.PREV_ROTATE];\n      translate = frames[frames.length + _PathConstraintMixTimeline.PREV_TRANSLATE];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _PathConstraintMixTimeline.ENTRIES);\n      rotate = frames[frame + _PathConstraintMixTimeline.PREV_ROTATE];\n      translate = frames[frame + _PathConstraintMixTimeline.PREV_TRANSLATE];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / _PathConstraintMixTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + _PathConstraintMixTimeline.PREV_TIME] - frameTime)\n      );\n      rotate += (frames[frame + _PathConstraintMixTimeline.ROTATE] - rotate) * percent;\n      translate += (frames[frame + _PathConstraintMixTimeline.TRANSLATE] - translate) * percent;\n    }\n    if (blend == MixBlend.setup) {\n      constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;\n      constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha;\n    } else {\n      constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n      constraint.translateMix += (translate - constraint.translateMix) * alpha;\n    }\n  }\n};\nlet PathConstraintMixTimeline = _PathConstraintMixTimeline;\nPathConstraintMixTimeline.ENTRIES = 3;\nPathConstraintMixTimeline.PREV_TIME = -3;\nPathConstraintMixTimeline.PREV_ROTATE = -2;\nPathConstraintMixTimeline.PREV_TRANSLATE = -1;\nPathConstraintMixTimeline.ROTATE = 1;\nPathConstraintMixTimeline.TRANSLATE = 2;\n\nexport { Animation, AttachmentTimeline, ColorTimeline, CurveTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, IkConstraintTimeline, PathConstraintMixTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, RotateTimeline, ScaleTimeline, ShearTimeline, TimelineType, TransformConstraintTimeline, TranslateTimeline, TwoColorTimeline };\n//# sourceMappingURL=Animation.mjs.map\n","import { IntSet, Pool, MixBlend, Utils, MixDirection, MathUtils } from '@pixi-spine/base';\nimport { Animation, AttachmentTimeline, RotateTimeline, DrawOrderTimeline, EventTimeline } from './Animation.mjs';\n\nconst _AnimationState = class {\n  constructor(data) {\n    /** The list of tracks that currently have animations, which may contain null entries. */\n    this.tracks = new Array();\n    /** Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\n     * or faster. Defaults to 1.\n     *\n     * See TrackEntry {@link TrackEntry#timeScale} for affecting a single animation. */\n    this.timeScale = 1;\n    this.unkeyedState = 0;\n    this.events = new Array();\n    this.listeners = new Array();\n    this.queue = new EventQueue(this);\n    this.propertyIDs = new IntSet();\n    this.animationsChanged = false;\n    this.trackEntryPool = new Pool(() => new TrackEntry());\n    this.data = data;\n  }\n  /** Increments each track entry {@link TrackEntry#trackTime()}, setting queued animations as current if needed. */\n  update(delta) {\n    delta *= this.timeScale;\n    const tracks = this.tracks;\n    for (let i = 0, n = tracks.length; i < n; i++) {\n      const current = tracks[i];\n      if (current == null)\n        continue;\n      current.animationLast = current.nextAnimationLast;\n      current.trackLast = current.nextTrackLast;\n      let currentDelta = delta * current.timeScale;\n      if (current.delay > 0) {\n        current.delay -= currentDelta;\n        if (current.delay > 0)\n          continue;\n        currentDelta = -current.delay;\n        current.delay = 0;\n      }\n      let next = current.next;\n      if (next != null) {\n        const nextTime = current.trackLast - next.delay;\n        if (nextTime >= 0) {\n          next.delay = 0;\n          next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;\n          current.trackTime += currentDelta;\n          this.setCurrent(i, next, true);\n          while (next.mixingFrom != null) {\n            next.mixTime += delta;\n            next = next.mixingFrom;\n          }\n          continue;\n        }\n      } else if (current.trackLast >= current.trackEnd && current.mixingFrom == null) {\n        tracks[i] = null;\n        this.queue.end(current);\n        this.disposeNext(current);\n        continue;\n      }\n      if (current.mixingFrom != null && this.updateMixingFrom(current, delta)) {\n        let from = current.mixingFrom;\n        current.mixingFrom = null;\n        if (from != null)\n          from.mixingTo = null;\n        while (from != null) {\n          this.queue.end(from);\n          from = from.mixingFrom;\n        }\n      }\n      current.trackTime += currentDelta;\n    }\n    this.queue.drain();\n  }\n  /** Returns true when all mixing from entries are complete. */\n  updateMixingFrom(to, delta) {\n    const from = to.mixingFrom;\n    if (from == null)\n      return true;\n    const finished = this.updateMixingFrom(from, delta);\n    from.animationLast = from.nextAnimationLast;\n    from.trackLast = from.nextTrackLast;\n    if (to.mixTime > 0 && to.mixTime >= to.mixDuration) {\n      if (from.totalAlpha == 0 || to.mixDuration == 0) {\n        to.mixingFrom = from.mixingFrom;\n        if (from.mixingFrom != null)\n          from.mixingFrom.mixingTo = to;\n        to.interruptAlpha = from.interruptAlpha;\n        this.queue.end(from);\n      }\n      return finished;\n    }\n    from.trackTime += delta * from.timeScale;\n    to.mixTime += delta;\n    return false;\n  }\n  /** Poses the skeleton using the track entry animations. There are no side effects other than invoking listeners, so the\n   * animation state can be applied to multiple skeletons to pose them identically.\n   * @returns True if any animations were applied. */\n  apply(skeleton) {\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    if (this.animationsChanged)\n      this._animationsChanged();\n    const events = this.events;\n    const tracks = this.tracks;\n    let applied = false;\n    for (let i = 0, n = tracks.length; i < n; i++) {\n      const current = tracks[i];\n      if (current == null || current.delay > 0)\n        continue;\n      applied = true;\n      const blend = i == 0 ? MixBlend.first : current.mixBlend;\n      let mix = current.alpha;\n      if (current.mixingFrom != null)\n        mix *= this.applyMixingFrom(current, skeleton, blend);\n      else if (current.trackTime >= current.trackEnd && current.next == null)\n        mix = 0;\n      const animationLast = current.animationLast;\n      const animationTime = current.getAnimationTime();\n      const timelineCount = current.animation.timelines.length;\n      const timelines = current.animation.timelines;\n      if (i == 0 && mix == 1 || blend == MixBlend.add) {\n        for (let ii = 0; ii < timelineCount; ii++) {\n          Utils.webkit602BugfixHelper(mix, blend);\n          const timeline = timelines[ii];\n          if (timeline instanceof AttachmentTimeline)\n            this.applyAttachmentTimeline(timeline, skeleton, animationTime, blend, true);\n          else\n            timeline.apply(skeleton, animationLast, animationTime, events, mix, blend, MixDirection.mixIn);\n        }\n      } else {\n        const timelineMode = current.timelineMode;\n        const firstFrame = current.timelinesRotation.length == 0;\n        if (firstFrame)\n          Utils.setArraySize(current.timelinesRotation, timelineCount << 1, null);\n        const timelinesRotation = current.timelinesRotation;\n        for (let ii = 0; ii < timelineCount; ii++) {\n          const timeline = timelines[ii];\n          const timelineBlend = timelineMode[ii] == _AnimationState.SUBSEQUENT ? blend : MixBlend.setup;\n          if (timeline instanceof RotateTimeline) {\n            this.applyRotateTimeline(timeline, skeleton, animationTime, mix, timelineBlend, timelinesRotation, ii << 1, firstFrame);\n          } else if (timeline instanceof AttachmentTimeline) {\n            this.applyAttachmentTimeline(timeline, skeleton, animationTime, blend, true);\n          } else {\n            Utils.webkit602BugfixHelper(mix, blend);\n            timeline.apply(skeleton, animationLast, animationTime, events, mix, timelineBlend, MixDirection.mixIn);\n          }\n        }\n      }\n      this.queueEvents(current, animationTime);\n      events.length = 0;\n      current.nextAnimationLast = animationTime;\n      current.nextTrackLast = current.trackTime;\n    }\n    const setupState = this.unkeyedState + _AnimationState.SETUP;\n    const slots = skeleton.slots;\n    for (let i = 0, n = skeleton.slots.length; i < n; i++) {\n      const slot = slots[i];\n      if (slot.attachmentState == setupState) {\n        const attachmentName = slot.data.attachmentName;\n        slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n      }\n    }\n    this.unkeyedState += 2;\n    this.queue.drain();\n    return applied;\n  }\n  applyMixingFrom(to, skeleton, blend) {\n    const from = to.mixingFrom;\n    if (from.mixingFrom != null)\n      this.applyMixingFrom(from, skeleton, blend);\n    let mix = 0;\n    if (to.mixDuration == 0) {\n      mix = 1;\n      if (blend == MixBlend.first)\n        blend = MixBlend.setup;\n    } else {\n      mix = to.mixTime / to.mixDuration;\n      if (mix > 1)\n        mix = 1;\n      if (blend != MixBlend.first)\n        blend = from.mixBlend;\n    }\n    const events = mix < from.eventThreshold ? this.events : null;\n    const attachments = mix < from.attachmentThreshold;\n    const drawOrder = mix < from.drawOrderThreshold;\n    const animationLast = from.animationLast;\n    const animationTime = from.getAnimationTime();\n    const timelineCount = from.animation.timelines.length;\n    const timelines = from.animation.timelines;\n    const alphaHold = from.alpha * to.interruptAlpha;\n    const alphaMix = alphaHold * (1 - mix);\n    if (blend == MixBlend.add) {\n      for (let i = 0; i < timelineCount; i++)\n        timelines[i].apply(skeleton, animationLast, animationTime, events, alphaMix, blend, MixDirection.mixOut);\n    } else {\n      const timelineMode = from.timelineMode;\n      const timelineHoldMix = from.timelineHoldMix;\n      const firstFrame = from.timelinesRotation.length == 0;\n      if (firstFrame)\n        Utils.setArraySize(from.timelinesRotation, timelineCount << 1, null);\n      const timelinesRotation = from.timelinesRotation;\n      from.totalAlpha = 0;\n      for (let i = 0; i < timelineCount; i++) {\n        const timeline = timelines[i];\n        let direction = MixDirection.mixOut;\n        let timelineBlend;\n        let alpha = 0;\n        switch (timelineMode[i]) {\n          case _AnimationState.SUBSEQUENT:\n            if (!drawOrder && timeline instanceof DrawOrderTimeline)\n              continue;\n            timelineBlend = blend;\n            alpha = alphaMix;\n            break;\n          case _AnimationState.FIRST:\n            timelineBlend = MixBlend.setup;\n            alpha = alphaMix;\n            break;\n          case _AnimationState.HOLD_SUBSEQUENT:\n            timelineBlend = blend;\n            alpha = alphaHold;\n            break;\n          case _AnimationState.HOLD_FIRST:\n            timelineBlend = MixBlend.setup;\n            alpha = alphaHold;\n            break;\n          default:\n            timelineBlend = MixBlend.setup;\n            const holdMix = timelineHoldMix[i];\n            alpha = alphaHold * Math.max(0, 1 - holdMix.mixTime / holdMix.mixDuration);\n            break;\n        }\n        from.totalAlpha += alpha;\n        if (timeline instanceof RotateTimeline)\n          this.applyRotateTimeline(timeline, skeleton, animationTime, alpha, timelineBlend, timelinesRotation, i << 1, firstFrame);\n        else if (timeline instanceof AttachmentTimeline)\n          this.applyAttachmentTimeline(timeline, skeleton, animationTime, timelineBlend, attachments);\n        else {\n          Utils.webkit602BugfixHelper(alpha, blend);\n          if (drawOrder && timeline instanceof DrawOrderTimeline && timelineBlend == MixBlend.setup)\n            direction = MixDirection.mixIn;\n          timeline.apply(skeleton, animationLast, animationTime, events, alpha, timelineBlend, direction);\n        }\n      }\n    }\n    if (to.mixDuration > 0)\n      this.queueEvents(from, animationTime);\n    this.events.length = 0;\n    from.nextAnimationLast = animationTime;\n    from.nextTrackLast = from.trackTime;\n    return mix;\n  }\n  applyAttachmentTimeline(timeline, skeleton, time, blend, attachments) {\n    const slot = skeleton.slots[timeline.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const frames = timeline.frames;\n    if (time < frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first)\n        this.setAttachment(skeleton, slot, slot.data.attachmentName, attachments);\n    } else {\n      let frameIndex;\n      if (time >= frames[frames.length - 1])\n        frameIndex = frames.length - 1;\n      else\n        frameIndex = Animation.binarySearch(frames, time) - 1;\n      this.setAttachment(skeleton, slot, timeline.attachmentNames[frameIndex], attachments);\n    }\n    if (slot.attachmentState <= this.unkeyedState)\n      slot.attachmentState = this.unkeyedState + _AnimationState.SETUP;\n  }\n  setAttachment(skeleton, slot, attachmentName, attachments) {\n    slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(slot.data.index, attachmentName));\n    if (attachments)\n      slot.attachmentState = this.unkeyedState + _AnimationState.CURRENT;\n  }\n  applyRotateTimeline(timeline, skeleton, time, alpha, blend, timelinesRotation, i, firstFrame) {\n    if (firstFrame)\n      timelinesRotation[i] = 0;\n    if (alpha == 1) {\n      timeline.apply(skeleton, 0, time, null, 1, blend, MixDirection.mixIn);\n      return;\n    }\n    const rotateTimeline = timeline;\n    const frames = rotateTimeline.frames;\n    const bone = skeleton.bones[rotateTimeline.boneIndex];\n    if (!bone.active)\n      return;\n    let r1 = 0;\n    let r2 = 0;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation;\n        default:\n          return;\n        case MixBlend.first:\n          r1 = bone.rotation;\n          r2 = bone.data.rotation;\n      }\n    } else {\n      r1 = blend == MixBlend.setup ? bone.data.rotation : bone.rotation;\n      if (time >= frames[frames.length - RotateTimeline.ENTRIES])\n        r2 = bone.data.rotation + frames[frames.length + RotateTimeline.PREV_ROTATION];\n      else {\n        const frame = Animation.binarySearch(frames, time, RotateTimeline.ENTRIES);\n        const prevRotation = frames[frame + RotateTimeline.PREV_ROTATION];\n        const frameTime = frames[frame];\n        const percent = rotateTimeline.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + RotateTimeline.PREV_TIME] - frameTime));\n        r2 = frames[frame + RotateTimeline.ROTATION] - prevRotation;\n        r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;\n        r2 = prevRotation + r2 * percent + bone.data.rotation;\n        r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;\n      }\n    }\n    let total = 0;\n    let diff = r2 - r1;\n    diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;\n    if (diff == 0) {\n      total = timelinesRotation[i];\n    } else {\n      let lastTotal = 0;\n      let lastDiff = 0;\n      if (firstFrame) {\n        lastTotal = 0;\n        lastDiff = diff;\n      } else {\n        lastTotal = timelinesRotation[i];\n        lastDiff = timelinesRotation[i + 1];\n      }\n      const current = diff > 0;\n      let dir = lastTotal >= 0;\n      if (MathUtils.signum(lastDiff) != MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {\n        if (Math.abs(lastTotal) > 180)\n          lastTotal += 360 * MathUtils.signum(lastTotal);\n        dir = current;\n      }\n      total = diff + lastTotal - lastTotal % 360;\n      if (dir != current)\n        total += 360 * MathUtils.signum(lastTotal);\n      timelinesRotation[i] = total;\n    }\n    timelinesRotation[i + 1] = diff;\n    r1 += total * alpha;\n    bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;\n  }\n  queueEvents(entry, animationTime) {\n    const animationStart = entry.animationStart;\n    const animationEnd = entry.animationEnd;\n    const duration = animationEnd - animationStart;\n    const trackLastWrapped = entry.trackLast % duration;\n    const events = this.events;\n    let i = 0;\n    const n = events.length;\n    for (; i < n; i++) {\n      const event = events[i];\n      if (event.time < trackLastWrapped)\n        break;\n      if (event.time > animationEnd)\n        continue;\n      this.queue.event(entry, event);\n    }\n    let complete = false;\n    if (entry.loop)\n      complete = duration == 0 || trackLastWrapped > entry.trackTime % duration;\n    else\n      complete = animationTime >= animationEnd && entry.animationLast < animationEnd;\n    if (complete)\n      this.queue.complete(entry);\n    for (; i < n; i++) {\n      const event = events[i];\n      if (event.time < animationStart)\n        continue;\n      this.queue.event(entry, events[i]);\n    }\n  }\n  /** Removes all animations from all tracks, leaving skeletons in their current pose.\n   *\n   * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n   * rather than leaving them in their current pose. */\n  clearTracks() {\n    const oldDrainDisabled = this.queue.drainDisabled;\n    this.queue.drainDisabled = true;\n    for (let i = 0, n = this.tracks.length; i < n; i++)\n      this.clearTrack(i);\n    this.tracks.length = 0;\n    this.queue.drainDisabled = oldDrainDisabled;\n    this.queue.drain();\n  }\n  /** Removes all animations from the track, leaving skeletons in their current pose.\n   *\n   * It may be desired to use {@link AnimationState#setEmptyAnimation()} to mix the skeletons back to the setup pose,\n   * rather than leaving them in their current pose. */\n  clearTrack(trackIndex) {\n    if (trackIndex >= this.tracks.length)\n      return;\n    const current = this.tracks[trackIndex];\n    if (current == null)\n      return;\n    this.queue.end(current);\n    this.disposeNext(current);\n    let entry = current;\n    while (true) {\n      const from = entry.mixingFrom;\n      if (from == null)\n        break;\n      this.queue.end(from);\n      entry.mixingFrom = null;\n      entry.mixingTo = null;\n      entry = from;\n    }\n    this.tracks[current.trackIndex] = null;\n    this.queue.drain();\n  }\n  setCurrent(index, current, interrupt) {\n    const from = this.expandToIndex(index);\n    this.tracks[index] = current;\n    if (from != null) {\n      if (interrupt)\n        this.queue.interrupt(from);\n      current.mixingFrom = from;\n      from.mixingTo = current;\n      current.mixTime = 0;\n      if (from.mixingFrom != null && from.mixDuration > 0)\n        current.interruptAlpha *= Math.min(1, from.mixTime / from.mixDuration);\n      from.timelinesRotation.length = 0;\n    }\n    this.queue.start(current);\n  }\n  /** Sets an animation by name.\n   *\n   * {@link #setAnimationWith(}. */\n  setAnimation(trackIndex, animationName, loop) {\n    const animation = this.data.skeletonData.findAnimation(animationName);\n    if (animation == null)\n      throw new Error(`Animation not found: ${animationName}`);\n    return this.setAnimationWith(trackIndex, animation, loop);\n  }\n  /** Sets the current animation for a track, discarding any queued animations. If the formerly current track entry was never\n   * applied to a skeleton, it is replaced (not mixed from).\n   * @param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\n   *           duration. In either case {@link TrackEntry#trackEnd} determines when the track is cleared.\n   * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n   *         after the {@link AnimationStateListener#dispose()} event occurs. */\n  setAnimationWith(trackIndex, animation, loop) {\n    if (animation == null)\n      throw new Error(\"animation cannot be null.\");\n    let interrupt = true;\n    let current = this.expandToIndex(trackIndex);\n    if (current != null) {\n      if (current.nextTrackLast == -1) {\n        this.tracks[trackIndex] = current.mixingFrom;\n        this.queue.interrupt(current);\n        this.queue.end(current);\n        this.disposeNext(current);\n        current = current.mixingFrom;\n        interrupt = false;\n      } else\n        this.disposeNext(current);\n    }\n    const entry = this.trackEntry(trackIndex, animation, loop, current);\n    this.setCurrent(trackIndex, entry, interrupt);\n    this.queue.drain();\n    return entry;\n  }\n  /** Queues an animation by name.\n   *\n   * See {@link #addAnimationWith()}. */\n  addAnimation(trackIndex, animationName, loop, delay) {\n    const animation = this.data.skeletonData.findAnimation(animationName);\n    if (animation == null)\n      throw new Error(`Animation not found: ${animationName}`);\n    return this.addAnimationWith(trackIndex, animation, loop, delay);\n  }\n  /** Adds an animation to be played after the current or last queued animation for a track. If the track is empty, it is\n   * equivalent to calling {@link #setAnimationWith()}.\n   * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n   *           minus any mix duration (from the {@link AnimationStateData}) plus the specified `delay` (ie the mix\n   *           ends at (`delay` = 0) or before (`delay` < 0) the previous track entry duration). If the\n   *           previous entry is looping, its next loop completion is used instead of its duration.\n   * @returns A track entry to allow further customization of animation playback. References to the track entry must not be kept\n   *         after the {@link AnimationStateListener#dispose()} event occurs. */\n  addAnimationWith(trackIndex, animation, loop, delay) {\n    if (animation == null)\n      throw new Error(\"animation cannot be null.\");\n    let last = this.expandToIndex(trackIndex);\n    if (last != null) {\n      while (last.next != null)\n        last = last.next;\n    }\n    const entry = this.trackEntry(trackIndex, animation, loop, last);\n    if (last == null) {\n      this.setCurrent(trackIndex, entry, true);\n      this.queue.drain();\n    } else {\n      last.next = entry;\n      if (delay <= 0) {\n        const duration = last.animationEnd - last.animationStart;\n        if (duration != 0) {\n          if (last.loop)\n            delay += duration * (1 + (last.trackTime / duration | 0));\n          else\n            delay += Math.max(duration, last.trackTime);\n          delay -= this.data.getMix(last.animation, animation);\n        } else\n          delay = last.trackTime;\n      }\n    }\n    entry.delay = delay;\n    return entry;\n  }\n  /** Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n   * {@link TrackEntry#mixduration}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n   *\n   * Mixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation()},\n   * {@link #setEmptyAnimations()}, or {@link #addEmptyAnimation()}. Mixing to an empty animation causes\n   * the previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\n   * transition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n   * 0 still mixes out over one frame.\n   *\n   * Mixing in is done by first setting an empty animation, then adding an animation using\n   * {@link #addAnimation()} and on the returned track entry, set the\n   * {@link TrackEntry#setMixDuration()}. Mixing from an empty animation causes the new animation to be applied more and\n   * more over the mix duration. Properties keyed in the new animation transition from the value from lower tracks or from the\n   * setup pose value if no lower tracks key the property to the value keyed in the new animation. */\n  setEmptyAnimation(trackIndex, mixDuration) {\n    const entry = this.setAnimationWith(trackIndex, _AnimationState.emptyAnimation, false);\n    entry.mixDuration = mixDuration;\n    entry.trackEnd = mixDuration;\n    return entry;\n  }\n  /** Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n   * {@link TrackEntry#mixDuration}. If the track is empty, it is equivalent to calling\n   * {@link #setEmptyAnimation()}.\n   *\n   * See {@link #setEmptyAnimation()}.\n   * @param delay If > 0, sets {@link TrackEntry#delay}. If <= 0, the delay set is the duration of the previous track entry\n   *           minus any mix duration plus the specified `delay` (ie the mix ends at (`delay` = 0) or\n   *           before (`delay` < 0) the previous track entry duration). If the previous entry is looping, its next\n   *           loop completion is used instead of its duration.\n   * @return A track entry to allow further customization of animation playback. References to the track entry must not be kept\n   *         after the {@link AnimationStateListener#dispose()} event occurs. */\n  addEmptyAnimation(trackIndex, mixDuration, delay) {\n    if (delay <= 0)\n      delay -= mixDuration;\n    const entry = this.addAnimationWith(trackIndex, _AnimationState.emptyAnimation, false, delay);\n    entry.mixDuration = mixDuration;\n    entry.trackEnd = mixDuration;\n    return entry;\n  }\n  /** Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix\n   * duration. */\n  setEmptyAnimations(mixDuration) {\n    const oldDrainDisabled = this.queue.drainDisabled;\n    this.queue.drainDisabled = true;\n    for (let i = 0, n = this.tracks.length; i < n; i++) {\n      const current = this.tracks[i];\n      if (current != null)\n        this.setEmptyAnimation(current.trackIndex, mixDuration);\n    }\n    this.queue.drainDisabled = oldDrainDisabled;\n    this.queue.drain();\n  }\n  expandToIndex(index) {\n    if (index < this.tracks.length)\n      return this.tracks[index];\n    Utils.ensureArrayCapacity(this.tracks, index + 1, null);\n    this.tracks.length = index + 1;\n    return null;\n  }\n  /** @param last May be null. */\n  trackEntry(trackIndex, animation, loop, last) {\n    const entry = this.trackEntryPool.obtain();\n    entry.trackIndex = trackIndex;\n    entry.animation = animation;\n    entry.loop = loop;\n    entry.holdPrevious = false;\n    entry.eventThreshold = 0;\n    entry.attachmentThreshold = 0;\n    entry.drawOrderThreshold = 0;\n    entry.animationStart = 0;\n    entry.animationEnd = animation.duration;\n    entry.animationLast = -1;\n    entry.nextAnimationLast = -1;\n    entry.delay = 0;\n    entry.trackTime = 0;\n    entry.trackLast = -1;\n    entry.nextTrackLast = -1;\n    entry.trackEnd = Number.MAX_VALUE;\n    entry.timeScale = 1;\n    entry.alpha = 1;\n    entry.interruptAlpha = 1;\n    entry.mixTime = 0;\n    entry.mixDuration = last == null ? 0 : this.data.getMix(last.animation, animation);\n    entry.mixBlend = MixBlend.replace;\n    return entry;\n  }\n  disposeNext(entry) {\n    let next = entry.next;\n    while (next != null) {\n      this.queue.dispose(next);\n      next = next.next;\n    }\n    entry.next = null;\n  }\n  _animationsChanged() {\n    this.animationsChanged = false;\n    this.propertyIDs.clear();\n    for (let i = 0, n = this.tracks.length; i < n; i++) {\n      let entry = this.tracks[i];\n      if (entry == null)\n        continue;\n      while (entry.mixingFrom != null)\n        entry = entry.mixingFrom;\n      do {\n        if (entry.mixingFrom == null || entry.mixBlend != MixBlend.add)\n          this.computeHold(entry);\n        entry = entry.mixingTo;\n      } while (entry != null);\n    }\n  }\n  computeHold(entry) {\n    const to = entry.mixingTo;\n    const timelines = entry.animation.timelines;\n    const timelinesCount = entry.animation.timelines.length;\n    const timelineMode = Utils.setArraySize(entry.timelineMode, timelinesCount);\n    entry.timelineHoldMix.length = 0;\n    const timelineDipMix = Utils.setArraySize(entry.timelineHoldMix, timelinesCount);\n    const propertyIDs = this.propertyIDs;\n    if (to != null && to.holdPrevious) {\n      for (let i = 0; i < timelinesCount; i++) {\n        timelineMode[i] = propertyIDs.add(timelines[i].getPropertyId()) ? _AnimationState.HOLD_FIRST : _AnimationState.HOLD_SUBSEQUENT;\n      }\n      return;\n    }\n    outer:\n      for (let i = 0; i < timelinesCount; i++) {\n        const timeline = timelines[i];\n        const id = timeline.getPropertyId();\n        if (!propertyIDs.add(id))\n          timelineMode[i] = _AnimationState.SUBSEQUENT;\n        else if (to == null || timeline instanceof AttachmentTimeline || timeline instanceof DrawOrderTimeline || timeline instanceof EventTimeline || !to.animation.hasTimeline(id)) {\n          timelineMode[i] = _AnimationState.FIRST;\n        } else {\n          for (let next = to.mixingTo; next != null; next = next.mixingTo) {\n            if (next.animation.hasTimeline(id))\n              continue;\n            if (entry.mixDuration > 0) {\n              timelineMode[i] = _AnimationState.HOLD_MIX;\n              timelineDipMix[i] = next;\n              continue outer;\n            }\n            break;\n          }\n          timelineMode[i] = _AnimationState.HOLD_FIRST;\n        }\n      }\n  }\n  /** Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing. */\n  getCurrent(trackIndex) {\n    if (trackIndex >= this.tracks.length)\n      return null;\n    return this.tracks[trackIndex];\n  }\n  /** Adds a listener to receive events for all track entries. */\n  addListener(listener) {\n    if (listener == null)\n      throw new Error(\"listener cannot be null.\");\n    this.listeners.push(listener);\n  }\n  /** Removes the listener added with {@link #addListener()}. */\n  removeListener(listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index >= 0)\n      this.listeners.splice(index, 1);\n  }\n  /** Removes all listeners added with {@link #addListener()}. */\n  clearListeners() {\n    this.listeners.length = 0;\n  }\n  /** Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n   * {@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\n   * are not wanted because new animations are being set. */\n  clearListenerNotifications() {\n    this.queue.clear();\n  }\n  setAnimationByName(trackIndex, animationName, loop) {\n    if (!_AnimationState.deprecatedWarning1) {\n      _AnimationState.deprecatedWarning1 = true;\n      console.warn(\"Spine Deprecation Warning: AnimationState.setAnimationByName is deprecated, please use setAnimation from now on.\");\n    }\n    this.setAnimation(trackIndex, animationName, loop);\n  }\n  addAnimationByName(trackIndex, animationName, loop, delay) {\n    if (!_AnimationState.deprecatedWarning2) {\n      _AnimationState.deprecatedWarning2 = true;\n      console.warn(\"Spine Deprecation Warning: AnimationState.addAnimationByName is deprecated, please use addAnimation from now on.\");\n    }\n    this.addAnimation(trackIndex, animationName, loop, delay);\n  }\n  hasAnimation(animationName) {\n    const animation = this.data.skeletonData.findAnimation(animationName);\n    return animation !== null;\n  }\n  hasAnimationByName(animationName) {\n    if (!_AnimationState.deprecatedWarning3) {\n      _AnimationState.deprecatedWarning3 = true;\n      console.warn(\"Spine Deprecation Warning: AnimationState.hasAnimationByName is deprecated, please use hasAnimation from now on.\");\n    }\n    return this.hasAnimation(animationName);\n  }\n};\nlet AnimationState = _AnimationState;\nAnimationState.emptyAnimation = new Animation(\"<empty>\", [], 0);\n/** 1. A previously applied timeline has set this property.\n *\n * Result: Mix from the current pose to the timeline pose. */\nAnimationState.SUBSEQUENT = 0;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry applied after this one does not have a timeline to set this property.\n *\n * Result: Mix from the setup pose to the timeline pose. */\nAnimationState.FIRST = 1;\n/** 1) A previously applied timeline has set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\n * animations that key the same property. A subsequent timeline will set this property using a mix. */\nAnimationState.HOLD_SUBSEQUENT = 2;\n/** 1) This is the first timeline to set this property.<br>\n * 2) The next track entry to be applied does have a timeline to set this property.<br>\n * 3) The next track entry after that one does not have a timeline to set this property.<br>\n * Result: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\n * that key the same property. A subsequent timeline will set this property using a mix. */\nAnimationState.HOLD_FIRST = 3;\n/** 1. This is the first timeline to set this property.\n * 2. The next track entry to be applied does have a timeline to set this property.\n * 3. The next track entry after that one does have a timeline to set this property.\n * 4. timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.\n *\n * Result: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n * 2 track entries in a row have a timeline that sets the same property.\n *\n * Eg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n * \"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n * (which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap into\n * place. */\nAnimationState.HOLD_MIX = 4;\nAnimationState.SETUP = 1;\nAnimationState.CURRENT = 2;\nAnimationState.deprecatedWarning1 = false;\nAnimationState.deprecatedWarning2 = false;\nAnimationState.deprecatedWarning3 = false;\nconst _TrackEntry = class {\n  constructor() {\n    /** Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}, which\n     * replaces the values from the lower tracks with the animation values. {@link MixBlend#add} adds the animation values to\n     * the values from the lower tracks.\n     *\n     * The `mixBlend` can be set for a new track entry only before {@link AnimationState#apply()} is first\n     * called. */\n    this.mixBlend = MixBlend.replace;\n    this.timelineMode = new Array();\n    this.timelineHoldMix = new Array();\n    this.timelinesRotation = new Array();\n  }\n  reset() {\n    this.next = null;\n    this.mixingFrom = null;\n    this.mixingTo = null;\n    this.animation = null;\n    this.listener = null;\n    this.timelineMode.length = 0;\n    this.timelineHoldMix.length = 0;\n    this.timelinesRotation.length = 0;\n  }\n  /** Uses {@link #trackTime} to compute the `animationTime`, which is between {@link #animationStart}\n   * and {@link #animationEnd}. When the `trackTime` is 0, the `animationTime` is equal to the\n   * `animationStart` time. */\n  getAnimationTime() {\n    if (this.loop) {\n      const duration = this.animationEnd - this.animationStart;\n      if (duration == 0)\n        return this.animationStart;\n      return this.trackTime % duration + this.animationStart;\n    }\n    return Math.min(this.trackTime + this.animationStart, this.animationEnd);\n  }\n  setAnimationLast(animationLast) {\n    this.animationLast = animationLast;\n    this.nextAnimationLast = animationLast;\n  }\n  /** Returns true if at least one loop has been completed.\n   *\n   * See {@link AnimationStateListener#complete()}. */\n  isComplete() {\n    return this.trackTime >= this.animationEnd - this.animationStart;\n  }\n  /** Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\n   * long way around when using {@link #alpha} and starting animations on other tracks.\n   *\n   * Mixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\n   * the short way or the long way around. The two rotations likely change over time, so which direction is the short or long\n   * way also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\n   * long way. TrackEntry chooses the short way the first time it is applied and remembers that direction. */\n  resetRotationDirections() {\n    this.timelinesRotation.length = 0;\n  }\n  get time() {\n    if (!_TrackEntry.deprecatedWarning1) {\n      _TrackEntry.deprecatedWarning1 = true;\n      console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\n    }\n    return this.trackTime;\n  }\n  set time(value) {\n    if (!_TrackEntry.deprecatedWarning1) {\n      _TrackEntry.deprecatedWarning1 = true;\n      console.warn(\"Spine Deprecation Warning: TrackEntry.time is deprecated, please use trackTime from now on.\");\n    }\n    this.trackTime = value;\n  }\n  get endTime() {\n    if (!_TrackEntry.deprecatedWarning2) {\n      _TrackEntry.deprecatedWarning2 = true;\n      console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\n    }\n    return this.trackTime;\n  }\n  set endTime(value) {\n    if (!_TrackEntry.deprecatedWarning2) {\n      _TrackEntry.deprecatedWarning2 = true;\n      console.warn(\"Spine Deprecation Warning: TrackEntry.endTime is deprecated, please use trackEnd from now on.\");\n    }\n    this.trackTime = value;\n  }\n  loopsCount() {\n    return Math.floor(this.trackTime / this.trackEnd);\n  }\n};\nlet TrackEntry = _TrackEntry;\nTrackEntry.deprecatedWarning1 = false;\nTrackEntry.deprecatedWarning2 = false;\nconst _EventQueue = class {\n  constructor(animState) {\n    this.objects = [];\n    this.drainDisabled = false;\n    this.animState = animState;\n  }\n  start(entry) {\n    this.objects.push(EventType.start);\n    this.objects.push(entry);\n    this.animState.animationsChanged = true;\n  }\n  interrupt(entry) {\n    this.objects.push(EventType.interrupt);\n    this.objects.push(entry);\n  }\n  end(entry) {\n    this.objects.push(EventType.end);\n    this.objects.push(entry);\n    this.animState.animationsChanged = true;\n  }\n  dispose(entry) {\n    this.objects.push(EventType.dispose);\n    this.objects.push(entry);\n  }\n  complete(entry) {\n    this.objects.push(EventType.complete);\n    this.objects.push(entry);\n  }\n  event(entry, event) {\n    this.objects.push(EventType.event);\n    this.objects.push(entry);\n    this.objects.push(event);\n  }\n  deprecateStuff() {\n    if (!_EventQueue.deprecatedWarning1) {\n      _EventQueue.deprecatedWarning1 = true;\n      console.warn(\n        \"Spine Deprecation Warning: onComplete, onStart, onEnd, onEvent art deprecated, please use listeners from now on. 'state.addListener({ complete: function(track, event) { } })'\"\n      );\n    }\n    return true;\n  }\n  drain() {\n    if (this.drainDisabled)\n      return;\n    this.drainDisabled = true;\n    const objects = this.objects;\n    const listeners = this.animState.listeners;\n    for (let i = 0; i < objects.length; i += 2) {\n      const type = objects[i];\n      const entry = objects[i + 1];\n      switch (type) {\n        case EventType.start:\n          if (entry.listener != null && entry.listener.start)\n            entry.listener.start(entry);\n          for (let ii = 0; ii < listeners.length; ii++)\n            if (listeners[ii].start)\n              listeners[ii].start(entry);\n          entry.onStart && this.deprecateStuff() && entry.onStart(entry.trackIndex);\n          this.animState.onStart && this.deprecateStuff() && this.deprecateStuff && this.animState.onStart(entry.trackIndex);\n          break;\n        case EventType.interrupt:\n          if (entry.listener != null && entry.listener.interrupt)\n            entry.listener.interrupt(entry);\n          for (let ii = 0; ii < listeners.length; ii++)\n            if (listeners[ii].interrupt)\n              listeners[ii].interrupt(entry);\n          break;\n        case EventType.end:\n          if (entry.listener != null && entry.listener.end)\n            entry.listener.end(entry);\n          for (let ii = 0; ii < listeners.length; ii++)\n            if (listeners[ii].end)\n              listeners[ii].end(entry);\n          entry.onEnd && this.deprecateStuff() && entry.onEnd(entry.trackIndex);\n          this.animState.onEnd && this.deprecateStuff() && this.animState.onEnd(entry.trackIndex);\n        case EventType.dispose:\n          if (entry.listener != null && entry.listener.dispose)\n            entry.listener.dispose(entry);\n          for (let ii = 0; ii < listeners.length; ii++)\n            if (listeners[ii].dispose)\n              listeners[ii].dispose(entry);\n          this.animState.trackEntryPool.free(entry);\n          break;\n        case EventType.complete:\n          if (entry.listener != null && entry.listener.complete)\n            entry.listener.complete(entry);\n          for (let ii = 0; ii < listeners.length; ii++)\n            if (listeners[ii].complete)\n              listeners[ii].complete(entry);\n          const count = MathUtils.toInt(entry.loopsCount());\n          entry.onComplete && this.deprecateStuff() && entry.onComplete(entry.trackIndex, count);\n          this.animState.onComplete && this.deprecateStuff() && this.animState.onComplete(entry.trackIndex, count);\n          break;\n        case EventType.event:\n          const event = objects[i++ + 2];\n          if (entry.listener != null && entry.listener.event)\n            entry.listener.event(entry, event);\n          for (let ii = 0; ii < listeners.length; ii++)\n            if (listeners[ii].event)\n              listeners[ii].event(entry, event);\n          entry.onEvent && this.deprecateStuff() && entry.onEvent(entry.trackIndex, event);\n          this.animState.onEvent && this.deprecateStuff() && this.animState.onEvent(entry.trackIndex, event);\n          break;\n      }\n    }\n    this.clear();\n    this.drainDisabled = false;\n  }\n  clear() {\n    this.objects.length = 0;\n  }\n};\nlet EventQueue = _EventQueue;\nEventQueue.deprecatedWarning1 = false;\nvar EventType = /* @__PURE__ */ ((EventType2) => {\n  EventType2[EventType2[\"start\"] = 0] = \"start\";\n  EventType2[EventType2[\"interrupt\"] = 1] = \"interrupt\";\n  EventType2[EventType2[\"end\"] = 2] = \"end\";\n  EventType2[EventType2[\"dispose\"] = 3] = \"dispose\";\n  EventType2[EventType2[\"complete\"] = 4] = \"complete\";\n  EventType2[EventType2[\"event\"] = 5] = \"event\";\n  return EventType2;\n})(EventType || {});\nclass AnimationStateAdapter {\n  start(entry) {\n  }\n  interrupt(entry) {\n  }\n  end(entry) {\n  }\n  dispose(entry) {\n  }\n  complete(entry) {\n  }\n  event(entry, event) {\n  }\n}\n\nexport { AnimationState, AnimationStateAdapter, EventQueue, EventType, TrackEntry };\n//# sourceMappingURL=AnimationState.mjs.map\n","const _AnimationStateData = class {\n  constructor(skeletonData) {\n    this.animationToMixTime = {};\n    this.defaultMix = 0;\n    if (skeletonData == null)\n      throw new Error(\"skeletonData cannot be null.\");\n    this.skeletonData = skeletonData;\n  }\n  setMix(fromName, toName, duration) {\n    const from = this.skeletonData.findAnimation(fromName);\n    if (from == null)\n      throw new Error(`Animation not found: ${fromName}`);\n    const to = this.skeletonData.findAnimation(toName);\n    if (to == null)\n      throw new Error(`Animation not found: ${toName}`);\n    this.setMixWith(from, to, duration);\n  }\n  setMixByName(fromName, toName, duration) {\n    if (!_AnimationStateData.deprecatedWarning1) {\n      _AnimationStateData.deprecatedWarning1 = true;\n      console.warn(\"Deprecation Warning: AnimationStateData.setMixByName is deprecated, please use setMix from now on.\");\n    }\n    this.setMix(fromName, toName, duration);\n  }\n  setMixWith(from, to, duration) {\n    if (from == null)\n      throw new Error(\"from cannot be null.\");\n    if (to == null)\n      throw new Error(\"to cannot be null.\");\n    const key = `${from.name}.${to.name}`;\n    this.animationToMixTime[key] = duration;\n  }\n  getMix(from, to) {\n    const key = `${from.name}.${to.name}`;\n    const value = this.animationToMixTime[key];\n    return value === void 0 ? this.defaultMix : value;\n  }\n};\nlet AnimationStateData = _AnimationStateData;\nAnimationStateData.deprecatedWarning1 = false;\n\nexport { AnimationStateData };\n//# sourceMappingURL=AnimationStateData.mjs.map\n","import './attachments/Attachment.mjs';\nimport { BoundingBoxAttachment } from './attachments/BoundingBoxAttachment.mjs';\nimport { ClippingAttachment } from './attachments/ClippingAttachment.mjs';\nimport { MeshAttachment } from './attachments/MeshAttachment.mjs';\nimport { PathAttachment } from './attachments/PathAttachment.mjs';\nimport { PointAttachment } from './attachments/PointAttachment.mjs';\nimport { RegionAttachment } from './attachments/RegionAttachment.mjs';\n\nclass AtlasAttachmentLoader {\n  constructor(atlas) {\n    this.atlas = atlas;\n  }\n  /** @return May be null to not load an attachment. */\n  newRegionAttachment(skin, name, path) {\n    const region = this.atlas.findRegion(path);\n    if (region == null)\n      throw new Error(`Region not found in atlas: ${path} (region attachment: ${name})`);\n    const attachment = new RegionAttachment(name);\n    attachment.region = region;\n    return attachment;\n  }\n  /** @return May be null to not load an attachment. */\n  newMeshAttachment(skin, name, path) {\n    const region = this.atlas.findRegion(path);\n    if (region == null)\n      throw new Error(`Region not found in atlas: ${path} (mesh attachment: ${name})`);\n    const attachment = new MeshAttachment(name);\n    attachment.region = region;\n    return attachment;\n  }\n  /** @return May be null to not load an attachment. */\n  newBoundingBoxAttachment(skin, name) {\n    return new BoundingBoxAttachment(name);\n  }\n  /** @return May be null to not load an attachment */\n  newPathAttachment(skin, name) {\n    return new PathAttachment(name);\n  }\n  newPointAttachment(skin, name) {\n    return new PointAttachment(name);\n  }\n  newClippingAttachment(skin, name) {\n    return new ClippingAttachment(name);\n  }\n}\n\nexport { AtlasAttachmentLoader };\n//# sourceMappingURL=AtlasAttachmentLoader.mjs.map\n","import { Matrix } from '@pixi/core';\nimport { settings, MathUtils, TransformMode } from '@pixi-spine/base';\n\nclass Bone {\n  /** @param parent May be null. */\n  constructor(data, skeleton, parent) {\n    // be careful! Spine b,c is c,b in pixi matrix\n    this.matrix = new Matrix();\n    this.children = new Array();\n    this.x = 0;\n    this.y = 0;\n    this.rotation = 0;\n    this.scaleX = 0;\n    this.scaleY = 0;\n    this.shearX = 0;\n    this.shearY = 0;\n    this.ax = 0;\n    this.ay = 0;\n    this.arotation = 0;\n    this.ascaleX = 0;\n    this.ascaleY = 0;\n    this.ashearX = 0;\n    this.ashearY = 0;\n    this.appliedValid = false;\n    this.sorted = false;\n    this.active = false;\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    this.data = data;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.setToSetupPose();\n  }\n  get worldX() {\n    return this.matrix.tx;\n  }\n  get worldY() {\n    return this.matrix.ty;\n  }\n  isActive() {\n    return this.active;\n  }\n  /** Same as {@link #updateWorldTransform()}. This method exists for Bone to implement {@link Updatable}. */\n  update() {\n    this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n  }\n  /** Computes the world transform using the parent bone and this bone's local transform. */\n  updateWorldTransform() {\n    this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);\n  }\n  /** Computes the world transform using the parent bone and the specified local transform. */\n  updateWorldTransformWith(x, y, rotation, scaleX, scaleY, shearX, shearY) {\n    this.ax = x;\n    this.ay = y;\n    this.arotation = rotation;\n    this.ascaleX = scaleX;\n    this.ascaleY = scaleY;\n    this.ashearX = shearX;\n    this.ashearY = shearY;\n    this.appliedValid = true;\n    const parent = this.parent;\n    const m = this.matrix;\n    const sx = this.skeleton.scaleX;\n    const sy = settings.yDown ? -this.skeleton.scaleY : this.skeleton.scaleY;\n    if (parent == null) {\n      const skeleton = this.skeleton;\n      const rotationY = rotation + 90 + shearY;\n      m.a = MathUtils.cosDeg(rotation + shearX) * scaleX * sx;\n      m.c = MathUtils.cosDeg(rotationY) * scaleY * sx;\n      m.b = MathUtils.sinDeg(rotation + shearX) * scaleX * sy;\n      m.d = MathUtils.sinDeg(rotationY) * scaleY * sy;\n      m.tx = x * sx + skeleton.x;\n      m.ty = y * sy + skeleton.y;\n      return;\n    }\n    let pa = parent.matrix.a;\n    let pb = parent.matrix.c;\n    let pc = parent.matrix.b;\n    let pd = parent.matrix.d;\n    m.tx = pa * x + pb * y + parent.matrix.tx;\n    m.ty = pc * x + pd * y + parent.matrix.ty;\n    switch (this.data.transformMode) {\n      case TransformMode.Normal: {\n        const rotationY = rotation + 90 + shearY;\n        const la = MathUtils.cosDeg(rotation + shearX) * scaleX;\n        const lb = MathUtils.cosDeg(rotationY) * scaleY;\n        const lc = MathUtils.sinDeg(rotation + shearX) * scaleX;\n        const ld = MathUtils.sinDeg(rotationY) * scaleY;\n        m.a = pa * la + pb * lc;\n        m.c = pa * lb + pb * ld;\n        m.b = pc * la + pd * lc;\n        m.d = pc * lb + pd * ld;\n        return;\n      }\n      case TransformMode.OnlyTranslation: {\n        const rotationY = rotation + 90 + shearY;\n        m.a = MathUtils.cosDeg(rotation + shearX) * scaleX;\n        m.c = MathUtils.cosDeg(rotationY) * scaleY;\n        m.b = MathUtils.sinDeg(rotation + shearX) * scaleX;\n        m.d = MathUtils.sinDeg(rotationY) * scaleY;\n        break;\n      }\n      case TransformMode.NoRotationOrReflection: {\n        let s = pa * pa + pc * pc;\n        let prx = 0;\n        if (s > 1e-4) {\n          s = Math.abs(pa * pd - pb * pc) / s;\n          pa /= this.skeleton.scaleX;\n          pc /= this.skeleton.scaleY;\n          pb = pc * s;\n          pd = pa * s;\n          prx = Math.atan2(pc, pa) * MathUtils.radDeg;\n        } else {\n          pa = 0;\n          pc = 0;\n          prx = 90 - Math.atan2(pd, pb) * MathUtils.radDeg;\n        }\n        const rx = rotation + shearX - prx;\n        const ry = rotation + shearY - prx + 90;\n        const la = MathUtils.cosDeg(rx) * scaleX;\n        const lb = MathUtils.cosDeg(ry) * scaleY;\n        const lc = MathUtils.sinDeg(rx) * scaleX;\n        const ld = MathUtils.sinDeg(ry) * scaleY;\n        m.a = pa * la - pb * lc;\n        m.c = pa * lb - pb * ld;\n        m.b = pc * la + pd * lc;\n        m.d = pc * lb + pd * ld;\n        break;\n      }\n      case TransformMode.NoScale:\n      case TransformMode.NoScaleOrReflection: {\n        const cos = MathUtils.cosDeg(rotation);\n        const sin = MathUtils.sinDeg(rotation);\n        let za = (pa * cos + pb * sin) / sx;\n        let zc = (pc * cos + pd * sin) / sy;\n        let s = Math.sqrt(za * za + zc * zc);\n        if (s > 1e-5)\n          s = 1 / s;\n        za *= s;\n        zc *= s;\n        s = Math.sqrt(za * za + zc * zc);\n        if (this.data.transformMode == TransformMode.NoScale && pa * pd - pb * pc < 0 != (settings.yDown ? this.skeleton.scaleX < 0 != this.skeleton.scaleY > 0 : this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0))\n          s = -s;\n        const r = Math.PI / 2 + Math.atan2(zc, za);\n        const zb = Math.cos(r) * s;\n        const zd = Math.sin(r) * s;\n        const la = MathUtils.cosDeg(shearX) * scaleX;\n        const lb = MathUtils.cosDeg(90 + shearY) * scaleY;\n        const lc = MathUtils.sinDeg(shearX) * scaleX;\n        const ld = MathUtils.sinDeg(90 + shearY) * scaleY;\n        m.a = za * la + zb * lc;\n        m.c = za * lb + zb * ld;\n        m.b = zc * la + zd * lc;\n        m.d = zc * lb + zd * ld;\n        break;\n      }\n    }\n    m.a *= sx;\n    m.c *= sx;\n    m.b *= sy;\n    m.d *= sy;\n  }\n  setToSetupPose() {\n    const data = this.data;\n    this.x = data.x;\n    this.y = data.y;\n    this.rotation = data.rotation;\n    this.scaleX = data.scaleX;\n    this.scaleY = data.scaleY;\n    this.shearX = data.shearX;\n    this.shearY = data.shearY;\n  }\n  getWorldRotationX() {\n    return Math.atan2(this.matrix.b, this.matrix.a) * MathUtils.radDeg;\n  }\n  getWorldRotationY() {\n    return Math.atan2(this.matrix.d, this.matrix.c) * MathUtils.radDeg;\n  }\n  getWorldScaleX() {\n    const m = this.matrix;\n    return Math.sqrt(m.a * m.a + m.c * m.c);\n  }\n  getWorldScaleY() {\n    const m = this.matrix;\n    return Math.sqrt(m.b * m.b + m.d * m.d);\n  }\n  /** Computes the individual applied transform values from the world transform. This can be useful to perform processing using\n   * the applied transform after the world transform has been modified directly (eg, by a constraint).\n   * <p>\n   * Some information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. */\n  updateAppliedTransform() {\n    this.appliedValid = true;\n    const parent = this.parent;\n    const m = this.matrix;\n    if (parent == null) {\n      this.ax = m.tx;\n      this.ay = m.ty;\n      this.arotation = Math.atan2(m.b, m.a) * MathUtils.radDeg;\n      this.ascaleX = Math.sqrt(m.a * m.a + m.b * m.b);\n      this.ascaleY = Math.sqrt(m.c * m.c + m.d * m.d);\n      this.ashearX = 0;\n      this.ashearY = Math.atan2(m.a * m.c + m.b * m.d, m.a * m.d - m.b * m.c) * MathUtils.radDeg;\n      return;\n    }\n    const pm = parent.matrix;\n    const pid = 1 / (pm.a * pm.d - pm.b * pm.c);\n    const dx = m.tx - pm.tx;\n    const dy = m.ty - pm.ty;\n    this.ax = dx * pm.d * pid - dy * pm.c * pid;\n    this.ay = dy * pm.a * pid - dx * pm.b * pid;\n    const ia = pid * pm.d;\n    const id = pid * pm.a;\n    const ib = pid * pm.c;\n    const ic = pid * pm.b;\n    const ra = ia * m.a - ib * m.b;\n    const rb = ia * m.c - ib * m.d;\n    const rc = id * m.b - ic * m.a;\n    const rd = id * m.d - ic * m.c;\n    this.ashearX = 0;\n    this.ascaleX = Math.sqrt(ra * ra + rc * rc);\n    if (this.ascaleX > 1e-4) {\n      const det = ra * rd - rb * rc;\n      this.ascaleY = det / this.ascaleX;\n      this.ashearY = Math.atan2(ra * rb + rc * rd, det) * MathUtils.radDeg;\n      this.arotation = Math.atan2(rc, ra) * MathUtils.radDeg;\n    } else {\n      this.ascaleX = 0;\n      this.ascaleY = Math.sqrt(rb * rb + rd * rd);\n      this.ashearY = 0;\n      this.arotation = 90 - Math.atan2(rd, rb) * MathUtils.radDeg;\n    }\n  }\n  worldToLocal(world) {\n    const m = this.matrix;\n    const a = m.a;\n    const b = m.c;\n    const c = m.b;\n    const d = m.d;\n    const invDet = 1 / (a * d - b * c);\n    const x = world.x - m.tx;\n    const y = world.y - m.ty;\n    world.x = x * d * invDet - y * b * invDet;\n    world.y = y * a * invDet - x * c * invDet;\n    return world;\n  }\n  localToWorld(local) {\n    const m = this.matrix;\n    const x = local.x;\n    const y = local.y;\n    local.x = x * m.a + y * m.c + m.tx;\n    local.y = x * m.b + y * m.d + m.ty;\n    return local;\n  }\n  worldToLocalRotation(worldRotation) {\n    const sin = MathUtils.sinDeg(worldRotation);\n    const cos = MathUtils.cosDeg(worldRotation);\n    const mat = this.matrix;\n    return Math.atan2(mat.a * sin - mat.b * cos, mat.d * cos - mat.c * sin) * MathUtils.radDeg;\n  }\n  localToWorldRotation(localRotation) {\n    const sin = MathUtils.sinDeg(localRotation);\n    const cos = MathUtils.cosDeg(localRotation);\n    const mat = this.matrix;\n    return Math.atan2(cos * mat.b + sin * mat.d, cos * mat.a + sin * mat.c) * MathUtils.radDeg;\n  }\n  rotateWorld(degrees) {\n    const mat = this.matrix;\n    const a = mat.a;\n    const b = mat.c;\n    const c = mat.b;\n    const d = mat.d;\n    const cos = MathUtils.cosDeg(degrees);\n    const sin = MathUtils.sinDeg(degrees);\n    mat.a = cos * a - sin * c;\n    mat.c = cos * b - sin * d;\n    mat.b = sin * a + cos * c;\n    mat.d = sin * b + cos * d;\n    this.appliedValid = false;\n  }\n}\n\nexport { Bone };\n//# sourceMappingURL=Bone.mjs.map\n","import { TransformMode, Color } from '@pixi-spine/base';\n\nclass BoneData {\n  constructor(index, name, parent) {\n    this.x = 0;\n    this.y = 0;\n    this.rotation = 0;\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.shearX = 0;\n    this.shearY = 0;\n    this.transformMode = TransformMode.Normal;\n    this.skinRequired = false;\n    this.inheritRotation = true;\n    this.inheritScale = true;\n    this.color = new Color();\n    if (index < 0)\n      throw new Error(\"index must be >= 0.\");\n    if (name == null)\n      throw new Error(\"name cannot be null.\");\n    this.index = index;\n    this.name = name;\n    this.parent = parent;\n  }\n}\n\nexport { BoneData };\n//# sourceMappingURL=BoneData.mjs.map\n","class ConstraintData {\n  constructor(name, order, skinRequired) {\n    this.name = name;\n    this.order = order;\n    this.skinRequired = skinRequired;\n  }\n}\n\nexport { ConstraintData };\n//# sourceMappingURL=Constraint.mjs.map\n","class Event {\n  constructor(time, data) {\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    this.time = time;\n    this.data = data;\n  }\n}\n\nexport { Event };\n//# sourceMappingURL=Event.mjs.map\n","class EventData {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nexport { EventData };\n//# sourceMappingURL=EventData.mjs.map\n","import { TransformMode, MathUtils } from '@pixi-spine/base';\n\nclass IkConstraint {\n  constructor(data, skeleton) {\n    this.bendDirection = 0;\n    this.compress = false;\n    this.stretch = false;\n    this.mix = 1;\n    this.softness = 0;\n    this.active = false;\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    this.data = data;\n    this.mix = data.mix;\n    this.softness = data.softness;\n    this.bendDirection = data.bendDirection;\n    this.compress = data.compress;\n    this.stretch = data.stretch;\n    this.bones = new Array();\n    for (let i = 0; i < data.bones.length; i++)\n      this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n  }\n  isActive() {\n    return this.active;\n  }\n  apply() {\n    this.update();\n  }\n  update() {\n    const target = this.target;\n    const bones = this.bones;\n    switch (bones.length) {\n      case 1:\n        this.apply1(bones[0], target.worldX, target.worldY, this.compress, this.stretch, this.data.uniform, this.mix);\n        break;\n      case 2:\n        this.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.stretch, this.softness, this.mix);\n        break;\n    }\n  }\n  /** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n   * coordinate system. */\n  apply1(bone, targetX, targetY, compress, stretch, uniform, alpha) {\n    if (!bone.appliedValid)\n      bone.updateAppliedTransform();\n    const p = bone.parent.matrix;\n    const pa = p.a;\n    let pb = p.c;\n    const pc = p.b;\n    let pd = p.d;\n    let rotationIK = -bone.ashearX - bone.arotation;\n    let tx = 0;\n    let ty = 0;\n    switch (bone.data.transformMode) {\n      case TransformMode.OnlyTranslation:\n        tx = targetX - bone.worldX;\n        ty = targetY - bone.worldY;\n        break;\n      case TransformMode.NoRotationOrReflection:\n        const s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);\n        const sa = pa / bone.skeleton.scaleX;\n        const sc = pc / bone.skeleton.scaleY;\n        pb = -sc * s * bone.skeleton.scaleX;\n        pd = sa * s * bone.skeleton.scaleY;\n        rotationIK += Math.atan2(sc, sa) * MathUtils.radDeg;\n      default:\n        const x = targetX - p.tx;\n        const y = targetY - p.ty;\n        const d = pa * pd - pb * pc;\n        tx = (x * pd - y * pb) / d - bone.ax;\n        ty = (y * pa - x * pc) / d - bone.ay;\n    }\n    rotationIK += Math.atan2(ty, tx) * MathUtils.radDeg;\n    if (bone.ascaleX < 0)\n      rotationIK += 180;\n    if (rotationIK > 180)\n      rotationIK -= 360;\n    else if (rotationIK < -180)\n      rotationIK += 360;\n    let sx = bone.ascaleX;\n    let sy = bone.ascaleY;\n    if (compress || stretch) {\n      switch (bone.data.transformMode) {\n        case TransformMode.NoScale:\n        case TransformMode.NoScaleOrReflection:\n          tx = targetX - bone.worldX;\n          ty = targetY - bone.worldY;\n      }\n      const b = bone.data.length * sx;\n      const dd = Math.sqrt(tx * tx + ty * ty);\n      if (compress && dd < b || stretch && dd > b && b > 1e-4) {\n        const s = (dd / b - 1) * alpha + 1;\n        sx *= s;\n        if (uniform)\n          sy *= s;\n      }\n    }\n    bone.updateWorldTransformWith(bone.ax, bone.ay, bone.arotation + rotationIK * alpha, sx, sy, bone.ashearX, bone.ashearY);\n  }\n  /** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n   * target is specified in the world coordinate system.\n   * @param child A direct descendant of the parent bone. */\n  apply2(parent, child, targetX, targetY, bendDir, stretch, softness, alpha) {\n    if (alpha == 0) {\n      child.updateWorldTransform();\n      return;\n    }\n    if (!parent.appliedValid)\n      parent.updateAppliedTransform();\n    if (!child.appliedValid)\n      child.updateAppliedTransform();\n    const px = parent.ax;\n    const py = parent.ay;\n    let psx = parent.ascaleX;\n    let sx = psx;\n    let psy = parent.ascaleY;\n    let csx = child.ascaleX;\n    const pmat = parent.matrix;\n    let os1 = 0;\n    let os2 = 0;\n    let s2 = 0;\n    if (psx < 0) {\n      psx = -psx;\n      os1 = 180;\n      s2 = -1;\n    } else {\n      os1 = 0;\n      s2 = 1;\n    }\n    if (psy < 0) {\n      psy = -psy;\n      s2 = -s2;\n    }\n    if (csx < 0) {\n      csx = -csx;\n      os2 = 180;\n    } else\n      os2 = 0;\n    const cx = child.ax;\n    let cy = 0;\n    let cwx = 0;\n    let cwy = 0;\n    let a = pmat.a;\n    let b = pmat.c;\n    let c = pmat.b;\n    let d = pmat.d;\n    const u = Math.abs(psx - psy) <= 1e-4;\n    if (!u) {\n      cy = 0;\n      cwx = a * cx + pmat.tx;\n      cwy = c * cx + pmat.ty;\n    } else {\n      cy = child.ay;\n      cwx = a * cx + b * cy + pmat.tx;\n      cwy = c * cx + d * cy + pmat.ty;\n    }\n    const pp = parent.parent.matrix;\n    a = pp.a;\n    b = pp.c;\n    c = pp.b;\n    d = pp.d;\n    const id = 1 / (a * d - b * c);\n    let x = cwx - pp.tx;\n    let y = cwy - pp.ty;\n    const dx = (x * d - y * b) * id - px;\n    const dy = (y * a - x * c) * id - py;\n    const l1 = Math.sqrt(dx * dx + dy * dy);\n    let l2 = child.data.length * csx;\n    let a1;\n    let a2;\n    if (l1 < 1e-4) {\n      this.apply1(parent, targetX, targetY, false, stretch, false, alpha);\n      child.updateWorldTransformWith(cx, cy, 0, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n      return;\n    }\n    x = targetX - pp.tx;\n    y = targetY - pp.ty;\n    let tx = (x * d - y * b) * id - px;\n    let ty = (y * a - x * c) * id - py;\n    let dd = tx * tx + ty * ty;\n    if (softness != 0) {\n      softness *= psx * (csx + 1) / 2;\n      const td = Math.sqrt(dd);\n      const sd = td - l1 - l2 * psx + softness;\n      if (sd > 0) {\n        let p = Math.min(1, sd / (softness * 2)) - 1;\n        p = (sd - softness * (1 - p * p)) / td;\n        tx -= p * tx;\n        ty -= p * ty;\n        dd = tx * tx + ty * ty;\n      }\n    }\n    outer:\n      if (u) {\n        l2 *= psx;\n        let cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);\n        if (cos < -1)\n          cos = -1;\n        else if (cos > 1) {\n          cos = 1;\n          if (stretch)\n            sx *= (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;\n        }\n        a2 = Math.acos(cos) * bendDir;\n        a = l1 + l2 * cos;\n        b = l2 * Math.sin(a2);\n        a1 = Math.atan2(ty * a - tx * b, tx * a + ty * b);\n      } else {\n        a = psx * l2;\n        b = psy * l2;\n        const aa = a * a;\n        const bb = b * b;\n        const ta = Math.atan2(ty, tx);\n        c = bb * l1 * l1 + aa * dd - aa * bb;\n        const c1 = -2 * bb * l1;\n        const c2 = bb - aa;\n        d = c1 * c1 - 4 * c2 * c;\n        if (d >= 0) {\n          let q = Math.sqrt(d);\n          if (c1 < 0)\n            q = -q;\n          q = -(c1 + q) / 2;\n          const r0 = q / c2;\n          const r1 = c / q;\n          const r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;\n          if (r * r <= dd) {\n            y = Math.sqrt(dd - r * r) * bendDir;\n            a1 = ta - Math.atan2(y, r);\n            a2 = Math.atan2(y / psy, (r - l1) / psx);\n            break outer;\n          }\n        }\n        let minAngle = MathUtils.PI;\n        let minX = l1 - a;\n        let minDist = minX * minX;\n        let minY = 0;\n        let maxAngle = 0;\n        let maxX = l1 + a;\n        let maxDist = maxX * maxX;\n        let maxY = 0;\n        c = -a * l1 / (aa - bb);\n        if (c >= -1 && c <= 1) {\n          c = Math.acos(c);\n          x = a * Math.cos(c) + l1;\n          y = b * Math.sin(c);\n          d = x * x + y * y;\n          if (d < minDist) {\n            minAngle = c;\n            minDist = d;\n            minX = x;\n            minY = y;\n          }\n          if (d > maxDist) {\n            maxAngle = c;\n            maxDist = d;\n            maxX = x;\n            maxY = y;\n          }\n        }\n        if (dd <= (minDist + maxDist) / 2) {\n          a1 = ta - Math.atan2(minY * bendDir, minX);\n          a2 = minAngle * bendDir;\n        } else {\n          a1 = ta - Math.atan2(maxY * bendDir, maxX);\n          a2 = maxAngle * bendDir;\n        }\n      }\n    const os = Math.atan2(cy, cx) * s2;\n    let rotation = parent.arotation;\n    a1 = (a1 - os) * MathUtils.radDeg + os1 - rotation;\n    if (a1 > 180)\n      a1 -= 360;\n    else if (a1 < -180)\n      a1 += 360;\n    parent.updateWorldTransformWith(px, py, rotation + a1 * alpha, sx, parent.ascaleY, 0, 0);\n    rotation = child.arotation;\n    a2 = ((a2 + os) * MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;\n    if (a2 > 180)\n      a2 -= 360;\n    else if (a2 < -180)\n      a2 += 360;\n    child.updateWorldTransformWith(cx, cy, rotation + a2 * alpha, child.ascaleX, child.ascaleY, child.ashearX, child.ashearY);\n  }\n}\n\nexport { IkConstraint };\n//# sourceMappingURL=IkConstraint.mjs.map\n","import { ConstraintData } from './Constraint.mjs';\n\nclass IkConstraintData extends ConstraintData {\n  constructor(name) {\n    super(name, 0, false);\n    this.bones = new Array();\n    this.bendDirection = 1;\n    this.compress = false;\n    this.stretch = false;\n    this.uniform = false;\n    this.mix = 1;\n    this.softness = 0;\n  }\n}\n\nexport { IkConstraintData };\n//# sourceMappingURL=IkConstraintData.mjs.map\n","import { ConstraintData } from './Constraint.mjs';\n\nclass PathConstraintData extends ConstraintData {\n  constructor(name) {\n    super(name, 0, false);\n    this.bones = new Array();\n  }\n}\nvar SpacingMode = /* @__PURE__ */ ((SpacingMode2) => {\n  SpacingMode2[SpacingMode2[\"Length\"] = 0] = \"Length\";\n  SpacingMode2[SpacingMode2[\"Fixed\"] = 1] = \"Fixed\";\n  SpacingMode2[SpacingMode2[\"Percent\"] = 2] = \"Percent\";\n  return SpacingMode2;\n})(SpacingMode || {});\n\nexport { PathConstraintData, SpacingMode };\n//# sourceMappingURL=PathConstraintData.mjs.map\n","import './attachments/Attachment.mjs';\nimport { RotateMode, Utils, PositionMode, MathUtils } from '@pixi-spine/base';\nimport { PathAttachment } from './attachments/PathAttachment.mjs';\nimport './attachments/RegionAttachment.mjs';\nimport { SpacingMode } from './PathConstraintData.mjs';\n\nconst _PathConstraint = class {\n  constructor(data, skeleton) {\n    this.position = 0;\n    this.spacing = 0;\n    this.rotateMix = 0;\n    this.translateMix = 0;\n    this.spaces = new Array();\n    this.positions = new Array();\n    this.world = new Array();\n    this.curves = new Array();\n    this.lengths = new Array();\n    this.segments = new Array();\n    this.active = false;\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    this.data = data;\n    this.bones = new Array();\n    for (let i = 0, n = data.bones.length; i < n; i++)\n      this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findSlot(data.target.name);\n    this.position = data.position;\n    this.spacing = data.spacing;\n    this.rotateMix = data.rotateMix;\n    this.translateMix = data.translateMix;\n  }\n  isActive() {\n    return this.active;\n  }\n  apply() {\n    this.update();\n  }\n  update() {\n    const attachment = this.target.getAttachment();\n    if (!(attachment instanceof PathAttachment))\n      return;\n    const rotateMix = this.rotateMix;\n    const translateMix = this.translateMix;\n    const translate = translateMix > 0;\n    const rotate = rotateMix > 0;\n    if (!translate && !rotate)\n      return;\n    const data = this.data;\n    const spacingMode = data.spacingMode;\n    const lengthSpacing = spacingMode == SpacingMode.Length;\n    const rotateMode = data.rotateMode;\n    const tangents = rotateMode == RotateMode.Tangent;\n    const scale = rotateMode == RotateMode.ChainScale;\n    const boneCount = this.bones.length;\n    const spacesCount = tangents ? boneCount : boneCount + 1;\n    const bones = this.bones;\n    const spaces = Utils.setArraySize(this.spaces, spacesCount);\n    let lengths = null;\n    const spacing = this.spacing;\n    if (scale || lengthSpacing) {\n      if (scale)\n        lengths = Utils.setArraySize(this.lengths, boneCount);\n      for (let i = 0, n = spacesCount - 1; i < n; ) {\n        const bone = bones[i];\n        const setupLength = bone.data.length;\n        if (setupLength < _PathConstraint.epsilon) {\n          if (scale)\n            lengths[i] = 0;\n          spaces[++i] = 0;\n        } else {\n          const x = setupLength * bone.matrix.a;\n          const y = setupLength * bone.matrix.b;\n          const length = Math.sqrt(x * x + y * y);\n          if (scale)\n            lengths[i] = length;\n          spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;\n        }\n      }\n    } else {\n      for (let i = 1; i < spacesCount; i++)\n        spaces[i] = spacing;\n    }\n    const positions = this.computeWorldPositions(\n      attachment,\n      spacesCount,\n      tangents,\n      data.positionMode == PositionMode.Percent,\n      spacingMode == SpacingMode.Percent\n    );\n    let boneX = positions[0];\n    let boneY = positions[1];\n    let offsetRotation = data.offsetRotation;\n    let tip = false;\n    if (offsetRotation == 0)\n      tip = rotateMode == RotateMode.Chain;\n    else {\n      tip = false;\n      const p = this.target.bone.matrix;\n      offsetRotation *= p.a * p.d - p.b * p.c > 0 ? MathUtils.degRad : -MathUtils.degRad;\n    }\n    for (let i = 0, p = 3; i < boneCount; i++, p += 3) {\n      const bone = bones[i];\n      const mat = bone.matrix;\n      mat.tx += (boneX - mat.tx) * translateMix;\n      mat.ty += (boneY - mat.ty) * translateMix;\n      const x = positions[p];\n      const y = positions[p + 1];\n      const dx = x - boneX;\n      const dy = y - boneY;\n      if (scale) {\n        const length = lengths[i];\n        if (length != 0) {\n          const s = (Math.sqrt(dx * dx + dy * dy) / length - 1) * rotateMix + 1;\n          mat.a *= s;\n          mat.b *= s;\n        }\n      }\n      boneX = x;\n      boneY = y;\n      if (rotate) {\n        const a = mat.a;\n        const b = mat.c;\n        const c = mat.b;\n        const d = mat.d;\n        let r = 0;\n        let cos = 0;\n        let sin = 0;\n        if (tangents)\n          if (tangents)\n            r = positions[p - 1];\n          else if (spaces[i + 1] == 0)\n            r = positions[p + 2];\n          else\n            r = Math.atan2(dy, dx);\n        r -= Math.atan2(c, a);\n        if (tip) {\n          cos = Math.cos(r);\n          sin = Math.sin(r);\n          const length = bone.data.length;\n          boneX += (length * (cos * a - sin * c) - dx) * rotateMix;\n          boneY += (length * (sin * a + cos * c) - dy) * rotateMix;\n        } else {\n          r += offsetRotation;\n        }\n        if (r > MathUtils.PI)\n          r -= MathUtils.PI2;\n        else if (r < -MathUtils.PI)\n          r += MathUtils.PI2;\n        r *= rotateMix;\n        cos = Math.cos(r);\n        sin = Math.sin(r);\n        mat.a = cos * a - sin * c;\n        mat.c = cos * b - sin * d;\n        mat.b = sin * a + cos * c;\n        mat.d = sin * b + cos * d;\n      }\n      bone.appliedValid = false;\n    }\n  }\n  computeWorldPositions(path, spacesCount, tangents, percentPosition, percentSpacing) {\n    const target = this.target;\n    let position = this.position;\n    const spaces = this.spaces;\n    const out = Utils.setArraySize(this.positions, spacesCount * 3 + 2);\n    let world = null;\n    const closed = path.closed;\n    let verticesLength = path.worldVerticesLength;\n    let curveCount = verticesLength / 6;\n    let prevCurve = _PathConstraint.NONE;\n    if (!path.constantSpeed) {\n      const lengths = path.lengths;\n      curveCount -= closed ? 1 : 2;\n      const pathLength2 = lengths[curveCount];\n      if (percentPosition)\n        position *= pathLength2;\n      if (percentSpacing) {\n        for (let i = 0; i < spacesCount; i++)\n          spaces[i] *= pathLength2;\n      }\n      world = Utils.setArraySize(this.world, 8);\n      for (let i = 0, o = 0, curve = 0; i < spacesCount; i++, o += 3) {\n        const space = spaces[i];\n        position += space;\n        let p = position;\n        if (closed) {\n          p %= pathLength2;\n          if (p < 0)\n            p += pathLength2;\n          curve = 0;\n        } else if (p < 0) {\n          if (prevCurve != _PathConstraint.BEFORE) {\n            prevCurve = _PathConstraint.BEFORE;\n            path.computeWorldVertices(target, 2, 4, world, 0, 2);\n          }\n          this.addBeforePosition(p, world, 0, out, o);\n          continue;\n        } else if (p > pathLength2) {\n          if (prevCurve != _PathConstraint.AFTER) {\n            prevCurve = _PathConstraint.AFTER;\n            path.computeWorldVertices(target, verticesLength - 6, 4, world, 0, 2);\n          }\n          this.addAfterPosition(p - pathLength2, world, 0, out, o);\n          continue;\n        }\n        for (; ; curve++) {\n          const length = lengths[curve];\n          if (p > length)\n            continue;\n          if (curve == 0)\n            p /= length;\n          else {\n            const prev = lengths[curve - 1];\n            p = (p - prev) / (length - prev);\n          }\n          break;\n        }\n        if (curve != prevCurve) {\n          prevCurve = curve;\n          if (closed && curve == curveCount) {\n            path.computeWorldVertices(target, verticesLength - 4, 4, world, 0, 2);\n            path.computeWorldVertices(target, 0, 4, world, 4, 2);\n          } else\n            path.computeWorldVertices(target, curve * 6 + 2, 8, world, 0, 2);\n        }\n        this.addCurvePosition(p, world[0], world[1], world[2], world[3], world[4], world[5], world[6], world[7], out, o, tangents || i > 0 && space == 0);\n      }\n      return out;\n    }\n    if (closed) {\n      verticesLength += 2;\n      world = Utils.setArraySize(this.world, verticesLength);\n      path.computeWorldVertices(target, 2, verticesLength - 4, world, 0, 2);\n      path.computeWorldVertices(target, 0, 2, world, verticesLength - 4, 2);\n      world[verticesLength - 2] = world[0];\n      world[verticesLength - 1] = world[1];\n    } else {\n      curveCount--;\n      verticesLength -= 4;\n      world = Utils.setArraySize(this.world, verticesLength);\n      path.computeWorldVertices(target, 2, verticesLength, world, 0, 2);\n    }\n    const curves = Utils.setArraySize(this.curves, curveCount);\n    let pathLength = 0;\n    let x1 = world[0];\n    let y1 = world[1];\n    let cx1 = 0;\n    let cy1 = 0;\n    let cx2 = 0;\n    let cy2 = 0;\n    let x2 = 0;\n    let y2 = 0;\n    let tmpx = 0;\n    let tmpy = 0;\n    let dddfx = 0;\n    let dddfy = 0;\n    let ddfx = 0;\n    let ddfy = 0;\n    let dfx = 0;\n    let dfy = 0;\n    for (let i = 0, w = 2; i < curveCount; i++, w += 6) {\n      cx1 = world[w];\n      cy1 = world[w + 1];\n      cx2 = world[w + 2];\n      cy2 = world[w + 3];\n      x2 = world[w + 4];\n      y2 = world[w + 5];\n      tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;\n      tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;\n      dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;\n      dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;\n      ddfx = tmpx * 2 + dddfx;\n      ddfy = tmpy * 2 + dddfy;\n      dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;\n      dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      dfx += ddfx;\n      dfy += ddfy;\n      ddfx += dddfx;\n      ddfy += dddfy;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      dfx += ddfx;\n      dfy += ddfy;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      dfx += ddfx + dddfx;\n      dfy += ddfy + dddfy;\n      pathLength += Math.sqrt(dfx * dfx + dfy * dfy);\n      curves[i] = pathLength;\n      x1 = x2;\n      y1 = y2;\n    }\n    if (percentPosition)\n      position *= pathLength;\n    if (percentSpacing) {\n      for (let i = 0; i < spacesCount; i++)\n        spaces[i] *= pathLength;\n    }\n    const segments = this.segments;\n    let curveLength = 0;\n    for (let i = 0, o = 0, curve = 0, segment = 0; i < spacesCount; i++, o += 3) {\n      const space = spaces[i];\n      position += space;\n      let p = position;\n      if (closed) {\n        p %= pathLength;\n        if (p < 0)\n          p += pathLength;\n        curve = 0;\n      } else if (p < 0) {\n        this.addBeforePosition(p, world, 0, out, o);\n        continue;\n      } else if (p > pathLength) {\n        this.addAfterPosition(p - pathLength, world, verticesLength - 4, out, o);\n        continue;\n      }\n      for (; ; curve++) {\n        const length = curves[curve];\n        if (p > length)\n          continue;\n        if (curve == 0)\n          p /= length;\n        else {\n          const prev = curves[curve - 1];\n          p = (p - prev) / (length - prev);\n        }\n        break;\n      }\n      if (curve != prevCurve) {\n        prevCurve = curve;\n        let ii = curve * 6;\n        x1 = world[ii];\n        y1 = world[ii + 1];\n        cx1 = world[ii + 2];\n        cy1 = world[ii + 3];\n        cx2 = world[ii + 4];\n        cy2 = world[ii + 5];\n        x2 = world[ii + 6];\n        y2 = world[ii + 7];\n        tmpx = (x1 - cx1 * 2 + cx2) * 0.03;\n        tmpy = (y1 - cy1 * 2 + cy2) * 0.03;\n        dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 6e-3;\n        dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 6e-3;\n        ddfx = tmpx * 2 + dddfx;\n        ddfy = tmpy * 2 + dddfy;\n        dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;\n        dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;\n        curveLength = Math.sqrt(dfx * dfx + dfy * dfy);\n        segments[0] = curveLength;\n        for (ii = 1; ii < 8; ii++) {\n          dfx += ddfx;\n          dfy += ddfy;\n          ddfx += dddfx;\n          ddfy += dddfy;\n          curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n          segments[ii] = curveLength;\n        }\n        dfx += ddfx;\n        dfy += ddfy;\n        curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n        segments[8] = curveLength;\n        dfx += ddfx + dddfx;\n        dfy += ddfy + dddfy;\n        curveLength += Math.sqrt(dfx * dfx + dfy * dfy);\n        segments[9] = curveLength;\n        segment = 0;\n      }\n      p *= curveLength;\n      for (; ; segment++) {\n        const length = segments[segment];\n        if (p > length)\n          continue;\n        if (segment == 0)\n          p /= length;\n        else {\n          const prev = segments[segment - 1];\n          p = segment + (p - prev) / (length - prev);\n        }\n        break;\n      }\n      this.addCurvePosition(p * 0.1, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents || i > 0 && space == 0);\n    }\n    return out;\n  }\n  addBeforePosition(p, temp, i, out, o) {\n    const x1 = temp[i];\n    const y1 = temp[i + 1];\n    const dx = temp[i + 2] - x1;\n    const dy = temp[i + 3] - y1;\n    const r = Math.atan2(dy, dx);\n    out[o] = x1 + p * Math.cos(r);\n    out[o + 1] = y1 + p * Math.sin(r);\n    out[o + 2] = r;\n  }\n  addAfterPosition(p, temp, i, out, o) {\n    const x1 = temp[i + 2];\n    const y1 = temp[i + 3];\n    const dx = x1 - temp[i];\n    const dy = y1 - temp[i + 1];\n    const r = Math.atan2(dy, dx);\n    out[o] = x1 + p * Math.cos(r);\n    out[o + 1] = y1 + p * Math.sin(r);\n    out[o + 2] = r;\n  }\n  addCurvePosition(p, x1, y1, cx1, cy1, cx2, cy2, x2, y2, out, o, tangents) {\n    if (p == 0 || isNaN(p))\n      p = 1e-4;\n    const tt = p * p;\n    const ttt = tt * p;\n    const u = 1 - p;\n    const uu = u * u;\n    const uuu = uu * u;\n    const ut = u * p;\n    const ut3 = ut * 3;\n    const uut3 = u * ut3;\n    const utt3 = ut3 * p;\n    const x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;\n    const y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;\n    out[o] = x;\n    out[o + 1] = y;\n    if (tangents)\n      out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt), x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));\n  }\n};\nlet PathConstraint = _PathConstraint;\nPathConstraint.NONE = -1;\nPathConstraint.BEFORE = -2;\nPathConstraint.AFTER = -3;\nPathConstraint.epsilon = 1e-5;\n\nexport { PathConstraint };\n//# sourceMappingURL=PathConstraint.mjs.map\n","import { Vector2, MathUtils } from '@pixi-spine/base';\n\nclass TransformConstraint {\n  constructor(data, skeleton) {\n    this.rotateMix = 0;\n    this.translateMix = 0;\n    this.scaleMix = 0;\n    this.shearMix = 0;\n    this.temp = new Vector2();\n    this.active = false;\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    this.data = data;\n    this.rotateMix = data.rotateMix;\n    this.translateMix = data.translateMix;\n    this.scaleMix = data.scaleMix;\n    this.shearMix = data.shearMix;\n    this.bones = new Array();\n    for (let i = 0; i < data.bones.length; i++)\n      this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n  }\n  isActive() {\n    return this.active;\n  }\n  apply() {\n    this.update();\n  }\n  update() {\n    if (this.data.local) {\n      if (this.data.relative)\n        this.applyRelativeLocal();\n      else\n        this.applyAbsoluteLocal();\n    } else if (this.data.relative)\n      this.applyRelativeWorld();\n    else\n      this.applyAbsoluteWorld();\n  }\n  applyAbsoluteWorld() {\n    const rotateMix = this.rotateMix;\n    const translateMix = this.translateMix;\n    const scaleMix = this.scaleMix;\n    const shearMix = this.shearMix;\n    const target = this.target;\n    const targetMat = target.matrix;\n    const ta = targetMat.a;\n    const tb = targetMat.c;\n    const tc = targetMat.b;\n    const td = targetMat.d;\n    const degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n    const offsetRotation = this.data.offsetRotation * degRadReflect;\n    const offsetShearY = this.data.offsetShearY * degRadReflect;\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      let modified = false;\n      const mat = bone.matrix;\n      if (rotateMix != 0) {\n        const a = mat.a;\n        const b = mat.c;\n        const c = mat.b;\n        const d = mat.d;\n        let r = Math.atan2(tc, ta) - Math.atan2(c, a) + offsetRotation;\n        if (r > MathUtils.PI)\n          r -= MathUtils.PI2;\n        else if (r < -MathUtils.PI)\n          r += MathUtils.PI2;\n        r *= rotateMix;\n        const cos = Math.cos(r);\n        const sin = Math.sin(r);\n        mat.a = cos * a - sin * c;\n        mat.c = cos * b - sin * d;\n        mat.b = sin * a + cos * c;\n        mat.d = sin * b + cos * d;\n        modified = true;\n      }\n      if (translateMix != 0) {\n        const temp = this.temp;\n        target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n        mat.tx += (temp.x - mat.tx) * translateMix;\n        mat.ty += (temp.y - mat.ty) * translateMix;\n        modified = true;\n      }\n      if (scaleMix > 0) {\n        let s = Math.sqrt(mat.a * mat.a + mat.b * mat.b);\n        let ts = Math.sqrt(ta * ta + tc * tc);\n        if (s > 1e-5)\n          s = (s + (ts - s + this.data.offsetScaleX) * scaleMix) / s;\n        mat.a *= s;\n        mat.b *= s;\n        s = Math.sqrt(mat.c * mat.c + mat.d * mat.d);\n        ts = Math.sqrt(tb * tb + td * td);\n        if (s > 1e-5)\n          s = (s + (ts - s + this.data.offsetScaleY) * scaleMix) / s;\n        mat.c *= s;\n        mat.d *= s;\n        modified = true;\n      }\n      if (shearMix > 0) {\n        const b = mat.c;\n        const d = mat.d;\n        const by = Math.atan2(d, b);\n        let r = Math.atan2(td, tb) - Math.atan2(tc, ta) - (by - Math.atan2(mat.b, mat.a));\n        if (r > MathUtils.PI)\n          r -= MathUtils.PI2;\n        else if (r < -MathUtils.PI)\n          r += MathUtils.PI2;\n        r = by + (r + offsetShearY) * shearMix;\n        const s = Math.sqrt(b * b + d * d);\n        mat.c = Math.cos(r) * s;\n        mat.d = Math.sin(r) * s;\n        modified = true;\n      }\n      if (modified)\n        bone.appliedValid = false;\n    }\n  }\n  applyRelativeWorld() {\n    const rotateMix = this.rotateMix;\n    const translateMix = this.translateMix;\n    const scaleMix = this.scaleMix;\n    const shearMix = this.shearMix;\n    const target = this.target;\n    const targetMat = target.matrix;\n    const ta = targetMat.a;\n    const tb = targetMat.c;\n    const tc = targetMat.b;\n    const td = targetMat.d;\n    const degRadReflect = ta * td - tb * tc > 0 ? MathUtils.degRad : -MathUtils.degRad;\n    const offsetRotation = this.data.offsetRotation * degRadReflect;\n    const offsetShearY = this.data.offsetShearY * degRadReflect;\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      let modified = false;\n      const mat = bone.matrix;\n      if (rotateMix != 0) {\n        const a = mat.a;\n        const b = mat.c;\n        const c = mat.b;\n        const d = mat.d;\n        let r = Math.atan2(tc, ta) + offsetRotation;\n        if (r > MathUtils.PI)\n          r -= MathUtils.PI2;\n        else if (r < -MathUtils.PI)\n          r += MathUtils.PI2;\n        r *= rotateMix;\n        const cos = Math.cos(r);\n        const sin = Math.sin(r);\n        mat.a = cos * a - sin * c;\n        mat.c = cos * b - sin * d;\n        mat.b = sin * a + cos * c;\n        mat.d = sin * b + cos * d;\n        modified = true;\n      }\n      if (translateMix != 0) {\n        const temp = this.temp;\n        target.localToWorld(temp.set(this.data.offsetX, this.data.offsetY));\n        mat.tx += temp.x * translateMix;\n        mat.ty += temp.y * translateMix;\n        modified = true;\n      }\n      if (scaleMix > 0) {\n        let s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.data.offsetScaleX) * scaleMix + 1;\n        mat.a *= s;\n        mat.b *= s;\n        s = (Math.sqrt(tb * tb + td * td) - 1 + this.data.offsetScaleY) * scaleMix + 1;\n        mat.c *= s;\n        mat.d *= s;\n        modified = true;\n      }\n      if (shearMix > 0) {\n        let r = Math.atan2(td, tb) - Math.atan2(tc, ta);\n        if (r > MathUtils.PI)\n          r -= MathUtils.PI2;\n        else if (r < -MathUtils.PI)\n          r += MathUtils.PI2;\n        const b = mat.c;\n        const d = mat.d;\n        r = Math.atan2(d, b) + (r - MathUtils.PI / 2 + offsetShearY) * shearMix;\n        const s = Math.sqrt(b * b + d * d);\n        mat.c = Math.cos(r) * s;\n        mat.d = Math.sin(r) * s;\n        modified = true;\n      }\n      if (modified)\n        bone.appliedValid = false;\n    }\n  }\n  applyAbsoluteLocal() {\n    const rotateMix = this.rotateMix;\n    const translateMix = this.translateMix;\n    const scaleMix = this.scaleMix;\n    const shearMix = this.shearMix;\n    const target = this.target;\n    if (!target.appliedValid)\n      target.updateAppliedTransform();\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      if (!bone.appliedValid)\n        bone.updateAppliedTransform();\n      let rotation = bone.arotation;\n      if (rotateMix != 0) {\n        let r = target.arotation - rotation + this.data.offsetRotation;\n        r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;\n        rotation += r * rotateMix;\n      }\n      let x = bone.ax;\n      let y = bone.ay;\n      if (translateMix != 0) {\n        x += (target.ax - x + this.data.offsetX) * translateMix;\n        y += (target.ay - y + this.data.offsetY) * translateMix;\n      }\n      let scaleX = bone.ascaleX;\n      let scaleY = bone.ascaleY;\n      if (scaleMix > 0) {\n        if (scaleX > 1e-5)\n          scaleX = (scaleX + (target.ascaleX - scaleX + this.data.offsetScaleX) * scaleMix) / scaleX;\n        if (scaleY > 1e-5)\n          scaleY = (scaleY + (target.ascaleY - scaleY + this.data.offsetScaleY) * scaleMix) / scaleY;\n      }\n      const shearY = bone.ashearY;\n      if (shearMix > 0) {\n        let r = target.ashearY - shearY + this.data.offsetShearY;\n        r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;\n        bone.shearY += r * shearMix;\n      }\n      bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n    }\n  }\n  applyRelativeLocal() {\n    const rotateMix = this.rotateMix;\n    const translateMix = this.translateMix;\n    const scaleMix = this.scaleMix;\n    const shearMix = this.shearMix;\n    const target = this.target;\n    if (!target.appliedValid)\n      target.updateAppliedTransform();\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      if (!bone.appliedValid)\n        bone.updateAppliedTransform();\n      let rotation = bone.arotation;\n      if (rotateMix != 0)\n        rotation += (target.arotation + this.data.offsetRotation) * rotateMix;\n      let x = bone.ax;\n      let y = bone.ay;\n      if (translateMix != 0) {\n        x += (target.ax + this.data.offsetX) * translateMix;\n        y += (target.ay + this.data.offsetY) * translateMix;\n      }\n      let scaleX = bone.ascaleX;\n      let scaleY = bone.ascaleY;\n      if (scaleMix > 0) {\n        if (scaleX > 1e-5)\n          scaleX *= (target.ascaleX - 1 + this.data.offsetScaleX) * scaleMix + 1;\n        if (scaleY > 1e-5)\n          scaleY *= (target.ascaleY - 1 + this.data.offsetScaleY) * scaleMix + 1;\n      }\n      let shearY = bone.ashearY;\n      if (shearMix > 0)\n        shearY += (target.ashearY + this.data.offsetShearY) * shearMix;\n      bone.updateWorldTransformWith(x, y, rotation, scaleX, scaleY, bone.ashearX, shearY);\n    }\n  }\n}\n\nexport { TransformConstraint };\n//# sourceMappingURL=TransformConstraint.mjs.map\n","import './attachments/Attachment.mjs';\nimport { Color, Utils } from '@pixi-spine/base';\nimport { MeshAttachment } from './attachments/MeshAttachment.mjs';\nimport { PathAttachment } from './attachments/PathAttachment.mjs';\nimport { RegionAttachment } from './attachments/RegionAttachment.mjs';\nimport { Bone } from './Bone.mjs';\nimport { Slot } from './Slot.mjs';\nimport { IkConstraint } from './IkConstraint.mjs';\nimport { TransformConstraint } from './TransformConstraint.mjs';\nimport { PathConstraint } from './PathConstraint.mjs';\n\nconst _Skeleton = class {\n  constructor(data) {\n    this._updateCache = new Array();\n    this.updateCacheReset = new Array();\n    this.time = 0;\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.x = 0;\n    this.y = 0;\n    if (data == null)\n      throw new Error(\"data cannot be null.\");\n    this.data = data;\n    this.bones = new Array();\n    for (let i = 0; i < data.bones.length; i++) {\n      const boneData = data.bones[i];\n      let bone;\n      if (boneData.parent == null)\n        bone = new Bone(boneData, this, null);\n      else {\n        const parent = this.bones[boneData.parent.index];\n        bone = new Bone(boneData, this, parent);\n        parent.children.push(bone);\n      }\n      this.bones.push(bone);\n    }\n    this.slots = new Array();\n    this.drawOrder = new Array();\n    for (let i = 0; i < data.slots.length; i++) {\n      const slotData = data.slots[i];\n      const bone = this.bones[slotData.boneData.index];\n      const slot = new Slot(slotData, bone);\n      this.slots.push(slot);\n      this.drawOrder.push(slot);\n    }\n    this.ikConstraints = new Array();\n    for (let i = 0; i < data.ikConstraints.length; i++) {\n      const ikConstraintData = data.ikConstraints[i];\n      this.ikConstraints.push(new IkConstraint(ikConstraintData, this));\n    }\n    this.transformConstraints = new Array();\n    for (let i = 0; i < data.transformConstraints.length; i++) {\n      const transformConstraintData = data.transformConstraints[i];\n      this.transformConstraints.push(new TransformConstraint(transformConstraintData, this));\n    }\n    this.pathConstraints = new Array();\n    for (let i = 0; i < data.pathConstraints.length; i++) {\n      const pathConstraintData = data.pathConstraints[i];\n      this.pathConstraints.push(new PathConstraint(pathConstraintData, this));\n    }\n    this.color = new Color(1, 1, 1, 1);\n    this.updateCache();\n  }\n  updateCache() {\n    const updateCache = this._updateCache;\n    updateCache.length = 0;\n    this.updateCacheReset.length = 0;\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      bone.sorted = bone.data.skinRequired;\n      bone.active = !bone.sorted;\n    }\n    if (this.skin != null) {\n      const skinBones = this.skin.bones;\n      for (let i = 0, n = this.skin.bones.length; i < n; i++) {\n        let bone = this.bones[skinBones[i].index];\n        do {\n          bone.sorted = false;\n          bone.active = true;\n          bone = bone.parent;\n        } while (bone != null);\n      }\n    }\n    const ikConstraints = this.ikConstraints;\n    const transformConstraints = this.transformConstraints;\n    const pathConstraints = this.pathConstraints;\n    const ikCount = ikConstraints.length;\n    const transformCount = transformConstraints.length;\n    const pathCount = pathConstraints.length;\n    const constraintCount = ikCount + transformCount + pathCount;\n    outer:\n      for (let i = 0; i < constraintCount; i++) {\n        for (let ii = 0; ii < ikCount; ii++) {\n          const constraint = ikConstraints[ii];\n          if (constraint.data.order == i) {\n            this.sortIkConstraint(constraint);\n            continue outer;\n          }\n        }\n        for (let ii = 0; ii < transformCount; ii++) {\n          const constraint = transformConstraints[ii];\n          if (constraint.data.order == i) {\n            this.sortTransformConstraint(constraint);\n            continue outer;\n          }\n        }\n        for (let ii = 0; ii < pathCount; ii++) {\n          const constraint = pathConstraints[ii];\n          if (constraint.data.order == i) {\n            this.sortPathConstraint(constraint);\n            continue outer;\n          }\n        }\n      }\n    for (let i = 0, n = bones.length; i < n; i++)\n      this.sortBone(bones[i]);\n  }\n  sortIkConstraint(constraint) {\n    constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true));\n    if (!constraint.active)\n      return;\n    const target = constraint.target;\n    this.sortBone(target);\n    const constrained = constraint.bones;\n    const parent = constrained[0];\n    this.sortBone(parent);\n    if (constrained.length > 1) {\n      const child = constrained[constrained.length - 1];\n      if (!(this._updateCache.indexOf(child) > -1))\n        this.updateCacheReset.push(child);\n    }\n    this._updateCache.push(constraint);\n    this.sortReset(parent.children);\n    constrained[constrained.length - 1].sorted = true;\n  }\n  sortPathConstraint(constraint) {\n    constraint.active = constraint.target.bone.isActive() && (!constraint.data.skinRequired || this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true));\n    if (!constraint.active)\n      return;\n    const slot = constraint.target;\n    const slotIndex = slot.data.index;\n    const slotBone = slot.bone;\n    if (this.skin != null)\n      this.sortPathConstraintAttachment(this.skin, slotIndex, slotBone);\n    if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin)\n      this.sortPathConstraintAttachment(this.data.defaultSkin, slotIndex, slotBone);\n    for (let i = 0, n = this.data.skins.length; i < n; i++)\n      this.sortPathConstraintAttachment(this.data.skins[i], slotIndex, slotBone);\n    const attachment = slot.getAttachment();\n    if (attachment instanceof PathAttachment)\n      this.sortPathConstraintAttachmentWith(attachment, slotBone);\n    const constrained = constraint.bones;\n    const boneCount = constrained.length;\n    for (let i = 0; i < boneCount; i++)\n      this.sortBone(constrained[i]);\n    this._updateCache.push(constraint);\n    for (let i = 0; i < boneCount; i++)\n      this.sortReset(constrained[i].children);\n    for (let i = 0; i < boneCount; i++)\n      constrained[i].sorted = true;\n  }\n  sortTransformConstraint(constraint) {\n    constraint.active = constraint.target.isActive() && (!constraint.data.skinRequired || this.skin != null && Utils.contains(this.skin.constraints, constraint.data, true));\n    if (!constraint.active)\n      return;\n    this.sortBone(constraint.target);\n    const constrained = constraint.bones;\n    const boneCount = constrained.length;\n    if (constraint.data.local) {\n      for (let i = 0; i < boneCount; i++) {\n        const child = constrained[i];\n        this.sortBone(child.parent);\n        if (!(this._updateCache.indexOf(child) > -1))\n          this.updateCacheReset.push(child);\n      }\n    } else {\n      for (let i = 0; i < boneCount; i++) {\n        this.sortBone(constrained[i]);\n      }\n    }\n    this._updateCache.push(constraint);\n    for (let ii = 0; ii < boneCount; ii++)\n      this.sortReset(constrained[ii].children);\n    for (let ii = 0; ii < boneCount; ii++)\n      constrained[ii].sorted = true;\n  }\n  sortPathConstraintAttachment(skin, slotIndex, slotBone) {\n    const attachments = skin.attachments[slotIndex];\n    if (!attachments)\n      return;\n    for (const key in attachments) {\n      this.sortPathConstraintAttachmentWith(attachments[key], slotBone);\n    }\n  }\n  sortPathConstraintAttachmentWith(attachment, slotBone) {\n    if (!(attachment instanceof PathAttachment))\n      return;\n    const pathBones = attachment.bones;\n    if (pathBones == null)\n      this.sortBone(slotBone);\n    else {\n      const bones = this.bones;\n      let i = 0;\n      while (i < pathBones.length) {\n        const boneCount = pathBones[i++];\n        for (let n = i + boneCount; i < n; i++) {\n          const boneIndex = pathBones[i];\n          this.sortBone(bones[boneIndex]);\n        }\n      }\n    }\n  }\n  sortBone(bone) {\n    if (bone.sorted)\n      return;\n    const parent = bone.parent;\n    if (parent != null)\n      this.sortBone(parent);\n    bone.sorted = true;\n    this._updateCache.push(bone);\n  }\n  sortReset(bones) {\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      if (!bone.active)\n        continue;\n      if (bone.sorted)\n        this.sortReset(bone.children);\n      bone.sorted = false;\n    }\n  }\n  /** Updates the world transform for each bone and applies constraints. */\n  updateWorldTransform() {\n    const updateCacheReset = this.updateCacheReset;\n    for (let i = 0, n = updateCacheReset.length; i < n; i++) {\n      const bone = updateCacheReset[i];\n      bone.ax = bone.x;\n      bone.ay = bone.y;\n      bone.arotation = bone.rotation;\n      bone.ascaleX = bone.scaleX;\n      bone.ascaleY = bone.scaleY;\n      bone.ashearX = bone.shearX;\n      bone.ashearY = bone.shearY;\n      bone.appliedValid = true;\n    }\n    const updateCache = this._updateCache;\n    for (let i = 0, n = updateCache.length; i < n; i++)\n      updateCache[i].update();\n  }\n  /** Sets the bones, constraints, and slots to their setup pose values. */\n  setToSetupPose() {\n    this.setBonesToSetupPose();\n    this.setSlotsToSetupPose();\n  }\n  /** Sets the bones and constraints to their setup pose values. */\n  setBonesToSetupPose() {\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++)\n      bones[i].setToSetupPose();\n    const ikConstraints = this.ikConstraints;\n    for (let i = 0, n = ikConstraints.length; i < n; i++) {\n      const constraint = ikConstraints[i];\n      constraint.mix = constraint.data.mix;\n      constraint.softness = constraint.data.softness;\n      constraint.bendDirection = constraint.data.bendDirection;\n      constraint.compress = constraint.data.compress;\n      constraint.stretch = constraint.data.stretch;\n    }\n    const transformConstraints = this.transformConstraints;\n    for (let i = 0, n = transformConstraints.length; i < n; i++) {\n      const constraint = transformConstraints[i];\n      const data = constraint.data;\n      constraint.rotateMix = data.rotateMix;\n      constraint.translateMix = data.translateMix;\n      constraint.scaleMix = data.scaleMix;\n      constraint.shearMix = data.shearMix;\n    }\n    const pathConstraints = this.pathConstraints;\n    for (let i = 0, n = pathConstraints.length; i < n; i++) {\n      const constraint = pathConstraints[i];\n      const data = constraint.data;\n      constraint.position = data.position;\n      constraint.spacing = data.spacing;\n      constraint.rotateMix = data.rotateMix;\n      constraint.translateMix = data.translateMix;\n    }\n  }\n  setSlotsToSetupPose() {\n    const slots = this.slots;\n    Utils.arrayCopy(slots, 0, this.drawOrder, 0, slots.length);\n    for (let i = 0, n = slots.length; i < n; i++)\n      slots[i].setToSetupPose();\n  }\n  /** @return May return null. */\n  getRootBone() {\n    if (this.bones.length == 0)\n      return null;\n    return this.bones[0];\n  }\n  /** @return May be null. */\n  findBone(boneName) {\n    if (boneName == null)\n      throw new Error(\"boneName cannot be null.\");\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      if (bone.data.name == boneName)\n        return bone;\n    }\n    return null;\n  }\n  /** @return -1 if the bone was not found. */\n  findBoneIndex(boneName) {\n    if (boneName == null)\n      throw new Error(\"boneName cannot be null.\");\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++)\n      if (bones[i].data.name == boneName)\n        return i;\n    return -1;\n  }\n  /** @return May be null. */\n  findSlot(slotName) {\n    if (slotName == null)\n      throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++) {\n      const slot = slots[i];\n      if (slot.data.name == slotName)\n        return slot;\n    }\n    return null;\n  }\n  /** @return -1 if the bone was not found. */\n  findSlotIndex(slotName) {\n    if (slotName == null)\n      throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++)\n      if (slots[i].data.name == slotName)\n        return i;\n    return -1;\n  }\n  /** Sets a skin by name.\n   * @see #setSkin(Skin) */\n  setSkinByName(skinName) {\n    const skin = this.data.findSkin(skinName);\n    if (skin == null)\n      throw new Error(`Skin not found: ${skinName}`);\n    this.setSkin(skin);\n  }\n  /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n   * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\n   * old skin, each slot's setup mode attachment is attached from the new skin.\n   * @param newSkin May be null. */\n  setSkin(newSkin) {\n    if (newSkin == this.skin)\n      return;\n    if (newSkin != null) {\n      if (this.skin != null)\n        newSkin.attachAll(this, this.skin);\n      else {\n        const slots = this.slots;\n        for (let i = 0, n = slots.length; i < n; i++) {\n          const slot = slots[i];\n          const name = slot.data.attachmentName;\n          if (name != null) {\n            const attachment = newSkin.getAttachment(i, name);\n            if (attachment != null)\n              slot.setAttachment(attachment);\n          }\n        }\n      }\n    }\n    this.skin = newSkin;\n    this.updateCache();\n  }\n  /** @return May be null. */\n  getAttachmentByName(slotName, attachmentName) {\n    return this.getAttachment(this.data.findSlotIndex(slotName), attachmentName);\n  }\n  /** @return May be null. */\n  getAttachment(slotIndex, attachmentName) {\n    if (attachmentName == null)\n      throw new Error(\"attachmentName cannot be null.\");\n    if (this.skin != null) {\n      const attachment = this.skin.getAttachment(slotIndex, attachmentName);\n      if (attachment != null)\n        return attachment;\n    }\n    if (this.data.defaultSkin != null)\n      return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n    return null;\n  }\n  /** @param attachmentName May be null. */\n  setAttachment(slotName, attachmentName) {\n    if (slotName == null)\n      throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++) {\n      const slot = slots[i];\n      if (slot.data.name == slotName) {\n        let attachment = null;\n        if (attachmentName != null) {\n          attachment = this.getAttachment(i, attachmentName);\n          if (attachment == null)\n            throw new Error(`Attachment not found: ${attachmentName}, for slot: ${slotName}`);\n        }\n        slot.setAttachment(attachment);\n        return;\n      }\n    }\n    throw new Error(`Slot not found: ${slotName}`);\n  }\n  /** @return May be null. */\n  findIkConstraint(constraintName) {\n    if (constraintName == null)\n      throw new Error(\"constraintName cannot be null.\");\n    const ikConstraints = this.ikConstraints;\n    for (let i = 0, n = ikConstraints.length; i < n; i++) {\n      const ikConstraint = ikConstraints[i];\n      if (ikConstraint.data.name == constraintName)\n        return ikConstraint;\n    }\n    return null;\n  }\n  /** @return May be null. */\n  findTransformConstraint(constraintName) {\n    if (constraintName == null)\n      throw new Error(\"constraintName cannot be null.\");\n    const transformConstraints = this.transformConstraints;\n    for (let i = 0, n = transformConstraints.length; i < n; i++) {\n      const constraint = transformConstraints[i];\n      if (constraint.data.name == constraintName)\n        return constraint;\n    }\n    return null;\n  }\n  /** @return May be null. */\n  findPathConstraint(constraintName) {\n    if (constraintName == null)\n      throw new Error(\"constraintName cannot be null.\");\n    const pathConstraints = this.pathConstraints;\n    for (let i = 0, n = pathConstraints.length; i < n; i++) {\n      const constraint = pathConstraints[i];\n      if (constraint.data.name == constraintName)\n        return constraint;\n    }\n    return null;\n  }\n  /** Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n   * @param offset The distance from the skeleton origin to the bottom left corner of the AABB.\n   * @param size The width and height of the AABB.\n   * @param temp Working memory */\n  getBounds(offset, size, temp = new Array(2)) {\n    if (offset == null)\n      throw new Error(\"offset cannot be null.\");\n    if (size == null)\n      throw new Error(\"size cannot be null.\");\n    const drawOrder = this.drawOrder;\n    let minX = Number.POSITIVE_INFINITY;\n    let minY = Number.POSITIVE_INFINITY;\n    let maxX = Number.NEGATIVE_INFINITY;\n    let maxY = Number.NEGATIVE_INFINITY;\n    for (let i = 0, n = drawOrder.length; i < n; i++) {\n      const slot = drawOrder[i];\n      if (!slot.bone.active)\n        continue;\n      let verticesLength = 0;\n      let vertices = null;\n      const attachment = slot.getAttachment();\n      if (attachment instanceof RegionAttachment) {\n        verticesLength = 8;\n        vertices = Utils.setArraySize(temp, verticesLength, 0);\n        attachment.computeWorldVertices(slot.bone, vertices, 0, 2);\n      } else if (attachment instanceof MeshAttachment) {\n        const mesh = attachment;\n        verticesLength = mesh.worldVerticesLength;\n        vertices = Utils.setArraySize(temp, verticesLength, 0);\n        mesh.computeWorldVertices(slot, 0, verticesLength, vertices, 0, 2);\n      }\n      if (vertices != null) {\n        for (let ii = 0, nn = vertices.length; ii < nn; ii += 2) {\n          const x = vertices[ii];\n          const y = vertices[ii + 1];\n          minX = Math.min(minX, x);\n          minY = Math.min(minY, y);\n          maxX = Math.max(maxX, x);\n          maxY = Math.max(maxY, y);\n        }\n      }\n    }\n    offset.set(minX, minY);\n    size.set(maxX - minX, maxY - minY);\n  }\n  update(delta) {\n    this.time += delta;\n  }\n  get flipX() {\n    return this.scaleX == -1;\n  }\n  set flipX(value) {\n    if (!_Skeleton.deprecatedWarning1) {\n      _Skeleton.deprecatedWarning1 = true;\n      console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\n    }\n    this.scaleX = value ? 1 : -1;\n  }\n  get flipY() {\n    return this.scaleY == -1;\n  }\n  set flipY(value) {\n    if (!_Skeleton.deprecatedWarning1) {\n      _Skeleton.deprecatedWarning1 = true;\n      console.warn(\"Spine Deprecation Warning: `Skeleton.flipX/flipY` was deprecated, please use scaleX/scaleY\");\n    }\n    this.scaleY = value ? 1 : -1;\n  }\n};\nlet Skeleton = _Skeleton;\nSkeleton.deprecatedWarning1 = false;\n\nexport { Skeleton };\n//# sourceMappingURL=Skeleton.mjs.map\n","class SkeletonData {\n  constructor() {\n    this.bones = new Array();\n    // Ordered parents first.\n    this.slots = new Array();\n    // Setup pose draw order.\n    this.skins = new Array();\n    this.events = new Array();\n    this.animations = new Array();\n    this.ikConstraints = new Array();\n    this.transformConstraints = new Array();\n    this.pathConstraints = new Array();\n    // Nonessential\n    this.fps = 0;\n  }\n  findBone(boneName) {\n    if (boneName == null)\n      throw new Error(\"boneName cannot be null.\");\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++) {\n      const bone = bones[i];\n      if (bone.name == boneName)\n        return bone;\n    }\n    return null;\n  }\n  findBoneIndex(boneName) {\n    if (boneName == null)\n      throw new Error(\"boneName cannot be null.\");\n    const bones = this.bones;\n    for (let i = 0, n = bones.length; i < n; i++)\n      if (bones[i].name == boneName)\n        return i;\n    return -1;\n  }\n  findSlot(slotName) {\n    if (slotName == null)\n      throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++) {\n      const slot = slots[i];\n      if (slot.name == slotName)\n        return slot;\n    }\n    return null;\n  }\n  findSlotIndex(slotName) {\n    if (slotName == null)\n      throw new Error(\"slotName cannot be null.\");\n    const slots = this.slots;\n    for (let i = 0, n = slots.length; i < n; i++)\n      if (slots[i].name == slotName)\n        return i;\n    return -1;\n  }\n  findSkin(skinName) {\n    if (skinName == null)\n      throw new Error(\"skinName cannot be null.\");\n    const skins = this.skins;\n    for (let i = 0, n = skins.length; i < n; i++) {\n      const skin = skins[i];\n      if (skin.name == skinName)\n        return skin;\n    }\n    return null;\n  }\n  findEvent(eventDataName) {\n    if (eventDataName == null)\n      throw new Error(\"eventDataName cannot be null.\");\n    const events = this.events;\n    for (let i = 0, n = events.length; i < n; i++) {\n      const event = events[i];\n      if (event.name == eventDataName)\n        return event;\n    }\n    return null;\n  }\n  findAnimation(animationName) {\n    if (animationName == null)\n      throw new Error(\"animationName cannot be null.\");\n    const animations = this.animations;\n    for (let i = 0, n = animations.length; i < n; i++) {\n      const animation = animations[i];\n      if (animation.name == animationName)\n        return animation;\n    }\n    return null;\n  }\n  findIkConstraint(constraintName) {\n    if (constraintName == null)\n      throw new Error(\"constraintName cannot be null.\");\n    const ikConstraints = this.ikConstraints;\n    for (let i = 0, n = ikConstraints.length; i < n; i++) {\n      const constraint = ikConstraints[i];\n      if (constraint.name == constraintName)\n        return constraint;\n    }\n    return null;\n  }\n  findTransformConstraint(constraintName) {\n    if (constraintName == null)\n      throw new Error(\"constraintName cannot be null.\");\n    const transformConstraints = this.transformConstraints;\n    for (let i = 0, n = transformConstraints.length; i < n; i++) {\n      const constraint = transformConstraints[i];\n      if (constraint.name == constraintName)\n        return constraint;\n    }\n    return null;\n  }\n  findPathConstraint(constraintName) {\n    if (constraintName == null)\n      throw new Error(\"constraintName cannot be null.\");\n    const pathConstraints = this.pathConstraints;\n    for (let i = 0, n = pathConstraints.length; i < n; i++) {\n      const constraint = pathConstraints[i];\n      if (constraint.name == constraintName)\n        return constraint;\n    }\n    return null;\n  }\n  findPathConstraintIndex(pathConstraintName) {\n    if (pathConstraintName == null)\n      throw new Error(\"pathConstraintName cannot be null.\");\n    const pathConstraints = this.pathConstraints;\n    for (let i = 0, n = pathConstraints.length; i < n; i++)\n      if (pathConstraints[i].name == pathConstraintName)\n        return i;\n    return -1;\n  }\n}\n\nexport { SkeletonData };\n//# sourceMappingURL=SkeletonData.mjs.map\n","import { Color } from '@pixi-spine/base';\n\nclass SlotData {\n  constructor(index, name, boneData) {\n    this.color = new Color(1, 1, 1, 1);\n    if (index < 0)\n      throw new Error(\"index must be >= 0.\");\n    if (name == null)\n      throw new Error(\"name cannot be null.\");\n    if (boneData == null)\n      throw new Error(\"boneData cannot be null.\");\n    this.index = index;\n    this.name = name;\n    this.boneData = boneData;\n  }\n}\n\nexport { SlotData };\n//# sourceMappingURL=SlotData.mjs.map\n","import { ConstraintData } from './Constraint.mjs';\n\nclass TransformConstraintData extends ConstraintData {\n  constructor(name) {\n    super(name, 0, false);\n    this.bones = new Array();\n    this.rotateMix = 0;\n    this.translateMix = 0;\n    this.scaleMix = 0;\n    this.shearMix = 0;\n    this.offsetRotation = 0;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.offsetScaleX = 0;\n    this.offsetScaleY = 0;\n    this.offsetShearY = 0;\n    this.relative = false;\n    this.local = false;\n  }\n}\n\nexport { TransformConstraintData };\n//# sourceMappingURL=TransformConstraintData.mjs.map\n","import './attachments/Attachment.mjs';\nimport '@pixi-spine/base';\nimport { MeshAttachment } from './attachments/MeshAttachment.mjs';\nimport './attachments/RegionAttachment.mjs';\n\nclass SkinEntry {\n  constructor(slotIndex, name, attachment) {\n    this.slotIndex = slotIndex;\n    this.name = name;\n    this.attachment = attachment;\n  }\n}\nclass Skin {\n  constructor(name) {\n    this.attachments = new Array();\n    this.bones = Array();\n    this.constraints = new Array();\n    if (name == null)\n      throw new Error(\"name cannot be null.\");\n    this.name = name;\n  }\n  setAttachment(slotIndex, name, attachment) {\n    if (attachment == null)\n      throw new Error(\"attachment cannot be null.\");\n    const attachments = this.attachments;\n    if (slotIndex >= attachments.length)\n      attachments.length = slotIndex + 1;\n    if (!attachments[slotIndex])\n      attachments[slotIndex] = {};\n    attachments[slotIndex][name] = attachment;\n  }\n  addSkin(skin) {\n    for (let i = 0; i < skin.bones.length; i++) {\n      const bone = skin.bones[i];\n      let contained = false;\n      for (let j = 0; j < this.bones.length; j++) {\n        if (this.bones[j] == bone) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained)\n        this.bones.push(bone);\n    }\n    for (let i = 0; i < skin.constraints.length; i++) {\n      const constraint = skin.constraints[i];\n      let contained = false;\n      for (let j = 0; j < this.constraints.length; j++) {\n        if (this.constraints[j] == constraint) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained)\n        this.constraints.push(constraint);\n    }\n    const attachments = skin.getAttachments();\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n    }\n  }\n  copySkin(skin) {\n    for (let i = 0; i < skin.bones.length; i++) {\n      const bone = skin.bones[i];\n      let contained = false;\n      for (let j = 0; j < this.bones.length; j++) {\n        if (this.bones[j] == bone) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained)\n        this.bones.push(bone);\n    }\n    for (let i = 0; i < skin.constraints.length; i++) {\n      const constraint = skin.constraints[i];\n      let contained = false;\n      for (let j = 0; j < this.constraints.length; j++) {\n        if (this.constraints[j] == constraint) {\n          contained = true;\n          break;\n        }\n      }\n      if (!contained)\n        this.constraints.push(constraint);\n    }\n    const attachments = skin.getAttachments();\n    for (let i = 0; i < attachments.length; i++) {\n      const attachment = attachments[i];\n      if (attachment.attachment == null)\n        continue;\n      if (attachment.attachment instanceof MeshAttachment) {\n        attachment.attachment = attachment.attachment.newLinkedMesh();\n        this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n      } else {\n        attachment.attachment = attachment.attachment.copy();\n        this.setAttachment(attachment.slotIndex, attachment.name, attachment.attachment);\n      }\n    }\n  }\n  /** @return May be null. */\n  getAttachment(slotIndex, name) {\n    const dictionary = this.attachments[slotIndex];\n    return dictionary ? dictionary[name] : null;\n  }\n  removeAttachment(slotIndex, name) {\n    const dictionary = this.attachments[slotIndex];\n    if (dictionary)\n      dictionary[name] = null;\n  }\n  getAttachments() {\n    const entries = new Array();\n    for (let i = 0; i < this.attachments.length; i++) {\n      const slotAttachments = this.attachments[i];\n      if (slotAttachments) {\n        for (const name in slotAttachments) {\n          const attachment = slotAttachments[name];\n          if (attachment)\n            entries.push(new SkinEntry(i, name, attachment));\n        }\n      }\n    }\n    return entries;\n  }\n  getAttachmentsForSlot(slotIndex, attachments) {\n    const slotAttachments = this.attachments[slotIndex];\n    if (slotAttachments) {\n      for (const name in slotAttachments) {\n        const attachment = slotAttachments[name];\n        if (attachment)\n          attachments.push(new SkinEntry(slotIndex, name, attachment));\n      }\n    }\n  }\n  clear() {\n    this.attachments.length = 0;\n    this.bones.length = 0;\n    this.constraints.length = 0;\n  }\n  /** Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached. */\n  attachAll(skeleton, oldSkin) {\n    let slotIndex = 0;\n    for (let i = 0; i < skeleton.slots.length; i++) {\n      const slot = skeleton.slots[i];\n      const slotAttachment = slot.getAttachment();\n      if (slotAttachment && slotIndex < oldSkin.attachments.length) {\n        const dictionary = oldSkin.attachments[slotIndex];\n        for (const key in dictionary) {\n          const skinAttachment = dictionary[key];\n          if (slotAttachment == skinAttachment) {\n            const attachment = this.getAttachment(slotIndex, key);\n            if (attachment != null)\n              slot.setAttachment(attachment);\n            break;\n          }\n        }\n      }\n      slotIndex++;\n    }\n  }\n}\n\nexport { Skin, SkinEntry };\n//# sourceMappingURL=Skin.mjs.map\n","import { Event } from './Event.mjs';\nimport { SkeletonData } from './SkeletonData.mjs';\nimport { SlotData } from './SlotData.mjs';\nimport { BoneData } from './BoneData.mjs';\nimport { IkConstraintData } from './IkConstraintData.mjs';\nimport { TransformConstraintData } from './TransformConstraintData.mjs';\nimport { SpacingMode, PathConstraintData } from './PathConstraintData.mjs';\nimport { Skin } from './Skin.mjs';\nimport { EventData } from './EventData.mjs';\nimport { ColorTimeline, AttachmentTimeline, ScaleTimeline, ShearTimeline, TranslateTimeline, RotateTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintMixTimeline, PathConstraintSpacingTimeline, PathConstraintPositionTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, Animation } from './Animation.mjs';\nimport { TransformMode, PositionMode, RotateMode, BinaryInput, Color, Utils, AttachmentType } from '@pixi-spine/base';\nimport { BLEND_MODES } from '@pixi/core';\n\nconst _SkeletonBinary = class {\n  constructor(attachmentLoader) {\n    this.scale = 1;\n    this.linkedMeshes = new Array();\n    this.attachmentLoader = attachmentLoader;\n  }\n  readSkeletonData(binary) {\n    const scale = this.scale;\n    const skeletonData = new SkeletonData();\n    skeletonData.name = \"\";\n    const input = new BinaryInput(binary);\n    skeletonData.hash = input.readString();\n    skeletonData.version = input.readString();\n    if (skeletonData.version === \"3.8.75\") {\n      const error = `Unsupported skeleton data, 3.8.75 is deprecated, please export with a newer version of Spine.`;\n      console.error(error);\n    }\n    skeletonData.width = input.readFloat();\n    skeletonData.height = input.readFloat();\n    const nonessential = input.readBoolean();\n    if (nonessential) {\n      skeletonData.imagesPath = input.readString();\n    }\n    let n = 0;\n    n = input.readInt(true);\n    for (let i = 0; i < n; i++) {\n      const name = input.readString();\n      const parent = i == 0 ? null : skeletonData.bones[input.readInt(true)];\n      const data = new BoneData(i, name, parent);\n      data.rotation = input.readFloat();\n      data.x = input.readFloat() * scale;\n      data.y = input.readFloat() * scale;\n      data.scaleX = input.readFloat();\n      data.scaleY = input.readFloat();\n      data.shearX = input.readFloat();\n      data.shearY = input.readFloat();\n      data.length = input.readFloat() * scale;\n      data.inheritRotation = input.readBoolean();\n      data.inheritScale = input.readBoolean();\n      if (nonessential)\n        Color.rgba8888ToColor(data.color, input.readInt32());\n      skeletonData.bones.push(data);\n    }\n    n = input.readInt(true);\n    for (let i = 0; i < n; i++) {\n      const slotName = input.readString();\n      const boneData = skeletonData.bones[input.readInt(true)];\n      const data = new SlotData(i, slotName, boneData);\n      Color.rgba8888ToColor(data.color, input.readInt32());\n      data.attachmentName = input.readString();\n      data.blendMode = _SkeletonBinary.BlendModeValues[input.readInt(true)];\n      skeletonData.slots.push(data);\n    }\n    n = input.readInt(true);\n    for (let i = 0, nn; i < n; i++) {\n      const name = input.readString();\n      const data = new IkConstraintData(name);\n      nn = input.readInt(true);\n      for (let ii = 0; ii < nn; ii++)\n        data.bones.push(skeletonData.bones[input.readInt(true)]);\n      data.target = skeletonData.bones[input.readInt(true)];\n      data.mix = input.readFloat();\n      data.bendDirection = input.readByte();\n      skeletonData.ikConstraints.push(data);\n    }\n    n = input.readInt(true);\n    for (let i = 0, nn; i < n; i++) {\n      const name = input.readString();\n      const data = new TransformConstraintData(name);\n      nn = input.readInt(true);\n      for (let ii = 0; ii < nn; ii++)\n        data.bones.push(skeletonData.bones[input.readInt(true)]);\n      data.target = skeletonData.bones[input.readInt(true)];\n      data.offsetRotation = input.readFloat();\n      data.offsetX = input.readFloat() * scale;\n      data.offsetY = input.readFloat() * scale;\n      data.offsetScaleX = input.readFloat();\n      data.offsetScaleY = input.readFloat();\n      data.offsetShearY = input.readFloat();\n      data.rotateMix = input.readFloat();\n      data.translateMix = input.readFloat();\n      data.scaleMix = input.readFloat();\n      data.shearMix = input.readFloat();\n      skeletonData.transformConstraints.push(data);\n    }\n    n = input.readInt(true);\n    for (let i = 0, nn; i < n; i++) {\n      const name = input.readString();\n      const data = new PathConstraintData(name);\n      nn = input.readInt(true);\n      for (let ii = 0; ii < nn; ii++)\n        data.bones.push(skeletonData.bones[input.readInt(true)]);\n      data.target = skeletonData.slots[input.readInt(true)];\n      data.positionMode = _SkeletonBinary.PositionModeValues[input.readInt(true)];\n      data.spacingMode = _SkeletonBinary.SpacingModeValues[input.readInt(true)];\n      data.rotateMode = _SkeletonBinary.RotateModeValues[input.readInt(true)];\n      data.offsetRotation = input.readFloat();\n      data.position = input.readFloat();\n      if (data.positionMode == PositionMode.Fixed)\n        data.position *= scale;\n      data.spacing = input.readFloat();\n      if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n        data.spacing *= scale;\n      data.rotateMix = input.readFloat();\n      data.translateMix = input.readFloat();\n      skeletonData.pathConstraints.push(data);\n    }\n    const defaultSkin = this.readSkin(input, skeletonData, true, nonessential);\n    if (defaultSkin != null) {\n      skeletonData.defaultSkin = defaultSkin;\n      skeletonData.skins.push(defaultSkin);\n    }\n    {\n      let i = skeletonData.skins.length;\n      Utils.setArraySize(skeletonData.skins, n = i + input.readInt(true));\n      for (; i < n; i++)\n        skeletonData.skins[i] = this.readSkin(input, skeletonData, false, nonessential);\n    }\n    n = this.linkedMeshes.length;\n    for (let i = 0; i < n; i++) {\n      const linkedMesh = this.linkedMeshes[i];\n      const skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n      if (skin == null)\n        throw new Error(`Skin not found: ${linkedMesh.skin}`);\n      const parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n      if (parent == null)\n        throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\n      linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent : linkedMesh.mesh;\n      linkedMesh.mesh.setParentMesh(parent);\n    }\n    this.linkedMeshes.length = 0;\n    n = input.readInt(true);\n    for (let i = 0; i < n; i++) {\n      const data = new EventData(input.readStringRef());\n      data.intValue = input.readInt(false);\n      data.floatValue = input.readFloat();\n      data.stringValue = input.readString();\n      data.audioPath = input.readString();\n      if (data.audioPath != null) {\n        data.volume = input.readFloat();\n        data.balance = input.readFloat();\n      }\n      skeletonData.events.push(data);\n    }\n    n = input.readInt(true);\n    for (let i = 0; i < n; i++)\n      skeletonData.animations.push(this.readAnimation(input, input.readString(), skeletonData));\n    return skeletonData;\n  }\n  readSkin(input, skeletonData, defaultSkin, nonessential) {\n    let skin = null;\n    let slotCount = 0;\n    if (defaultSkin) {\n      slotCount = input.readInt(true);\n      if (slotCount == 0)\n        return null;\n      skin = new Skin(\"default\");\n    } else {\n      skin = new Skin(input.readString());\n      skin.bones.length = input.readInt(true);\n      for (let i = 0, n = skin.bones.length; i < n; i++)\n        skin.bones[i] = skeletonData.bones[input.readInt(true)];\n      for (let i = 0, n = input.readInt(true); i < n; i++)\n        skin.constraints.push(skeletonData.ikConstraints[input.readInt(true)]);\n      for (let i = 0, n = input.readInt(true); i < n; i++)\n        skin.constraints.push(skeletonData.transformConstraints[input.readInt(true)]);\n      for (let i = 0, n = input.readInt(true); i < n; i++)\n        skin.constraints.push(skeletonData.pathConstraints[input.readInt(true)]);\n      slotCount = input.readInt(true);\n    }\n    for (let i = 0; i < slotCount; i++) {\n      const slotIndex = input.readInt(true);\n      for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n        const name = input.readString();\n        const attachment = this.readAttachment(input, skeletonData, skin, slotIndex, name, nonessential);\n        if (attachment != null)\n          skin.setAttachment(slotIndex, name, attachment);\n      }\n    }\n    return skin;\n  }\n  readAttachment(input, skeletonData, skin, slotIndex, attachmentName, nonessential) {\n    const scale = this.scale;\n    let name = input.readStringRef();\n    if (name == null)\n      name = attachmentName;\n    const typeIndex = input.readByte();\n    const type = _SkeletonBinary.AttachmentTypeValues[typeIndex];\n    switch (type) {\n      case AttachmentType.Region: {\n        let path = input.readString();\n        const rotation = input.readFloat();\n        const x = input.readFloat();\n        const y = input.readFloat();\n        const scaleX = input.readFloat();\n        const scaleY = input.readFloat();\n        const width = input.readFloat();\n        const height = input.readFloat();\n        const color = input.readInt32();\n        if (path == null)\n          path = name;\n        const region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n        if (region == null)\n          return null;\n        region.path = path;\n        region.x = x * scale;\n        region.y = y * scale;\n        region.scaleX = scaleX;\n        region.scaleY = scaleY;\n        region.rotation = rotation;\n        region.width = width * scale;\n        region.height = height * scale;\n        Color.rgba8888ToColor(region.color, color);\n        return region;\n      }\n      case AttachmentType.BoundingBox: {\n        const vertexCount = input.readInt(true);\n        const vertices = this.readVertices(input, vertexCount);\n        const color = nonessential ? input.readInt32() : 0;\n        const box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n        if (box == null)\n          return null;\n        box.worldVerticesLength = vertexCount << 1;\n        box.vertices = vertices.vertices;\n        box.bones = vertices.bones;\n        box.cVertices = vertices.cVertices;\n        if (nonessential)\n          Color.rgba8888ToColor(box.color, color);\n        return box;\n      }\n      case AttachmentType.Mesh: {\n        let path = input.readStringRef();\n        const color = input.readInt32();\n        const vertexCount = input.readInt(true);\n        const uvs = this.readFloatArray(input, vertexCount << 1, 1);\n        const triangles = this.readShortArray(input);\n        const vertices = this.readVertices(input, vertexCount);\n        const hullLength = input.readInt(true);\n        let edges = null;\n        let width = 0;\n        let height = 0;\n        if (nonessential) {\n          edges = this.readShortArray(input);\n          width = input.readFloat();\n          height = input.readFloat();\n        }\n        if (path == null)\n          path = name;\n        const mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n        if (mesh == null)\n          return null;\n        mesh.path = path;\n        Color.rgba8888ToColor(mesh.color, color);\n        mesh.bones = vertices.bones;\n        mesh.vertices = vertices.vertices;\n        mesh.worldVerticesLength = vertexCount << 1;\n        mesh.triangles = triangles;\n        mesh.regionUVs = new Float32Array(uvs);\n        mesh.cVertices = vertices.cVertices;\n        mesh.hullLength = hullLength << 1;\n        if (nonessential) {\n          mesh.edges = edges;\n          mesh.width = width * scale;\n          mesh.height = height * scale;\n        }\n        return mesh;\n      }\n      case AttachmentType.LinkedMesh: {\n        let path = input.readStringRef();\n        const color = input.readInt32();\n        const skinName = input.readStringRef();\n        const parent = input.readStringRef();\n        const inheritDeform = input.readBoolean();\n        let width = 0;\n        let height = 0;\n        if (nonessential) {\n          width = input.readFloat();\n          height = input.readFloat();\n        }\n        if (path == null)\n          path = name;\n        const mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n        if (mesh == null)\n          return null;\n        mesh.path = path;\n        Color.rgba8888ToColor(mesh.color, color);\n        if (nonessential) {\n          mesh.width = width * scale;\n          mesh.height = height * scale;\n        }\n        this.linkedMeshes.push(new LinkedMesh(mesh, skinName, slotIndex, parent, inheritDeform));\n        return mesh;\n      }\n      case AttachmentType.Path: {\n        const closed = input.readBoolean();\n        const constantSpeed = input.readBoolean();\n        const vertexCount = input.readInt(true);\n        const vertices = this.readVertices(input, vertexCount);\n        const lengths = Utils.newArray(vertexCount / 3, 0);\n        for (let i = 0, n = lengths.length; i < n; i++)\n          lengths[i] = input.readFloat() * scale;\n        const color = nonessential ? input.readInt32() : 0;\n        const path = this.attachmentLoader.newPathAttachment(skin, name);\n        if (path == null)\n          return null;\n        path.closed = closed;\n        path.constantSpeed = constantSpeed;\n        path.worldVerticesLength = vertexCount << 1;\n        path.vertices = vertices.vertices;\n        path.bones = vertices.bones;\n        path.lengths = lengths;\n        path.cVertices = vertices.cVertices;\n        if (nonessential)\n          Color.rgba8888ToColor(path.color, color);\n        return path;\n      }\n      case AttachmentType.Point: {\n        const rotation = input.readFloat();\n        const x = input.readFloat();\n        const y = input.readFloat();\n        const color = nonessential ? input.readInt32() : 0;\n        const point = this.attachmentLoader.newPointAttachment(skin, name);\n        if (point == null)\n          return null;\n        point.x = x * scale;\n        point.y = y * scale;\n        point.rotation = rotation;\n        if (nonessential)\n          Color.rgba8888ToColor(point.color, color);\n        return point;\n      }\n      case AttachmentType.Clipping: {\n        const endSlotIndex = input.readInt(true);\n        const vertexCount = input.readInt(true);\n        const vertices = this.readVertices(input, vertexCount);\n        const color = nonessential ? input.readInt32() : 0;\n        const clip = this.attachmentLoader.newClippingAttachment(skin, name);\n        if (clip == null)\n          return null;\n        clip.endSlot = skeletonData.slots[endSlotIndex];\n        clip.worldVerticesLength = vertexCount << 1;\n        clip.vertices = vertices.vertices;\n        clip.bones = vertices.bones;\n        clip.cVertices = vertices.cVertices;\n        if (nonessential)\n          Color.rgba8888ToColor(clip.color, color);\n        return clip;\n      }\n    }\n    return null;\n  }\n  readVertices(input, vertexCount) {\n    const verticesLength = vertexCount << 1;\n    const vertices = new Vertices();\n    const scale = this.scale;\n    if (!input.readBoolean()) {\n      vertices.vertices = this.readFloatArray(input, verticesLength, scale);\n      return vertices;\n    }\n    const myVertices = new Array();\n    const weights = new Array();\n    const bonesArray = new Array();\n    for (let i = 0; i < vertexCount; i++) {\n      const boneCount = input.readInt(true);\n      bonesArray.push(boneCount);\n      myVertices.push(boneCount);\n      for (let ii = 0; ii < boneCount; ii++) {\n        const bone2 = input.readInt(true);\n        bonesArray.push(bone2);\n        myVertices.push(bone2);\n        const weight1 = input.readFloat() * scale;\n        const weight2 = input.readFloat() * scale;\n        const weight3 = input.readFloat();\n        weights.push(weight1);\n        weights.push(weight2);\n        weights.push(weight3);\n        myVertices.push(weight1);\n        myVertices.push(weight2);\n        myVertices.push(weight3);\n      }\n    }\n    vertices.vertices = Utils.toFloatArray(weights);\n    vertices.bones = bonesArray;\n    vertices.cVertices = myVertices;\n    return vertices;\n  }\n  readFloatArray(input, n, scale) {\n    const array = new Array(n);\n    if (scale == 1) {\n      for (let i = 0; i < n; i++)\n        array[i] = input.readFloat();\n    } else {\n      for (let i = 0; i < n; i++)\n        array[i] = input.readFloat() * scale;\n    }\n    return array;\n  }\n  readShortArray(input) {\n    const n = input.readInt(true);\n    const array = new Array(n);\n    for (let i = 0; i < n; i++)\n      array[i] = input.readShort();\n    return array;\n  }\n  readAnimation(input, name, skeletonData) {\n    const timelines = new Array();\n    const scale = this.scale;\n    let duration = 0;\n    const tempColor1 = new Color();\n    for (let i = 0, n = input.readInt(true); i < n; i++) {\n      const slotIndex = input.readInt(true);\n      for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n        const timelineType = input.readByte();\n        const frameCount = input.readInt(true);\n        switch (timelineType) {\n          case _SkeletonBinary.SLOT_ATTACHMENT: {\n            const timeline = new AttachmentTimeline(frameCount);\n            timeline.slotIndex = slotIndex;\n            for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n              const time = input.readFloat();\n              const attachmentName = input.readString();\n              timeline.setFrame(frameIndex, time, attachmentName);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[frameCount - 1]);\n            break;\n          }\n          case _SkeletonBinary.SLOT_COLOR: {\n            const timeline = new ColorTimeline(frameCount);\n            timeline.slotIndex = slotIndex;\n            for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n              const time = input.readFloat();\n              Color.rgba8888ToColor(tempColor1, input.readInt32());\n              timeline.setFrame(frameIndex, time, tempColor1.r, tempColor1.g, tempColor1.b, tempColor1.a);\n              if (frameIndex < frameCount - 1)\n                this.readCurve(input, frameIndex, timeline);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(frameCount - 1) * ColorTimeline.ENTRIES]);\n            break;\n          }\n        }\n      }\n    }\n    for (let i = 0, n = input.readInt(true); i < n; i++) {\n      const boneIndex = input.readInt(true);\n      for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n        const timelineType = input.readByte();\n        const frameCount = input.readInt(true);\n        switch (timelineType) {\n          case _SkeletonBinary.BONE_ROTATE: {\n            const timeline = new RotateTimeline(frameCount);\n            timeline.boneIndex = boneIndex;\n            for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n              timeline.setFrame(frameIndex, input.readFloat(), input.readFloat());\n              if (frameIndex < frameCount - 1)\n                this.readCurve(input, frameIndex, timeline);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(frameCount - 1) * RotateTimeline.ENTRIES]);\n            break;\n          }\n          case _SkeletonBinary.BONE_TRANSLATE:\n          case _SkeletonBinary.BONE_SCALE:\n          case _SkeletonBinary.BONE_SHEAR: {\n            let timeline;\n            let timelineScale = 1;\n            if (timelineType == _SkeletonBinary.BONE_SCALE)\n              timeline = new ScaleTimeline(frameCount);\n            else if (timelineType == _SkeletonBinary.BONE_SHEAR)\n              timeline = new ShearTimeline(frameCount);\n            else {\n              timeline = new TranslateTimeline(frameCount);\n              timelineScale = scale;\n            }\n            timeline.boneIndex = boneIndex;\n            for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n              const time = input.readFloat();\n              const x = input.readFloat();\n              const y = input.readFloat();\n              timeline.setFrame(frameIndex, time, x * timelineScale, y * timelineScale);\n              if (frameIndex < frameCount - 1)\n                this.readCurve(input, frameIndex, timeline);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(frameCount - 1) * TranslateTimeline.ENTRIES]);\n            break;\n          }\n        }\n      }\n    }\n    for (let i = 0, n = input.readInt(true); i < n; i++) {\n      const index = input.readInt(true);\n      const frameCount = input.readInt(true);\n      const timeline = new IkConstraintTimeline(frameCount);\n      timeline.ikConstraintIndex = index;\n      for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n        const time = input.readFloat();\n        const mix = input.readFloat();\n        const softness = input.readByte();\n        timeline.setFrame(frameIndex, time, mix, softness);\n        if (frameIndex < frameCount - 1)\n          this.readCurve(input, frameIndex, timeline);\n      }\n      timelines.push(timeline);\n      duration = Math.max(duration, timeline.frames[(frameCount - 1) * IkConstraintTimeline.ENTRIES]);\n    }\n    for (let i = 0, n = input.readInt(true); i < n; i++) {\n      const index = input.readInt(true);\n      const frameCount = input.readInt(true);\n      const timeline = new TransformConstraintTimeline(frameCount);\n      timeline.transformConstraintIndex = index;\n      for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n        timeline.setFrame(frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());\n        if (frameIndex < frameCount - 1)\n          this.readCurve(input, frameIndex, timeline);\n      }\n      timelines.push(timeline);\n      duration = Math.max(duration, timeline.frames[(frameCount - 1) * TransformConstraintTimeline.ENTRIES]);\n    }\n    for (let i = 0, n = input.readInt(true); i < n; i++) {\n      const index = input.readInt(true);\n      const data = skeletonData.pathConstraints[index];\n      for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n        const timelineType = input.readByte();\n        const frameCount = input.readInt(true);\n        switch (timelineType) {\n          case _SkeletonBinary.PATH_POSITION:\n          case _SkeletonBinary.PATH_SPACING: {\n            let timeline;\n            let timelineScale = 1;\n            if (timelineType == _SkeletonBinary.PATH_SPACING) {\n              timeline = new PathConstraintSpacingTimeline(frameCount);\n              if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n                timelineScale = scale;\n            } else {\n              timeline = new PathConstraintPositionTimeline(frameCount);\n              if (data.positionMode == PositionMode.Fixed)\n                timelineScale = scale;\n            }\n            timeline.pathConstraintIndex = index;\n            for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n              const time = input.readFloat();\n              const value = input.readFloat() * timelineScale;\n              timeline.setFrame(frameIndex, time, value);\n              if (frameIndex < frameCount - 1)\n                this.readCurve(input, frameIndex, timeline);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(frameCount - 1) * PathConstraintPositionTimeline.ENTRIES]);\n            break;\n          }\n          case _SkeletonBinary.PATH_MIX: {\n            const timeline = new PathConstraintMixTimeline(frameCount);\n            timeline.pathConstraintIndex = index;\n            for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n              const time = input.readFloat();\n              const rotateMix = input.readFloat();\n              const translateMix = input.readFloat();\n              timeline.setFrame(frameIndex, time, rotateMix, translateMix);\n              if (frameIndex < frameCount - 1)\n                this.readCurve(input, frameIndex, timeline);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(frameCount - 1) * PathConstraintMixTimeline.ENTRIES]);\n            break;\n          }\n        }\n      }\n    }\n    for (let i = 0, n = input.readInt(true); i < n; i++) {\n      const skin = skeletonData.skins[input.readInt(true)];\n      for (let ii = 0, nn = input.readInt(true); ii < nn; ii++) {\n        const slotIndex = input.readInt(true);\n        for (let iii = 0, nnn = input.readInt(true); iii < nnn; iii++) {\n          const attachment = skin?.getAttachment(slotIndex, input.readString());\n          const weighted = attachment.bones != null;\n          const vertices = attachment.vertices;\n          const deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n          const frameCount = input.readInt(true);\n          const timeline = new DeformTimeline(frameCount);\n          timeline.slotIndex = slotIndex;\n          timeline.attachment = attachment;\n          for (let frameIndex = 0; frameIndex < frameCount; frameIndex++) {\n            const time = input.readFloat();\n            let deform;\n            let end = input.readInt(true);\n            if (end == 0)\n              deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n            else {\n              deform = Utils.newFloatArray(deformLength);\n              const start = input.readInt(true);\n              end += start;\n              if (scale == 1) {\n                for (let v = start; v < end; v++)\n                  deform[v] = input.readFloat();\n              } else {\n                for (let v = start; v < end; v++)\n                  deform[v] = input.readFloat() * scale;\n              }\n              if (!weighted) {\n                for (let v = 0, vn = deform.length; v < vn; v++)\n                  deform[v] += vertices[v];\n              }\n            }\n            timeline.setFrame(frameIndex, time, deform, skin.name);\n            if (frameIndex < frameCount - 1)\n              this.readCurve(input, frameIndex, timeline);\n          }\n          timelines.push(timeline);\n          duration = Math.max(duration, timeline.frames[frameCount - 1]);\n        }\n      }\n    }\n    const drawOrderCount = input.readInt(true);\n    if (drawOrderCount > 0) {\n      const timeline = new DrawOrderTimeline(drawOrderCount);\n      const slotCount = skeletonData.slots.length;\n      for (let i = 0; i < drawOrderCount; i++) {\n        const time = input.readFloat();\n        const offsetCount = input.readInt(true);\n        const drawOrder = Utils.newArray(slotCount, 0);\n        for (let ii = slotCount - 1; ii >= 0; ii--)\n          drawOrder[ii] = -1;\n        const unchanged = Utils.newArray(slotCount - offsetCount, 0);\n        let originalIndex = 0;\n        let unchangedIndex = 0;\n        for (let ii = 0; ii < offsetCount; ii++) {\n          const slotIndex = input.readInt(true);\n          while (originalIndex != slotIndex)\n            unchanged[unchangedIndex++] = originalIndex++;\n          drawOrder[originalIndex + input.readInt(true)] = originalIndex++;\n        }\n        while (originalIndex < slotCount)\n          unchanged[unchangedIndex++] = originalIndex++;\n        for (let ii = slotCount - 1; ii >= 0; ii--)\n          if (drawOrder[ii] == -1)\n            drawOrder[ii] = unchanged[--unchangedIndex];\n        timeline.setFrame(i, time, drawOrder);\n      }\n      timelines.push(timeline);\n      duration = Math.max(duration, timeline.frames[drawOrderCount - 1]);\n    }\n    const eventCount = input.readInt(true);\n    if (eventCount > 0) {\n      const timeline = new EventTimeline(eventCount);\n      for (let i = 0; i < eventCount; i++) {\n        const time = input.readFloat();\n        const eventData = skeletonData.events[input.readInt(true)];\n        const event = new Event(time, eventData);\n        event.intValue = input.readInt(false);\n        event.floatValue = input.readFloat();\n        event.stringValue = input.readBoolean() ? input.readString() : eventData.stringValue;\n        if (event.data.audioPath != null) {\n          event.volume = input.readFloat();\n          event.balance = input.readFloat();\n        }\n        timeline.setFrame(i, event);\n      }\n      timelines.push(timeline);\n      duration = Math.max(duration, timeline.frames[eventCount - 1]);\n    }\n    return new Animation(name, timelines, duration);\n  }\n  readCurve(input, frameIndex, timeline) {\n    switch (input.readByte()) {\n      case _SkeletonBinary.CURVE_STEPPED:\n        timeline.setStepped(frameIndex);\n        break;\n      case _SkeletonBinary.CURVE_BEZIER:\n        this.setCurve(timeline, frameIndex, input.readFloat(), input.readFloat(), input.readFloat(), input.readFloat());\n        break;\n    }\n  }\n  setCurve(timeline, frameIndex, cx1, cy1, cx2, cy2) {\n    timeline.setCurve(frameIndex, cx1, cy1, cx2, cy2);\n  }\n};\nlet SkeletonBinary = _SkeletonBinary;\nSkeletonBinary.AttachmentTypeValues = [\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6\n];\nSkeletonBinary.TransformModeValues = [\n  TransformMode.Normal,\n  TransformMode.OnlyTranslation,\n  TransformMode.NoRotationOrReflection,\n  TransformMode.NoScale,\n  TransformMode.NoScaleOrReflection\n];\nSkeletonBinary.PositionModeValues = [PositionMode.Fixed, PositionMode.Percent];\nSkeletonBinary.SpacingModeValues = [SpacingMode.Length, SpacingMode.Fixed, SpacingMode.Percent];\nSkeletonBinary.RotateModeValues = [RotateMode.Tangent, RotateMode.Chain, RotateMode.ChainScale];\nSkeletonBinary.BlendModeValues = [BLEND_MODES.NORMAL, BLEND_MODES.ADD, BLEND_MODES.MULTIPLY, BLEND_MODES.SCREEN];\nSkeletonBinary.BONE_ROTATE = 0;\nSkeletonBinary.BONE_TRANSLATE = 1;\nSkeletonBinary.BONE_SCALE = 2;\nSkeletonBinary.BONE_SHEAR = 3;\nSkeletonBinary.SLOT_ATTACHMENT = 0;\nSkeletonBinary.SLOT_COLOR = 1;\nSkeletonBinary.SLOT_TWO_COLOR = 2;\nSkeletonBinary.PATH_POSITION = 0;\nSkeletonBinary.PATH_SPACING = 1;\nSkeletonBinary.PATH_MIX = 2;\nSkeletonBinary.CURVE_LINEAR = 0;\nSkeletonBinary.CURVE_STEPPED = 1;\nSkeletonBinary.CURVE_BEZIER = 2;\nclass LinkedMesh {\n  constructor(mesh, skin, slotIndex, parent, inheritDeform) {\n    this.mesh = mesh;\n    this.skin = skin;\n    this.slotIndex = slotIndex;\n    this.parent = parent;\n    this.inheritDeform = inheritDeform;\n  }\n}\nclass Vertices {\n  constructor(bones = null, vertices = null, cVertices = null) {\n    this.bones = bones;\n    this.vertices = vertices;\n    this.cVertices = cVertices;\n  }\n}\n\nexport { SkeletonBinary };\n//# sourceMappingURL=SkeletonBinary.mjs.map\n","import { SkeletonBoundsBase } from '@pixi-spine/base';\n\nclass SkeletonBounds extends SkeletonBoundsBase {\n}\n\nexport { SkeletonBounds };\n//# sourceMappingURL=SkeletonBounds.mjs.map\n","import { Event } from './Event.mjs';\nimport { SkeletonData } from './SkeletonData.mjs';\nimport { SlotData } from './SlotData.mjs';\nimport { BoneData } from './BoneData.mjs';\nimport { IkConstraintData } from './IkConstraintData.mjs';\nimport { TransformConstraintData } from './TransformConstraintData.mjs';\nimport { PathConstraintData, SpacingMode } from './PathConstraintData.mjs';\nimport { Skin } from './Skin.mjs';\nimport { EventData } from './EventData.mjs';\nimport { AttachmentTimeline, ColorTimeline, TwoColorTimeline, RotateTimeline, ScaleTimeline, ShearTimeline, TranslateTimeline, IkConstraintTimeline, TransformConstraintTimeline, PathConstraintSpacingTimeline, PathConstraintPositionTimeline, PathConstraintMixTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, Animation } from './Animation.mjs';\nimport { Color, PositionMode, Utils, settings, RotateMode, TransformMode } from '@pixi-spine/base';\nimport { BLEND_MODES } from '@pixi/core';\n\nclass SkeletonJson {\n  constructor(attachmentLoader) {\n    this.scale = 1;\n    this.linkedMeshes = new Array();\n    this.attachmentLoader = attachmentLoader;\n  }\n  readSkeletonData(json) {\n    const scale = this.scale;\n    const skeletonData = new SkeletonData();\n    const root = typeof json === \"string\" ? JSON.parse(json) : json;\n    const skeletonMap = root.skeleton;\n    if (skeletonMap != null) {\n      skeletonData.hash = skeletonMap.hash;\n      skeletonData.version = skeletonMap.spine;\n      if (skeletonData.version.substr(0, 3) !== \"3.4\") {\n        const error = `Spine 3.4 loader cant load version ${skeletonMap.spine}. Please configure your pixi-spine bundle`;\n        console.error(error);\n      }\n      if (skeletonData.version === \"3.4.75\") {\n        const error = `Unsupported skeleton data, 3.4.75 is deprecated, please export with a newer version of Spine.`;\n        console.error(error);\n      }\n      skeletonData.x = skeletonMap.x;\n      skeletonData.y = skeletonMap.y;\n      skeletonData.width = skeletonMap.width;\n      skeletonData.height = skeletonMap.height;\n      skeletonData.fps = skeletonMap.fps;\n      skeletonData.imagesPath = skeletonMap.images;\n    }\n    if (root.bones) {\n      for (let i = 0; i < root.bones.length; i++) {\n        const boneMap = root.bones[i];\n        let parent = null;\n        const parentName = this.getValue(boneMap, \"parent\", null);\n        if (parentName != null) {\n          parent = skeletonData.findBone(parentName);\n          if (parent == null)\n            throw new Error(`Parent bone not found: ${parentName}`);\n        }\n        const data = new BoneData(skeletonData.bones.length, boneMap.name, parent);\n        data.length = this.getValue(boneMap, \"length\", 0) * scale;\n        data.x = this.getValue(boneMap, \"x\", 0) * scale;\n        data.y = this.getValue(boneMap, \"y\", 0) * scale;\n        data.rotation = this.getValue(boneMap, \"rotation\", 0);\n        data.scaleX = this.getValue(boneMap, \"scaleX\", 1);\n        data.scaleY = this.getValue(boneMap, \"scaleY\", 1);\n        data.shearX = this.getValue(boneMap, \"shearX\", 0);\n        data.shearY = this.getValue(boneMap, \"shearY\", 0);\n        data.transformMode = SkeletonJson.transformModeFromString(this.getValue(boneMap, \"transform\", \"normal\"));\n        data.skinRequired = this.getValue(boneMap, \"skin\", false);\n        skeletonData.bones.push(data);\n      }\n    }\n    if (root.slots) {\n      for (let i = 0; i < root.slots.length; i++) {\n        const slotMap = root.slots[i];\n        const slotName = slotMap.name;\n        const boneName = slotMap.bone;\n        const boneData = skeletonData.findBone(boneName);\n        if (boneData == null)\n          throw new Error(`Slot bone not found: ${boneName}`);\n        const data = new SlotData(skeletonData.slots.length, slotName, boneData);\n        const color = this.getValue(slotMap, \"color\", null);\n        if (color != null)\n          data.color.setFromString(color);\n        const dark = this.getValue(slotMap, \"dark\", null);\n        if (dark != null) {\n          data.darkColor = new Color(1, 1, 1, 1);\n          data.darkColor.setFromString(dark);\n        }\n        data.attachmentName = this.getValue(slotMap, \"attachment\", null);\n        data.blendMode = SkeletonJson.blendModeFromString(this.getValue(slotMap, \"blend\", \"normal\"));\n        skeletonData.slots.push(data);\n      }\n    }\n    if (root.ik) {\n      for (let i = 0; i < root.ik.length; i++) {\n        const constraintMap = root.ik[i];\n        const data = new IkConstraintData(constraintMap.name);\n        data.order = this.getValue(constraintMap, \"order\", 0);\n        data.skinRequired = this.getValue(constraintMap, \"skin\", false);\n        for (let j = 0; j < constraintMap.bones.length; j++) {\n          const boneName = constraintMap.bones[j];\n          const bone = skeletonData.findBone(boneName);\n          if (bone == null)\n            throw new Error(`IK bone not found: ${boneName}`);\n          data.bones.push(bone);\n        }\n        const targetName = constraintMap.target;\n        data.target = skeletonData.findBone(targetName);\n        if (data.target == null)\n          throw new Error(`IK target bone not found: ${targetName}`);\n        data.mix = this.getValue(constraintMap, \"mix\", 1);\n        data.softness = this.getValue(constraintMap, \"softness\", 0) * scale;\n        data.bendDirection = this.getValue(constraintMap, \"bendPositive\", true) ? 1 : -1;\n        data.compress = this.getValue(constraintMap, \"compress\", false);\n        data.stretch = this.getValue(constraintMap, \"stretch\", false);\n        data.uniform = this.getValue(constraintMap, \"uniform\", false);\n        skeletonData.ikConstraints.push(data);\n      }\n    }\n    if (root.transform) {\n      for (let i = 0; i < root.transform.length; i++) {\n        const constraintMap = root.transform[i];\n        const data = new TransformConstraintData(constraintMap.name);\n        data.order = this.getValue(constraintMap, \"order\", 0);\n        data.skinRequired = this.getValue(constraintMap, \"skin\", false);\n        for (let j = 0; j < constraintMap.bones.length; j++) {\n          const boneName = constraintMap.bones[j];\n          const bone = skeletonData.findBone(boneName);\n          if (bone == null)\n            throw new Error(`Transform constraint bone not found: ${boneName}`);\n          data.bones.push(bone);\n        }\n        const targetName = constraintMap.target;\n        data.target = skeletonData.findBone(targetName);\n        if (data.target == null)\n          throw new Error(`Transform constraint target bone not found: ${targetName}`);\n        data.local = this.getValue(constraintMap, \"local\", false);\n        data.relative = this.getValue(constraintMap, \"relative\", false);\n        data.offsetRotation = this.getValue(constraintMap, \"rotation\", 0);\n        data.offsetX = this.getValue(constraintMap, \"x\", 0) * scale;\n        data.offsetY = this.getValue(constraintMap, \"y\", 0) * scale;\n        data.offsetScaleX = this.getValue(constraintMap, \"scaleX\", 0);\n        data.offsetScaleY = this.getValue(constraintMap, \"scaleY\", 0);\n        data.offsetShearY = this.getValue(constraintMap, \"shearY\", 0);\n        data.rotateMix = this.getValue(constraintMap, \"rotateMix\", 1);\n        data.translateMix = this.getValue(constraintMap, \"translateMix\", 1);\n        data.scaleMix = this.getValue(constraintMap, \"scaleMix\", 1);\n        data.shearMix = this.getValue(constraintMap, \"shearMix\", 1);\n        skeletonData.transformConstraints.push(data);\n      }\n    }\n    if (root.path) {\n      for (let i = 0; i < root.path.length; i++) {\n        const constraintMap = root.path[i];\n        const data = new PathConstraintData(constraintMap.name);\n        data.order = this.getValue(constraintMap, \"order\", 0);\n        data.skinRequired = this.getValue(constraintMap, \"skin\", false);\n        for (let j = 0; j < constraintMap.bones.length; j++) {\n          const boneName = constraintMap.bones[j];\n          const bone = skeletonData.findBone(boneName);\n          if (bone == null)\n            throw new Error(`Transform constraint bone not found: ${boneName}`);\n          data.bones.push(bone);\n        }\n        const targetName = constraintMap.target;\n        data.target = skeletonData.findSlot(targetName);\n        if (data.target == null)\n          throw new Error(`Path target slot not found: ${targetName}`);\n        data.positionMode = SkeletonJson.positionModeFromString(this.getValue(constraintMap, \"positionMode\", \"percent\"));\n        data.spacingMode = SkeletonJson.spacingModeFromString(this.getValue(constraintMap, \"spacingMode\", \"length\"));\n        data.rotateMode = SkeletonJson.rotateModeFromString(this.getValue(constraintMap, \"rotateMode\", \"tangent\"));\n        data.offsetRotation = this.getValue(constraintMap, \"rotation\", 0);\n        data.position = this.getValue(constraintMap, \"position\", 0);\n        if (data.positionMode == PositionMode.Fixed)\n          data.position *= scale;\n        data.spacing = this.getValue(constraintMap, \"spacing\", 0);\n        if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n          data.spacing *= scale;\n        data.rotateMix = this.getValue(constraintMap, \"rotateMix\", 1);\n        data.translateMix = this.getValue(constraintMap, \"translateMix\", 1);\n        skeletonData.pathConstraints.push(data);\n      }\n    }\n    if (root.skins) {\n      for (let i = 0; i < root.skins.length; i++) {\n        const skinMap = root.skins[i];\n        const skin = new Skin(skinMap.name);\n        if (skinMap.bones) {\n          for (let ii = 0; ii < skinMap.bones.length; ii++) {\n            const bone = skeletonData.findBone(skinMap.bones[ii]);\n            if (bone == null)\n              throw new Error(`Skin bone not found: ${skinMap.bones[i]}`);\n            skin.bones.push(bone);\n          }\n        }\n        if (skinMap.ik) {\n          for (let ii = 0; ii < skinMap.ik.length; ii++) {\n            const constraint = skeletonData.findIkConstraint(skinMap.ik[ii]);\n            if (constraint == null)\n              throw new Error(`Skin IK constraint not found: ${skinMap.ik[i]}`);\n            skin.constraints.push(constraint);\n          }\n        }\n        if (skinMap.transform) {\n          for (let ii = 0; ii < skinMap.transform.length; ii++) {\n            const constraint = skeletonData.findTransformConstraint(skinMap.transform[ii]);\n            if (constraint == null)\n              throw new Error(`Skin transform constraint not found: ${skinMap.transform[i]}`);\n            skin.constraints.push(constraint);\n          }\n        }\n        if (skinMap.path) {\n          for (let ii = 0; ii < skinMap.path.length; ii++) {\n            const constraint = skeletonData.findPathConstraint(skinMap.path[ii]);\n            if (constraint == null)\n              throw new Error(`Skin path constraint not found: ${skinMap.path[i]}`);\n            skin.constraints.push(constraint);\n          }\n        }\n        for (const slotName in skinMap.attachments) {\n          const slot = skeletonData.findSlot(slotName);\n          if (slot == null)\n            throw new Error(`Slot not found: ${slotName}`);\n          const slotMap = skinMap.attachments[slotName];\n          for (const entryName in slotMap) {\n            const attachment = this.readAttachment(slotMap[entryName], skin, slot.index, entryName, skeletonData);\n            if (attachment != null)\n              skin.setAttachment(slot.index, entryName, attachment);\n          }\n        }\n        skeletonData.skins.push(skin);\n        if (skin.name == \"default\")\n          skeletonData.defaultSkin = skin;\n      }\n    }\n    for (let i = 0, n = this.linkedMeshes.length; i < n; i++) {\n      const linkedMesh = this.linkedMeshes[i];\n      const skin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);\n      if (skin == null)\n        throw new Error(`Skin not found: ${linkedMesh.skin}`);\n      const parent = skin.getAttachment(linkedMesh.slotIndex, linkedMesh.parent);\n      if (parent == null)\n        throw new Error(`Parent mesh not found: ${linkedMesh.parent}`);\n      linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? parent : linkedMesh.mesh;\n      linkedMesh.mesh.setParentMesh(parent);\n    }\n    this.linkedMeshes.length = 0;\n    if (root.events) {\n      for (const eventName in root.events) {\n        const eventMap = root.events[eventName];\n        const data = new EventData(eventName);\n        data.intValue = this.getValue(eventMap, \"int\", 0);\n        data.floatValue = this.getValue(eventMap, \"float\", 0);\n        data.stringValue = this.getValue(eventMap, \"string\", \"\");\n        data.audioPath = this.getValue(eventMap, \"audio\", null);\n        if (data.audioPath != null) {\n          data.volume = this.getValue(eventMap, \"volume\", 1);\n          data.balance = this.getValue(eventMap, \"balance\", 0);\n        }\n        skeletonData.events.push(data);\n      }\n    }\n    if (root.animations) {\n      for (const animationName in root.animations) {\n        const animationMap = root.animations[animationName];\n        this.readAnimation(animationMap, animationName, skeletonData);\n      }\n    }\n    return skeletonData;\n  }\n  readAttachment(map, skin, slotIndex, name, skeletonData) {\n    const scale = this.scale;\n    name = this.getValue(map, \"name\", name);\n    const type = this.getValue(map, \"type\", \"region\");\n    switch (type) {\n      case \"region\": {\n        const path = this.getValue(map, \"path\", name);\n        const region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n        if (region == null)\n          return null;\n        region.path = path;\n        region.x = this.getValue(map, \"x\", 0) * scale;\n        region.y = this.getValue(map, \"y\", 0) * scale;\n        region.scaleX = this.getValue(map, \"scaleX\", 1);\n        region.scaleY = this.getValue(map, \"scaleY\", 1);\n        region.rotation = this.getValue(map, \"rotation\", 0);\n        region.width = map.width * scale;\n        region.height = map.height * scale;\n        const color = this.getValue(map, \"color\", null);\n        if (color != null)\n          region.color.setFromString(color);\n        return region;\n      }\n      case \"boundingbox\": {\n        const box = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n        if (box == null)\n          return null;\n        this.readVertices(map, box, map.vertexCount << 1);\n        const color = this.getValue(map, \"color\", null);\n        if (color != null)\n          box.color.setFromString(color);\n        return box;\n      }\n      case \"mesh\":\n      case \"linkedmesh\": {\n        const path = this.getValue(map, \"path\", name);\n        const mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n        if (mesh == null)\n          return null;\n        mesh.path = path;\n        const color = this.getValue(map, \"color\", null);\n        if (color != null)\n          mesh.color.setFromString(color);\n        mesh.width = this.getValue(map, \"width\", 0) * scale;\n        mesh.height = this.getValue(map, \"height\", 0) * scale;\n        const parent = this.getValue(map, \"parent\", null);\n        if (parent != null) {\n          this.linkedMeshes.push(new LinkedMesh(mesh, this.getValue(map, \"skin\", null), slotIndex, parent, this.getValue(map, \"deform\", true)));\n          return mesh;\n        }\n        const uvs = map.uvs;\n        this.readVertices(map, mesh, uvs.length);\n        mesh.triangles = map.triangles;\n        mesh.regionUVs = new Float32Array(uvs);\n        mesh.edges = this.getValue(map, \"edges\", null);\n        mesh.hullLength = this.getValue(map, \"hull\", 0) * 2;\n        return mesh;\n      }\n      case \"path\": {\n        const path = this.attachmentLoader.newPathAttachment(skin, name);\n        if (path == null)\n          return null;\n        path.closed = this.getValue(map, \"closed\", false);\n        path.constantSpeed = this.getValue(map, \"constantSpeed\", true);\n        const vertexCount = map.vertexCount;\n        this.readVertices(map, path, vertexCount << 1);\n        const lengths = Utils.newArray(vertexCount / 3, 0);\n        for (let i = 0; i < map.lengths.length; i++)\n          lengths[i] = map.lengths[i] * scale;\n        path.lengths = lengths;\n        const color = this.getValue(map, \"color\", null);\n        if (color != null)\n          path.color.setFromString(color);\n        return path;\n      }\n      case \"point\": {\n        const point = this.attachmentLoader.newPointAttachment(skin, name);\n        if (point == null)\n          return null;\n        point.x = this.getValue(map, \"x\", 0) * scale;\n        point.y = this.getValue(map, \"y\", 0) * scale;\n        point.rotation = this.getValue(map, \"rotation\", 0);\n        const color = this.getValue(map, \"color\", null);\n        if (color != null)\n          point.color.setFromString(color);\n        return point;\n      }\n      case \"clipping\": {\n        const clip = this.attachmentLoader.newClippingAttachment(skin, name);\n        if (clip == null)\n          return null;\n        const end = this.getValue(map, \"end\", null);\n        if (end != null) {\n          const slot = skeletonData.findSlot(end);\n          if (slot == null)\n            throw new Error(`Clipping end slot not found: ${end}`);\n          clip.endSlot = slot;\n        }\n        const vertexCount = map.vertexCount;\n        this.readVertices(map, clip, vertexCount << 1);\n        const color = this.getValue(map, \"color\", null);\n        if (color != null)\n          clip.color.setFromString(color);\n        return clip;\n      }\n    }\n    return null;\n  }\n  readVertices(map, attachment, verticesLength) {\n    const scale = this.scale;\n    attachment.worldVerticesLength = verticesLength;\n    const vertices = map.vertices;\n    if (verticesLength == vertices.length) {\n      const scaledVertices = Utils.toFloatArray(vertices);\n      if (scale != 1) {\n        for (let i = 0, n = vertices.length; i < n; i++)\n          scaledVertices[i] *= scale;\n      }\n      attachment.vertices = scaledVertices;\n      return;\n    }\n    const weights = new Array();\n    const bones = new Array();\n    for (let i = 0, n = vertices.length; i < n; ) {\n      const boneCount = vertices[i++];\n      bones.push(boneCount);\n      for (let nn = i + boneCount * 4; i < nn; i += 4) {\n        bones.push(vertices[i]);\n        weights.push(vertices[i + 1] * scale);\n        weights.push(vertices[i + 2] * scale);\n        weights.push(vertices[i + 3]);\n      }\n    }\n    attachment.bones = bones;\n    attachment.vertices = Utils.toFloatArray(weights);\n  }\n  readAnimation(map, name, skeletonData) {\n    const scale = this.scale;\n    const timelines = new Array();\n    let duration = 0;\n    if (map.slots) {\n      for (const slotName in map.slots) {\n        const slotMap = map.slots[slotName];\n        const slotIndex = skeletonData.findSlotIndex(slotName);\n        if (slotIndex == -1)\n          throw new Error(`Slot not found: ${slotName}`);\n        for (const timelineName in slotMap) {\n          const timelineMap = slotMap[timelineName];\n          if (timelineName == \"attachment\") {\n            const timeline = new AttachmentTimeline(timelineMap.length);\n            timeline.slotIndex = slotIndex;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              timeline.setFrame(frameIndex++, this.getValue(valueMap, \"time\", 0), valueMap.name);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n          } else if (timelineName == \"color\") {\n            const timeline = new ColorTimeline(timelineMap.length);\n            timeline.slotIndex = slotIndex;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              const color = new Color();\n              color.setFromString(valueMap.color || \"ffffffff\");\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), color.r, color.g, color.b, color.a);\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * ColorTimeline.ENTRIES]);\n          } else if (timelineName == \"twoColor\") {\n            const timeline = new TwoColorTimeline(timelineMap.length);\n            timeline.slotIndex = slotIndex;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              const light = new Color();\n              const dark = new Color();\n              light.setFromString(valueMap.light);\n              dark.setFromString(valueMap.dark);\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), light.r, light.g, light.b, light.a, dark.r, dark.g, dark.b);\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TwoColorTimeline.ENTRIES]);\n          } else\n            throw new Error(`Invalid timeline type for a slot: ${timelineName} (${slotName})`);\n        }\n      }\n    }\n    if (map.bones) {\n      for (const boneName in map.bones) {\n        const boneMap = map.bones[boneName];\n        const boneIndex = skeletonData.findBoneIndex(boneName);\n        if (boneIndex == -1)\n          throw new Error(`Bone not found: ${boneName}`);\n        for (const timelineName in boneMap) {\n          const timelineMap = boneMap[timelineName];\n          if (timelineName === \"rotate\") {\n            const timeline = new RotateTimeline(timelineMap.length);\n            timeline.boneIndex = boneIndex;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, \"angle\", 0));\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * RotateTimeline.ENTRIES]);\n          } else if (timelineName === \"translate\" || timelineName === \"scale\" || timelineName === \"shear\") {\n            let timeline = null;\n            let timelineScale = 1;\n            let defaultValue = 0;\n            if (timelineName === \"scale\") {\n              timeline = new ScaleTimeline(timelineMap.length);\n              defaultValue = 1;\n            } else if (timelineName === \"shear\")\n              timeline = new ShearTimeline(timelineMap.length);\n            else {\n              timeline = new TranslateTimeline(timelineMap.length);\n              timelineScale = scale;\n            }\n            timeline.boneIndex = boneIndex;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              const x = this.getValue(valueMap, \"x\", defaultValue);\n              const y = this.getValue(valueMap, \"y\", defaultValue);\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), x * timelineScale, y * timelineScale);\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TranslateTimeline.ENTRIES]);\n          } else\n            throw new Error(`Invalid timeline type for a bone: ${timelineName} (${boneName})`);\n        }\n      }\n    }\n    if (map.ik) {\n      for (const constraintName in map.ik) {\n        const constraintMap = map.ik[constraintName];\n        const constraint = skeletonData.findIkConstraint(constraintName);\n        const timeline = new IkConstraintTimeline(constraintMap.length);\n        timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(constraint);\n        let frameIndex = 0;\n        for (let i = 0; i < constraintMap.length; i++) {\n          const valueMap = constraintMap[i];\n          timeline.setFrame(\n            frameIndex,\n            this.getValue(valueMap, \"time\", 0),\n            this.getValue(valueMap, \"mix\", 1),\n            this.getValue(valueMap, \"softness\", 0) * scale\n            // TODO: JSON fix\n            // this.getValue(valueMap, 'bendPositive', true) ? 1 : -1,\n            // this.getValue(valueMap, 'compress', false),\n            // this.getValue(valueMap, 'stretch', false)\n          );\n          this.readCurve(valueMap, timeline, frameIndex);\n          frameIndex++;\n        }\n        timelines.push(timeline);\n        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * IkConstraintTimeline.ENTRIES]);\n      }\n    }\n    if (map.transform) {\n      for (const constraintName in map.transform) {\n        const constraintMap = map.transform[constraintName];\n        const constraint = skeletonData.findTransformConstraint(constraintName);\n        const timeline = new TransformConstraintTimeline(constraintMap.length);\n        timeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(constraint);\n        let frameIndex = 0;\n        for (let i = 0; i < constraintMap.length; i++) {\n          const valueMap = constraintMap[i];\n          timeline.setFrame(\n            frameIndex,\n            this.getValue(valueMap, \"time\", 0),\n            this.getValue(valueMap, \"rotateMix\", 1),\n            this.getValue(valueMap, \"translateMix\", 1),\n            this.getValue(valueMap, \"scaleMix\", 1),\n            this.getValue(valueMap, \"shearMix\", 1)\n          );\n          this.readCurve(valueMap, timeline, frameIndex);\n          frameIndex++;\n        }\n        timelines.push(timeline);\n        duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * TransformConstraintTimeline.ENTRIES]);\n      }\n    }\n    if (map.path) {\n      for (const constraintName in map.path) {\n        const constraintMap = map.path[constraintName];\n        const index = skeletonData.findPathConstraintIndex(constraintName);\n        if (index == -1)\n          throw new Error(`Path constraint not found: ${constraintName}`);\n        const data = skeletonData.pathConstraints[index];\n        for (const timelineName in constraintMap) {\n          const timelineMap = constraintMap[timelineName];\n          if (timelineName === \"position\" || timelineName === \"spacing\") {\n            let timeline = null;\n            let timelineScale = 1;\n            if (timelineName === \"spacing\") {\n              timeline = new PathConstraintSpacingTimeline(timelineMap.length);\n              if (data.spacingMode == SpacingMode.Length || data.spacingMode == SpacingMode.Fixed)\n                timelineScale = scale;\n            } else {\n              timeline = new PathConstraintPositionTimeline(timelineMap.length);\n              if (data.positionMode == PositionMode.Fixed)\n                timelineScale = scale;\n            }\n            timeline.pathConstraintIndex = index;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, timelineName, 0) * timelineScale);\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintPositionTimeline.ENTRIES]);\n          } else if (timelineName === \"mix\") {\n            const timeline = new PathConstraintMixTimeline(timelineMap.length);\n            timeline.pathConstraintIndex = index;\n            let frameIndex = 0;\n            for (let i = 0; i < timelineMap.length; i++) {\n              const valueMap = timelineMap[i];\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), this.getValue(valueMap, \"rotateMix\", 1), this.getValue(valueMap, \"translateMix\", 1));\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[(timeline.getFrameCount() - 1) * PathConstraintMixTimeline.ENTRIES]);\n          }\n        }\n      }\n    }\n    if (map.deform) {\n      for (const deformName in map.deform) {\n        const deformMap = map.deform[deformName];\n        const skin = skeletonData.findSkin(deformName);\n        if (skin == null) {\n          if (settings.FAIL_ON_NON_EXISTING_SKIN) {\n            throw new Error(`Skin not found: ${deformName}`);\n          } else {\n            continue;\n          }\n        }\n        for (const slotName in deformMap) {\n          const slotMap = deformMap[slotName];\n          const slotIndex = skeletonData.findSlotIndex(slotName);\n          if (slotIndex == -1)\n            throw new Error(`Slot not found: ${slotMap.name}`);\n          for (const timelineName in slotMap) {\n            const timelineMap = slotMap[timelineName];\n            const attachment = skin.getAttachment(slotIndex, timelineName);\n            if (attachment == null)\n              throw new Error(`Deform attachment not found: ${timelineMap.name}`);\n            const weighted = attachment.bones != null;\n            const vertices = attachment.vertices;\n            const deformLength = weighted ? vertices.length / 3 * 2 : vertices.length;\n            const timeline = new DeformTimeline(timelineMap.length);\n            timeline.slotIndex = slotIndex;\n            timeline.attachment = attachment;\n            let frameIndex = 0;\n            for (let j = 0; j < timelineMap.length; j++) {\n              const valueMap = timelineMap[j];\n              let deform;\n              const verticesValue = this.getValue(valueMap, \"vertices\", null);\n              if (verticesValue == null)\n                deform = weighted ? Utils.newFloatArray(deformLength) : vertices;\n              else {\n                deform = Utils.newFloatArray(deformLength);\n                const start = this.getValue(valueMap, \"offset\", 0);\n                Utils.arrayCopy(verticesValue, 0, deform, start, verticesValue.length);\n                if (scale != 1) {\n                  for (let i = start, n = i + verticesValue.length; i < n; i++)\n                    deform[i] *= scale;\n                }\n                if (!weighted) {\n                  for (let i = 0; i < deformLength; i++)\n                    deform[i] += vertices[i];\n                }\n              }\n              timeline.setFrame(frameIndex, this.getValue(valueMap, \"time\", 0), deform, skin.name);\n              this.readCurve(valueMap, timeline, frameIndex);\n              frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n          }\n        }\n      }\n    }\n    let drawOrderNode = map.drawOrder;\n    if (drawOrderNode == null)\n      drawOrderNode = map.draworder;\n    if (drawOrderNode != null) {\n      const timeline = new DrawOrderTimeline(drawOrderNode.length);\n      const slotCount = skeletonData.slots.length;\n      let frameIndex = 0;\n      for (let j = 0; j < drawOrderNode.length; j++) {\n        const drawOrderMap = drawOrderNode[j];\n        let drawOrder = null;\n        const offsets = this.getValue(drawOrderMap, \"offsets\", null);\n        if (offsets != null) {\n          drawOrder = Utils.newArray(slotCount, -1);\n          const unchanged = Utils.newArray(slotCount - offsets.length, 0);\n          let originalIndex = 0;\n          let unchangedIndex = 0;\n          for (let i = 0; i < offsets.length; i++) {\n            const offsetMap = offsets[i];\n            const slotIndex = skeletonData.findSlotIndex(offsetMap.slot);\n            if (slotIndex == -1)\n              throw new Error(`Slot not found: ${offsetMap.slot}`);\n            while (originalIndex != slotIndex)\n              unchanged[unchangedIndex++] = originalIndex++;\n            drawOrder[originalIndex + offsetMap.offset] = originalIndex++;\n          }\n          while (originalIndex < slotCount)\n            unchanged[unchangedIndex++] = originalIndex++;\n          for (let i = slotCount - 1; i >= 0; i--)\n            if (drawOrder[i] == -1)\n              drawOrder[i] = unchanged[--unchangedIndex];\n        }\n        timeline.setFrame(frameIndex++, this.getValue(drawOrderMap, \"time\", 0), drawOrder);\n      }\n      timelines.push(timeline);\n      duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n    }\n    if (map.events) {\n      const timeline = new EventTimeline(map.events.length);\n      let frameIndex = 0;\n      for (let i = 0; i < map.events.length; i++) {\n        const eventMap = map.events[i];\n        const eventData = skeletonData.findEvent(eventMap.name);\n        if (eventData == null)\n          throw new Error(`Event not found: ${eventMap.name}`);\n        const event = new Event(Utils.toSinglePrecision(this.getValue(eventMap, \"time\", 0)), eventData);\n        event.intValue = this.getValue(eventMap, \"int\", eventData.intValue);\n        event.floatValue = this.getValue(eventMap, \"float\", eventData.floatValue);\n        event.stringValue = this.getValue(eventMap, \"string\", eventData.stringValue);\n        if (event.data.audioPath != null) {\n          event.volume = this.getValue(eventMap, \"volume\", 1);\n          event.balance = this.getValue(eventMap, \"balance\", 0);\n        }\n        timeline.setFrame(frameIndex++, event);\n      }\n      timelines.push(timeline);\n      duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n    }\n    if (isNaN(duration)) {\n      throw new Error(\"Error while parsing animation, duration is NaN\");\n    }\n    skeletonData.animations.push(new Animation(name, timelines, duration));\n  }\n  readCurve(map, timeline, frameIndex) {\n    if (!map.hasOwnProperty(\"curve\"))\n      return;\n    if (map.curve === \"stepped\")\n      timeline.setStepped(frameIndex);\n    else {\n      const curve = map.curve;\n      timeline.setCurve(frameIndex, curve, this.getValue(map, \"c2\", 0), this.getValue(map, \"c3\", 1), this.getValue(map, \"c4\", 1));\n    }\n  }\n  getValue(map, prop, defaultValue) {\n    return map[prop] !== void 0 ? map[prop] : defaultValue;\n  }\n  static blendModeFromString(str) {\n    str = str.toLowerCase();\n    if (str == \"normal\")\n      return BLEND_MODES.NORMAL;\n    if (str == \"additive\")\n      return BLEND_MODES.ADD;\n    if (str == \"multiply\")\n      return BLEND_MODES.MULTIPLY;\n    if (str == \"screen\")\n      return BLEND_MODES.SCREEN;\n    throw new Error(`Unknown blend mode: ${str}`);\n  }\n  static positionModeFromString(str) {\n    str = str.toLowerCase();\n    if (str == \"fixed\")\n      return PositionMode.Fixed;\n    if (str == \"percent\")\n      return PositionMode.Percent;\n    throw new Error(`Unknown position mode: ${str}`);\n  }\n  static spacingModeFromString(str) {\n    str = str.toLowerCase();\n    if (str == \"length\")\n      return SpacingMode.Length;\n    if (str == \"fixed\")\n      return SpacingMode.Fixed;\n    if (str == \"percent\")\n      return SpacingMode.Percent;\n    throw new Error(`Unknown position mode: ${str}`);\n  }\n  static rotateModeFromString(str) {\n    str = str.toLowerCase();\n    if (str == \"tangent\")\n      return RotateMode.Tangent;\n    if (str == \"chain\")\n      return RotateMode.Chain;\n    if (str == \"chainscale\")\n      return RotateMode.ChainScale;\n    throw new Error(`Unknown rotate mode: ${str}`);\n  }\n  static transformModeFromString(str) {\n    str = str.toLowerCase();\n    if (str == \"normal\")\n      return TransformMode.Normal;\n    if (str == \"onlytranslation\")\n      return TransformMode.OnlyTranslation;\n    if (str == \"norotationorreflection\")\n      return TransformMode.NoRotationOrReflection;\n    if (str == \"noscale\")\n      return TransformMode.NoScale;\n    if (str == \"noscaleorreflection\")\n      return TransformMode.NoScaleOrReflection;\n    throw new Error(`Unknown transform mode: ${str}`);\n  }\n}\nclass LinkedMesh {\n  constructor(mesh, skin, slotIndex, parent, inheritDeform) {\n    this.mesh = mesh;\n    this.skin = skin;\n    this.slotIndex = slotIndex;\n    this.parent = parent;\n    this.inheritDeform = inheritDeform;\n  }\n}\n\nexport { SkeletonJson };\n//# sourceMappingURL=SkeletonJson.mjs.map\n","import { SpineBase } from '@pixi-spine/base';\nimport { Skeleton } from './core/Skeleton.mjs';\nimport { AnimationState } from './core/AnimationState.mjs';\nimport { AnimationStateData } from './core/AnimationStateData.mjs';\n\nclass Spine extends SpineBase {\n  createSkeleton(spineData) {\n    this.skeleton = new Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n    this.stateData = new AnimationStateData(spineData);\n    this.state = new AnimationState(this.stateData);\n  }\n}\n\nexport { Spine };\n//# sourceMappingURL=Spine.mjs.map\n","/**\n * @public\n */\nexport enum SPINE_VERSION {\n    UNKNOWN = 0,\n    VER34 = 34,\n    VER37 = 37,\n    VER38 = 38,\n    VER40 = 40,\n    VER41 = 41,\n}\n\n/**\n * @public\n */\nexport function detectSpineVersion(version: string): SPINE_VERSION {\n    const ver3 = version.substr(0, 3);\n    const verNum = Math.floor(Number(ver3) * 10 + 1e-3);\n\n    if (ver3 === '3.3') {\n        return SPINE_VERSION.VER34;\n    }\n    if (ver3 === '3.4') {\n        return SPINE_VERSION.VER34;\n    }\n    if (ver3 === '3.7') {\n        return SPINE_VERSION.VER37;\n    }\n    if (ver3 === '3.8') {\n        return SPINE_VERSION.VER38;\n    }\n    if (ver3 === '4.0') {\n        return SPINE_VERSION.VER40;\n    }\n    if (ver3 === '4.1') {\n        return SPINE_VERSION.VER41;\n    }\n    // try parse old versions with 3.7\n    if (verNum < SPINE_VERSION.VER37) {\n        return SPINE_VERSION.VER37;\n    }\n\n    return SPINE_VERSION.UNKNOWN;\n}\n","import { ISpineResource, SpineLoaderAbstract } from '@pixi-spine/loader-base';\nimport { BinaryInput, ISkeletonData, ISkeletonParser, TextureAtlas } from '@pixi-spine/base';\nimport * as spine34 from '@pixi-spine/runtime-3.4';\nimport * as spine38 from '@pixi-spine/runtime-3.8';\nimport * as spine37 from '@pixi-spine/runtime-3.7';\nimport * as spine41 from '@pixi-spine/runtime-4.1';\nimport { detectSpineVersion, SPINE_VERSION } from './versions';\n\nclass UniBinaryParser implements ISkeletonParser {\n    scale = 1;\n\n    readSkeletonData(atlas: TextureAtlas, dataToParse: Uint8Array): ISkeletonData {\n        let parser: any = null;\n        let version = this.readVersionOldFormat(dataToParse);\n        let ver = detectSpineVersion(version);\n\n        if (ver === SPINE_VERSION.VER34) {\n            parser = new spine34.SkeletonBinary(new spine34.AtlasAttachmentLoader(atlas));\n        }\n        if (ver === SPINE_VERSION.VER38) {\n            parser = new spine38.SkeletonBinary(new spine38.AtlasAttachmentLoader(atlas));\n        }\n        version = this.readVersionNewFormat(dataToParse);\n        ver = detectSpineVersion(version);\n        if (ver === SPINE_VERSION.VER40 || ver === SPINE_VERSION.VER41) {\n            parser = new spine41.SkeletonBinary(new spine41.AtlasAttachmentLoader(atlas));\n        }\n        if (!parser) {\n            const error = `Unsupported version of spine model ${version}, please update pixi-spine`;\n\n            console.error(error);\n        }\n\n        parser.scale = this.scale;\n\n        return parser.readSkeletonData(dataToParse);\n    }\n\n    readVersionOldFormat(dataToParse: Uint8Array) {\n        const input = new BinaryInput(dataToParse);\n        let version;\n\n        try {\n            input.readString();\n            version = input.readString();\n        } catch (e) {\n            version = '';\n        }\n\n        return version || '';\n    }\n\n    readVersionNewFormat(dataToParse: Uint8Array) {\n        const input = new BinaryInput(dataToParse);\n\n        input.readInt32();\n        input.readInt32();\n        let version;\n\n        try {\n            version = input.readString();\n        } catch (e) {\n            version = '';\n        }\n\n        return version || '';\n    }\n}\n\nclass UniJsonParser implements ISkeletonParser {\n    scale = 1;\n\n    readSkeletonData(atlas: TextureAtlas, dataToParse: any): ISkeletonData {\n        const version = dataToParse.skeleton.spine;\n        const ver = detectSpineVersion(version);\n        let parser: any = null;\n\n        if (ver === SPINE_VERSION.VER37) {\n            parser = new spine37.SkeletonJson(new spine37.AtlasAttachmentLoader(atlas));\n        }\n        if (ver === SPINE_VERSION.VER38) {\n            parser = new spine38.SkeletonJson(new spine38.AtlasAttachmentLoader(atlas));\n        }\n        if (ver === SPINE_VERSION.VER40 || ver === SPINE_VERSION.VER41) {\n            parser = new spine41.SkeletonJson(new spine41.AtlasAttachmentLoader(atlas));\n        }\n        if (!parser) {\n            const error = `Unsupported version of spine model ${version}, please update pixi-spine`;\n\n            console.error(error);\n        }\n\n        parser.scale = this.scale;\n\n        return parser.readSkeletonData(dataToParse);\n    }\n}\n\n/**\n * @public\n */\nexport class SpineLoader extends SpineLoaderAbstract<ISkeletonData> {\n    createBinaryParser(): ISkeletonParser {\n        return new UniBinaryParser();\n    }\n\n    createJsonParser(): ISkeletonParser {\n        return new UniJsonParser();\n    }\n\n    parseData(parser: ISkeletonParser, atlas: TextureAtlas, dataToParse: any): ISpineResource<ISkeletonData> {\n        const parserCast = parser as UniBinaryParser | UniJsonParser;\n\n        return {\n            spineData: parserCast.readSkeletonData(atlas, dataToParse),\n            spineAtlas: atlas,\n        };\n    }\n}\n","import { IAnimationState, IAnimationStateData, ISkeleton, ISkeletonData, SpineBase } from '@pixi-spine/base';\nimport * as spine34 from '@pixi-spine/runtime-3.4';\nimport * as spine38 from '@pixi-spine/runtime-3.8';\nimport * as spine37 from '@pixi-spine/runtime-3.7';\nimport * as spine41 from '@pixi-spine/runtime-4.1';\nimport { detectSpineVersion, SPINE_VERSION } from './versions';\n\n/**\n * @public\n */\nexport class Spine extends SpineBase<ISkeleton, ISkeletonData, IAnimationState, IAnimationStateData> {\n    createSkeleton(spineData: ISkeletonData) {\n        const ver = detectSpineVersion(spineData.version);\n        let spine: any = null;\n\n        if (ver === SPINE_VERSION.VER34) {\n            spine = spine34;\n        }\n        if (ver === SPINE_VERSION.VER37) {\n            spine = spine37;\n        }\n        if (ver === SPINE_VERSION.VER38) {\n            spine = spine38;\n        }\n        if (ver === SPINE_VERSION.VER40 || ver === SPINE_VERSION.VER41) {\n            spine = spine41;\n        }\n        if (!spine) {\n            const error = `Cant detect version of spine model ${spineData.version}`;\n\n            console.error(error);\n        }\n        this.skeleton = new spine.Skeleton(spineData);\n        this.skeleton.updateWorldTransform();\n        this.stateData = new spine.AnimationStateData(spineData);\n        this.state = new spine.AnimationState(this.stateData);\n    }\n}\n","/* eslint-disable spaced-comment */\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../global.d.ts\" />\nimport '@pixi-spine/loader-base'; // Side effect install atlas loader\nimport { SpineLoader } from './SpineLoader';\nexport * from './Spine';\nexport * from './versions';\n\n// Install the loader\nnew SpineLoader().installLoader();\n"],"names":["Attachment","name","_VertexAttachment","slot","worldVertices","start","count","offset","stride","skeleton","deformArray","vertices","bones","mat","x","y","a","b","c","d","v2","w","vx","vy","v","skip","i","n","skeletonBones","wx","wy","weight","deform","f","attachment","Utils","VertexAttachment","BoundingBoxAttachment","AttachmentType","Color","copy","ClippingAttachment","MeshAttachment","parentMesh","PathAttachment","PointAttachment","bone","point","cos","MathUtils","sin","Slot","data","time","_RegionAttachment","regionScaleX","regionScaleY","localX","localY","localX2","localY2","radians","localXCos","localXSin","localYCos","localYSin","localX2Cos","localX2Sin","localY2Cos","localY2Sin","region","uvs","vertexOffset","offsetX","offsetY","RegionAttachment","JitterEffect","jitterX","jitterY","position","uv","light","dark","_SwirlEffect","radius","radAngle","dist","theta","SwirlEffect","PowOut","Animation","timelines","duration","id","lastTime","loop","events","alpha","blend","direction","values","target","step","low","high","current","last","TimelineType","TimelineType2","_CurveTimeline","frameCount","frameIndex","index","type","cx1","cy1","cx2","cy2","tmpx","tmpy","dddfx","dddfy","ddfx","ddfy","dfx","dfy","curves","percent","prevX","prevY","CurveTimeline","_RotateTimeline","degrees","frames","MixBlend","r2","frame","prevRotation","frameTime","r","RotateTimeline","_TranslateTimeline","TranslateTimeline","ScaleTimeline","bx","by","MixDirection","ShearTimeline","_ColorTimeline","g","color","setup","ColorTimeline","_TwoColorTimeline","g2","b2","setupLight","setupDark","TwoColorTimeline","AttachmentTimeline","attachmentName","zeros","DeformTimeline","skin","firedEvents","slotAttachment","frameVertices","vertexCount","vertexAttachment","deform2","setupVertices","lastVertices","vertexAttachment2","prevVertices","nextVertices","prev","EventTimeline","event","DrawOrderTimeline","drawOrder","slots","drawOrderToSetupIndex","_IkConstraintTimeline","mix","bendDirection","constraint","IkConstraintTimeline","_TransformConstraintTimeline","rotateMix","translateMix","scaleMix","shearMix","rotate","translate","scale","shear","TransformConstraintTimeline","_PathConstraintPositionTimeline","value","PathConstraintPositionTimeline","PathConstraintSpacingTimeline","spacing","_PathConstraintMixTimeline","PathConstraintMixTimeline","_AnimationState","EventQueue","IntSet","Pool","TrackEntry","delta","tracks","currentDelta","next","nextTime","from","to","finished","applied","animationLast","animationTime","timelineCount","ii","timeline","timelineMode","firstFrame","timelinesRotation","timelineBlend","setupState","attachments","alphaHold","alphaMix","timelineHoldMix","holdMix","rotateTimeline","r1","total","diff","lastTotal","lastDiff","dir","entry","animationStart","animationEnd","trackLastWrapped","complete","oldDrainDisabled","trackIndex","interrupt","animationName","animation","delay","mixDuration","timelinesCount","timelineDipMix","propertyIDs","outer","listener","AnimationState","_TrackEntry","_EventQueue","animState","EventType","objects","listeners","EventType2","AnimationStateAdapter","_AnimationStateData","skeletonData","fromName","toName","key","AnimationStateData","AtlasAttachmentLoader","atlas","path","Bone","parent","Matrix","rotation","scaleX","scaleY","shearX","shearY","m","sx","sy","settings","rotationY","pa","pb","pc","pd","TransformMode","la","lb","lc","ld","s","prx","rx","ry","za","zc","zb","zd","pm","pid","dx","dy","ia","ib","ic","ra","rb","rc","rd","det","world","invDet","local","worldRotation","localRotation","BoneData","ConstraintData","order","skinRequired","Event","EventData","IkConstraint","targetX","targetY","compress","stretch","uniform","p","rotationIK","tx","ty","sa","sc","dd","child","bendDir","softness","px","py","psx","psy","csx","pmat","os1","os2","s2","cx","cy","cwx","cwy","u","pp","l1","l2","a1","a2","td","sd","aa","bb","ta","c1","c2","q","r0","minAngle","minX","minDist","minY","maxAngle","maxX","maxDist","maxY","os","IkConstraintData","PathConstraintData","SpacingMode","SpacingMode2","_PathConstraint","spacingMode","lengthSpacing","rotateMode","tangents","RotateMode","boneCount","spacesCount","spaces","lengths","setupLength","length","positions","PositionMode","boneX","boneY","offsetRotation","tip","percentPosition","percentSpacing","out","closed","verticesLength","curveCount","prevCurve","pathLength2","o","curve","space","pathLength","x1","y1","x2","y2","segments","curveLength","segment","temp","tt","ttt","uu","uuu","ut","ut3","uut3","utt3","PathConstraint","TransformConstraint","Vector2","targetMat","tb","tc","degRadReflect","offsetShearY","modified","ts","_Skeleton","boneData","slotData","ikConstraintData","transformConstraintData","pathConstraintData","updateCache","skinBones","ikConstraints","transformConstraints","pathConstraints","ikCount","transformCount","pathCount","constraintCount","constrained","slotIndex","slotBone","pathBones","boneIndex","updateCacheReset","boneName","slotName","skinName","newSkin","constraintName","ikConstraint","size","mesh","nn","Skeleton","SkeletonData","skins","eventDataName","animations","pathConstraintName","SlotData","TransformConstraintData","SkinEntry","Skin","contained","j","dictionary","entries","slotAttachments","oldSkin","skinAttachment","_SkeletonBinary","attachmentLoader","binary","input","BinaryInput","nonessential","defaultSkin","linkedMesh","slotCount","typeIndex","width","height","box","triangles","hullLength","edges","inheritDeform","LinkedMesh","constantSpeed","endSlotIndex","clip","Vertices","myVertices","weights","bonesArray","bone2","weight1","weight2","weight3","array","tempColor1","timelineType","timelineScale","iii","nnn","weighted","deformLength","end","vn","drawOrderCount","offsetCount","unchanged","originalIndex","unchangedIndex","eventCount","eventData","SkeletonBinary","BLEND_MODES","LinkedMesh$1","cVertices","SkeletonBounds","SkeletonBoundsBase","SkeletonJson","json","root","skeletonMap","error","boneMap","parentName","slotMap","constraintMap","targetName","skinMap","entryName","eventName","eventMap","animationMap","map","scaledVertices","timelineName","timelineMap","valueMap","defaultValue","deformName","deformMap","verticesValue","drawOrderNode","drawOrderMap","offsets","offsetMap","prop","str","SpineBase","spineData","SPINE_VERSION","detectSpineVersion","version","ver3","verNum","UniBinaryParser","dataToParse","parser","ver","spine34","spine38","spine41","e","UniJsonParser","spine37","SpineLoader","SpineLoaderAbstract","Spine","spine"],"mappings":"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"}